import Component from '@glimmer/component';
import { service } from '@ember/service';
import { action } from '@ember/object';
import { tracked } from '@glimmer/tracking';
import type { Select } from 'ember-power-select/components/power-select';
import type IntlService from 'ember-intl/services/intl';

import type FileModel from 'irene/models/file';
import styles from './index.scss';

export interface FileDetailsApiScanCapturedApisApiDomainFiltersExtra {
  file: FileModel;
  beforeOptionLabel: string;
  iconName: string;
  projectProfileApiFilters: string[];
  autoGeneratedApiFilters: string[];
  onClearAll: () => void;
  selectedItem: string[];
  onApplyFilters: () => void;
  optionTitle: string;
  isDomainFilterSelected: (option: string) => boolean;
  onSelectAPIUrlDomainChange: (option: string) => void;
}

export interface FileDetailsApiScanCapturedApisApiDomainFiltersSignature {
  Args: {
    file: FileModel;
    projectProfileApiFilters: string[];
    autoGeneratedApiFilters: string[];
    selectedAPIUrlDomain: string[];
    onDomainFilterApply: (domainFilters: string[]) => void;
    isLoadingCapturedApis: boolean;
  };
}

export default class FileDetailsApiScanCapturedApisApiDomainFiltersComponent extends Component<FileDetailsApiScanCapturedApisApiDomainFiltersSignature> {
  @service declare intl: IntlService;

  @tracked closeDrawer = false;
  @tracked selectInstance: Select | null = null;
  @tracked currentSelectedAPIUrlDomain: string[] = [];

  constructor(
    owner: unknown,
    args: FileDetailsApiScanCapturedApisApiDomainFiltersSignature['Args']
  ) {
    super(owner, args);

    this.currentSelectedAPIUrlDomain = this.activeDomainFilters;
  }

  get selectElementExtras() {
    return {
      file: this.args.file,
      optionTitle: this.intl.t('apiScanModule.domainFilters'),
      beforeOptionLabel: this.intl.t('apiScanModule.selectTheDomain'),
      iconName: 'filter-list',
      projectProfileApiFilters: this.args.projectProfileApiFilters,
      autoGeneratedApiFilters: this.args.autoGeneratedApiFilters,
      onClearAll: this.onClearAll,
      selectedItem: this.currentSelectedAPIUrlDomain,
      onApplyFilters: this.onApplyFilters,
      isDomainFilterSelected: this.isDomainFilterSelected,
      onSelectAPIUrlDomainChange: this.onSelectAPIUrlDomainChange,
    };
  }

  get options() {
    return [
      {
        id: 'project-profile-filters',
        groupName: this.intl.t('apiScanModule.projectProfileFilters'),
        options: this.args.projectProfileApiFilters,
      },
      {
        id: 'auto-generated-filters',
        groupName: this.intl.t('apiScanModule.autoGeneratedFilters'),
        options: this.args.autoGeneratedApiFilters,
      },
    ];
  }

  get dropDownClass() {
    return styles['filter-input-dropdown'];
  }

  get triggerClass() {
    return styles['filter-trigger'];
  }

  get activeDomainFilters() {
    return this.args.selectedAPIUrlDomain;
  }

  @action
  onSelectAPIUrlDomainChange(value: string) {
    const selectedAPIUrlDomain = [...this.currentSelectedAPIUrlDomain];

    if (this.isDomainFilterSelected(value)) {
      this.currentSelectedAPIUrlDomain = selectedAPIUrlDomain.filter(
        (domain) => domain !== value
      );
    } else {
      this.currentSelectedAPIUrlDomain = [...selectedAPIUrlDomain, value];
    }
  }

  @action
  isDomainFilterSelected(value: string) {
    return this.currentSelectedAPIUrlDomain.includes(value);
  }

  @action
  registerAPI(instance: Select) {
    this.selectInstance = instance;
  }

  @action
  onOpen(_select: Select, event: Event) {
    const target = event.target as HTMLDivElement;

    // Do not open the dropdown if the clear all button is clicked
    return target.id !== 'clear-all-domain-filter-button';
  }

  @action
  onClose(_select: Select, event: Event) {
    const target = event?.target as HTMLDivElement;

    // Some weird behavior from iconify is causing the dropdown to close when the project settings icon is clicked
    //  from the group option component
    if (target?.id === 'open-prj-settings-icon') {
      return false;
    }

    // Reset the selected API URL domain
    // When the dropdown is closed from clicking outside the dropdown
    this.currentSelectedAPIUrlDomain = this.activeDomainFilters;

    return true;
  }

  @action
  onClearAll() {
    this.currentSelectedAPIUrlDomain = [];

    // Only clear all filters if there are active filters
    if (this.activeDomainFilters.length > 0) {
      this.args.onDomainFilterApply([]);
    }
  }

  @action
  shouldApplyFilters() {
    const sortedCurrSelectedAPIUrlDomain =
      this.currentSelectedAPIUrlDomain.sort((a, b) => a.localeCompare(b));

    const sortedActiveDomainFilters = this.activeDomainFilters.sort((a, b) =>
      a.localeCompare(b)
    );

    return (
      sortedCurrSelectedAPIUrlDomain.join(',') !==
      sortedActiveDomainFilters.join(',')
    );
  }

  @action
  onApplyFilters() {
    if (this.shouldApplyFilters()) {
      this.args.onDomainFilterApply(this.currentSelectedAPIUrlDomain);
      this.selectInstance?.actions.close();
    }
  }
}

declare module '@glint/environment-ember-loose/registry' {
  export default interface Registry {
    'FileDetails::ApiScan::CapturedApis::ApiDomainFilters': typeof FileDetailsApiScanCapturedApisApiDomainFiltersComponent;
  }
}
