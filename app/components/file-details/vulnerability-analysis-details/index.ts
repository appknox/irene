import { inject as service } from '@ember/service';
import { htmlSafe } from '@ember/template';
import { isEmpty } from '@ember/utils';
import Component from '@glimmer/component';
import IntlService from 'ember-intl/services/intl';

import AnalysisModel from 'irene/models/analysis';

export interface FileDetailsVulnerabilityAnalysisDetailsSignature {
  Args: {
    analysis: AnalysisModel;
    showHeader?: boolean;
  };
}

export default class FileDetailsVulnerabilityAnalysisDetailsComponent extends Component<FileDetailsVulnerabilityAnalysisDetailsSignature> {
  @service declare intl: IntlService;

  get breadcrumbItems() {
    const fileId = this.args.analysis.file.get('id');
    const analysisId = this.args.analysis.id;

    return [
      {
        route: 'authenticated.projects',
        linkTitle: this.intl.t('allProjects'),
      },
      {
        route: 'authenticated.dashboard.file',
        linkTitle: this.intl.t('scanDetails'),
        models: [fileId as string],
      },
      {
        route: 'authenticated.dashboard.file.analysis',
        linkTitle: this.intl.t('vulnerabilityDetails'),
        models: [fileId as string, analysisId],
      },
    ];
  }

  get analysis() {
    return this.args.analysis || null;
  }

  get regulatoryContent() {
    return {
      owasp: this.analysis.owasp.toArray(),
      cwe: this.analysis.cwe.toArray(),
      asvs: this.analysis.asvs.toArray(),
      mstg: this.analysis.mstg.toArray(),
      gdpr: this.analysis.gdpr.toArray(),
      pcidss: this.analysis.pcidss.toArray(),
      hipaa: this.analysis.hipaa.toArray(),
    };
  }

  get hasRegulatoryContent() {
    return Object.values(this.regulatoryContent).some(
      (content) => !isEmpty(content)
    );
  }

  get vulnerability() {
    return this.analysis.vulnerability || null;
  }

  get vulnerabilityTypes() {
    return this.analysis.vulnerabilityTypes;
  }

  get vulnerabilityDescription() {
    if (this.analysis.isScanning) {
      return htmlSafe(this.vulnerability.get?.('question') || '');
    }

    if (this.analysis.isRisky) {
      return this.vulnerability.get?.('descriptionUnescapedd');
    }

    return htmlSafe(this.vulnerability.get?.('successMessage') || '');
  }

  get businessImplication() {
    return htmlSafe(this.vulnerability.get?.('businessImplication') || '');
  }

  get compliantSolution() {
    return htmlSafe(this.vulnerability.get?.('compliant') || '');
  }

  get nonCompliantCodeExample() {
    return htmlSafe(this.vulnerability.get?.('nonCompliant') || '');
  }
}

declare module '@glint/environment-ember-loose/registry' {
  export default interface Registry {
    'FileDetails::VulnerabilityAnalysisDetails': typeof FileDetailsVulnerabilityAnalysisDetailsComponent;
  }
}
