import { inject as service } from '@ember/service';
import { htmlSafe } from '@ember/template';
import { isEmpty } from '@ember/utils';
import Component from '@glimmer/component';
import type IntlService from 'ember-intl/services/intl';

import type AnalysisModel from 'irene/models/analysis';

export interface FileDetailsVulnerabilityAnalysisDetailsSignature {
  Args: {
    analysis: AnalysisModel;
  };
}

export default class FileDetailsVulnerabilityAnalysisDetailsComponent extends Component<FileDetailsVulnerabilityAnalysisDetailsSignature> {
  @service declare intl: IntlService;

  get analysis() {
    return this.args.analysis || null;
  }

  get owaspMobile2024Exists() {
    return !isEmpty(this.analysis.owaspmobile2024);
  }

  get pcidssExists() {
    return !isEmpty(this.analysis.pcidss);
  }

  get regulatoryContent() {
    return [
      {
        key: 'owasp',
        heading: this.intl.t('owasp'),
        title: this.intl.t('owaspExpansion'),
        contents: this.analysis.owasp,
        hasContent:
          !isEmpty(this.analysis.owasp) && !this.owaspMobile2024Exists,
      },
      {
        key: 'owaspmobile2024',
        heading: this.intl.t('owaspmobile2024'),
        title: this.intl.t('owaspMobile2024Expansion'),
        contents: this.analysis.owaspmobile2024,
        hasContent: this.owaspMobile2024Exists,
      },
      {
        key: 'owaspapi2023',
        heading: this.intl.t('owaspapi2023'),
        title: this.intl.t('owaspApiTop10Expansion'),
        contents: this.analysis.owaspapi2023,
        hasContent: !isEmpty(this.analysis.owaspapi2023),
      },
      {
        key: 'cwe',
        heading: this.intl.t('cwe'),
        title: this.intl.t('cweExpansion'),
        contents: this.analysis.cwe,
        hasContent: !isEmpty(this.analysis.cwe),
        component:
          'file-details/vulnerability-analysis-details/regulatory-content/cwe' as const,
      },
      {
        key: 'asvs',
        heading: this.intl.t('asvs'),
        title: this.intl.t('asvsExpansion'),
        contents: this.analysis.asvs,
        hasContent: !isEmpty(this.analysis.asvs),
      },
      {
        key: 'masvs',
        heading: this.intl.t('masvs'),
        title: this.intl.t('masvsExpansion'),
        contents: this.analysis.masvs,
        hasContent: !isEmpty(this.analysis.masvs),
      },
      {
        key: 'mstg',
        heading: this.intl.t('mstg'),
        title: this.intl.t('mstgExpansion'),
        contents: this.analysis.mstg,
        hasContent: !isEmpty(this.analysis.mstg),
      },
      {
        key: 'pcidss',
        heading: this.intl.t('pcidss'),
        title: this.intl.t('pcidssExpansion'),
        contents: this.analysis.pcidss,
        hasContent: this.analysis.showPcidss && this.pcidssExists,
        hasMoreDetails: true,
      },
      {
        key: 'pcidss4',
        heading: this.intl.t('pcidss4'),
        title: this.intl.t('pcidssExpansion'),
        contents: this.analysis.pcidss4,
        hasContent:
          this.analysis.showPcidss &&
          !isEmpty(this.analysis.pcidss4) &&
          !this.pcidssExists,
        hasMoreDetails: true,
      },
      {
        key: 'hipaa',
        heading: this.intl.t('hipaa'),
        title: this.intl.t('hipaaExpansion'),
        contents: this.analysis.hipaa,
        hasContent: this.analysis.showHipaa && !isEmpty(this.analysis.hipaa),
        component:
          'file-details/vulnerability-analysis-details/regulatory-content/hipaa' as const,
      },
      {
        key: 'gdpr',
        heading: this.intl.t('gdpr'),
        title: this.intl.t('gdprExpansion'),
        contents: this.analysis.gdpr,
        hasContent: this.analysis.showGdpr && !isEmpty(this.analysis.gdpr),
      },
      {
        key: 'nistsp80053',
        heading: this.intl.t('nistsp80053'),
        title: this.intl.t('nistsp80053'),
        contents: this.analysis.nistsp80053,
        hasContent:
          this.analysis.showNist && !isEmpty(this.analysis.nistsp80053),
        component:
          'file-details/vulnerability-analysis-details/regulatory-content/nist' as const,
      },
      {
        key: 'nistsp800171',
        heading: this.intl.t('nistsp800171'),
        title: this.intl.t('nistsp800171'),
        contents: this.analysis.nistsp800171,
        hasContent:
          this.analysis.showNist && !isEmpty(this.analysis.nistsp800171),
        component:
          'file-details/vulnerability-analysis-details/regulatory-content/nist' as const,
      },
      {
        key: 'sama',
        heading: this.intl.t('sama'),
        title: this.intl.t('samaExpansion'),
        contents: this.analysis.sama,
        hasContent: this.analysis.showSama && !isEmpty(this.analysis.sama),
        hasMoreDetails: true,
      },
    ];
  }

  get hasRegulatoryContent() {
    return this.regulatoryContent.some((it) => it.hasContent);
  }

  get vulnerability() {
    return this.analysis.vulnerability || null;
  }

  get vulnerabilityTypes() {
    return this.analysis.vulnerabilityTypes;
  }

  get hasFindings() {
    return this.analysis.findings.length > 0;
  }

  get showSystemPassedFindings() {
    return this.analysis.isRiskPassedBySystem && this.hasFindings;
  }

  get vulnerabilityDescription() {
    if (this.analysis.isScanning) {
      return htmlSafe(this.vulnerability.get?.('question') || '');
    }

    if (
      this.analysis.isRisky ||
      this.analysis.isOverriddenAsPassed ||
      this.showSystemPassedFindings
    ) {
      return this.vulnerability.get?.('descriptionUnescapedd');
    }

    return htmlSafe(this.vulnerability.get?.('successMessage') || '');
  }

  get businessImplication() {
    return htmlSafe(this.vulnerability.get?.('businessImplication') || '');
  }

  get compliantSolution() {
    return htmlSafe(this.vulnerability.get?.('compliant') || '');
  }

  get nonCompliantCodeExample() {
    return htmlSafe(this.vulnerability.get?.('nonCompliant') || '');
  }
}

declare module '@glint/environment-ember-loose/registry' {
  export default interface Registry {
    'FileDetails::VulnerabilityAnalysisDetails': typeof FileDetailsVulnerabilityAnalysisDetailsComponent;
  }
}
