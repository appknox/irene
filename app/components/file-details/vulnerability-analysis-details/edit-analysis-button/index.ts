import { action } from '@ember/object';
import { inject as service } from '@ember/service';
import Component from '@glimmer/component';
import { tracked } from '@glimmer/tracking';
import IntlService from 'ember-intl/services/intl';
import { task } from 'ember-concurrency';

import ENV from 'irene/config/environment';
import ENUMS from 'irene/enums';
import MeService from 'irene/services/me';
import AnalysisModel from 'irene/models/analysis';
import type IreneAjaxService from 'irene/services/ajax';

export interface FileDetailsVulnerabilityAnalysisDetailsEditAnalysisButtonSignature {
  Args: {
    analysis: AnalysisModel;
  };
}

export default class FileDetailsVulnerabilityAnalysisDetailsEditAnalysisButtonComponent extends Component<FileDetailsVulnerabilityAnalysisDetailsEditAnalysisButtonSignature> {
  @service declare me: MeService;
  @service declare intl: IntlService;
  @service declare ajax: IreneAjaxService;

  @tracked showEditAnalysisDrawer = false;
  @tracked showResetAnalysisConfirmBox = false;

  @action
  openEditAnalysisDrawer() {
    // Don't allow editing if vulnerability is deprecated/inactive
    if (!this.isVulnerabilityActive) {
      return;
    }

    this.showEditAnalysisDrawer = true;
  }

  @action
  closeEditAnalysisDrawer() {
    this.showEditAnalysisDrawer = false;
  }

  get analysis() {
    return this.args.analysis;
  }

  get vulnerability() {
    return this.analysis.vulnerability;
  }

  get isVulnerabilityActive() {
    return this.vulnerability?.get('isActive') ?? true;
  }

  get analysisProject() {
    return this.args.analysis.file.get('project');
  }

  get isLatestFile() {
    return (
      this.analysisProject?.get('lastFileId')?.get('id') ===
      this.args.analysis.file.get('id')
    );
  }

  get overrideCriteriaOptions() {
    return [
      {
        label: this.intl.t('currentFileOnly'),
        value: ENUMS.ANALYSIS_OVERRIDE_CRITERIA.CURRENT_FILE,
      },
      this.isLatestFile && {
        label: this.intl.t('allFutureAnalyses'),
        value: ENUMS.ANALYSIS_OVERRIDE_CRITERIA.ALL_FUTURE_UPLOAD,
      },
    ].filter(Boolean) as Array<{ label: string; value: string }>;
  }

  get analysisDataModel() {
    const analysis = this.args.analysis;

    return {
      model: analysis,
      vulnerabilityName: analysis.vulnerability.get('name') || '',
      computedRisk: analysis.computedRisk,
      isOverridden: analysis.isNonPassedRiskOverridden,
      risk: analysis.risk,
      overriddenRisk: analysis.overriddenRisk,
      status: analysis.status,
      overriddenRiskComment: analysis.overriddenRiskComment,
      overriddenBy: analysis.overriddenBy,
      overrideCriteria: analysis.overrideCriteria,
      overrideCriteriaOptions: this.overrideCriteriaOptions,
      overriddenOn: analysis.overriddenDate,

      ignoreVulnerabilityHelperText: this.intl.t(
        'fileAnalysisDetails.ignoreVulnerabilityHelperText'
      ),

      overrideSuccessMessage: this.intl.t(
        'fileAnalysisDetails.overrideSuccessMessage'
      ),

      showOverrideSuccessOriginalToOverriddenRisk: true,

      resetConfirmComponent:
        'file-details/vulnerability-analysis-details/edit-analysis-button/reset-confirm',

      resetOverrideHandler: this.handleResetOverriddenAnalysis,
      editSaveOverrideHandler: this.handleSaveEditAnalysis,
    };
  }

  @action
  async handleSaveEditAnalysis(risk: number, comment: string, all: boolean) {
    await this.saveEditAnalysisTask.perform(risk, comment, all);
  }

  @action
  async handleResetOverriddenAnalysis(all: boolean) {
    await this.resetOverriddenAnalysisTask.perform(all);
  }

  editResetAnalysisURL(type: string) {
    const fileId = this.analysis.file.get?.('id');
    const vulnerabilityId = this.vulnerability.get?.('id');

    const url = [
      ENV.endpoints['files'],
      fileId,
      ENV.endpoints['vulnerabilityPreferences'],
      vulnerabilityId,
      type,
    ].join('/');

    return url;
  }

  saveEditAnalysisTask = task(
    async (risk: number, comment: string, all: boolean) => {
      const url = this.editResetAnalysisURL('risk');

      const data = { risk, comment, all };

      await this.ajax.put(url, {
        data,
      });

      // reload
      await this.analysis.reload();
    }
  );

  resetOverriddenAnalysisTask = task(async (all: boolean) => {
    const url = this.editResetAnalysisURL('risk');

    await this.ajax.delete(url, {
      data: { all },
    });

    // reload
    await this.analysis.reload();
  });
}

declare module '@glint/environment-ember-loose/registry' {
  export default interface Registry {
    'FileDetails::VulnerabilityAnalysisDetails::EditAnalysisButton': typeof FileDetailsVulnerabilityAnalysisDetailsEditAnalysisButtonComponent;
  }
}
