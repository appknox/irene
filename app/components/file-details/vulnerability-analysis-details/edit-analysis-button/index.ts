import { action } from '@ember/object';
import { inject as service } from '@ember/service';
import Component from '@glimmer/component';
import { tracked } from '@glimmer/tracking';
import { task } from 'ember-concurrency';
import IntlService from 'ember-intl/services/intl';

import ENV from 'irene/config/environment';
import AnalysisModel from 'irene/models/analysis';
import MeService from 'irene/services/me';

export interface FileDetailsVulnerabilityAnalysisDetailsEditAnalysisButtonSignature {
  Args: {
    analysis: AnalysisModel;
  };
}

export default class FileDetailsVulnerabilityAnalysisDetailsEditAnalysisButtonComponent extends Component<FileDetailsVulnerabilityAnalysisDetailsEditAnalysisButtonSignature> {
  @service declare me: MeService;
  @service declare intl: IntlService;
  @service declare ajax: any;
  @service('notifications') declare notify: NotificationService;

  @tracked showEditAnalysisModal = false;
  @tracked showResetAnalysisConfirmBox = false;
  @tracked isEditingOverriddenRisk = false;
  @tracked isResettingMarkedAnalysis = false;

  get analysis() {
    return this.args.analysis || null;
  }

  get vulnerability() {
    return this.analysis.vulnerability || null;
  }

  @action
  openEditAnalysisModal() {
    this.showEditAnalysisModal = true;
  }

  @action
  closeEditAnalysisModal() {
    this.showEditAnalysisModal = false;
  }

  @action removeMarkedAnalysis() {
    this.analysis.overriddenRisk = null;
    this.analysis.overriddenRiskComment = null;
  }

  @action openResetMarkedAnalysisConfirmBox() {
    this.showEditAnalysisModal = false;
    this.showResetAnalysisConfirmBox = true;
  }

  @action editMarkedAnalysis() {
    this.isEditingOverriddenRisk = true;
  }

  @action cancelEditMarkingAnalysis() {
    this.isEditingOverriddenRisk = false;
  }

  @action confirmCallback() {
    this.resetMarkedAnalysis.perform();
  }

  _editAnalysisURL(type: string) {
    const fileId = this.analysis.file.get?.('id');
    const vulnerabilityId = this.vulnerability.get?.('id');

    const url = [
      ENV.endpoints['files'],
      fileId,
      ENV.endpoints['vulnerabilityPreferences'],
      vulnerabilityId,
      type,
    ].join('/');

    return url;
  }

  resetMarkedAnalysis = task(async () => {
    try {
      const url = this._editAnalysisURL('risk');

      const data = {
        all: true,
      };

      this.isResettingMarkedAnalysis = true;

      await this.ajax.delete(url, {
        data,
      });

      if (!this.isDestroyed) {
        this.notify.success(this.intl.t('successfullyReset'));
        this.isResettingMarkedAnalysis = false;
        this.showResetAnalysisConfirmBox = false;
        this.analysis.computedRisk = this.analysis.risk;
        this.analysis.overriddenRisk = null;
        this.analysis.overriddenRiskComment = null;
      }
    } catch (error) {
      this.notify.error((error as AdapterError).payload.message);
      this.isResettingMarkedAnalysis = false;
    }
  });
}

declare module '@glint/environment-ember-loose/registry' {
  export default interface Registry {
    'FileDetails::VulnerabilityAnalysisDetails::EditAnalysisButton': typeof FileDetailsVulnerabilityAnalysisDetailsEditAnalysisButtonComponent;
  }
}
