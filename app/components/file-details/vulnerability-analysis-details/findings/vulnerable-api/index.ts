import Component from '@glimmer/component';
import { service } from '@ember/service';
import type IntlService from 'ember-intl/services/intl';

import type AnalysisModel from 'irene/models/analysis';
import type { VulnerableApiFinding } from 'irene/utils/parse-vulnerable-api-finding';

export interface FileDetailsVulnerabilityAnalysisDetailsFindingsVulnerableApiSignature {
  Args: {
    analysis: AnalysisModel;
    currentVulnerability?: VulnerableApiFinding;
  };
  Blocks: {
    default: [];
  };
}

export default class FileDetailsVulnerabilityAnalysisDetailsFindingsVulnerableApiComponent extends Component<FileDetailsVulnerabilityAnalysisDetailsFindingsVulnerableApiSignature> {
  @service declare intl: IntlService;

  get currentVulnerabilityDetails() {
    return [
      {
        label: this.intl.t('url'),
        value: this.args.currentVulnerability?.request?.url,
      },
      {
        label: this.intl.t('method'),
        value: this.args.currentVulnerability?.request?.method,
      },
      {
        label: this.intl.t('severity'),
        value: this.args.currentVulnerability?.severity,
      },
      {
        label: this.intl.t('confidence'),
        value: this.args.currentVulnerability?.confidence,
      },
      {
        label: this.intl.t('issueDetails'),
        value: this.args.currentVulnerability?.description,
      },
    ];
  }

  get isRequestHeadersEmpty() {
    const headers = this.args.currentVulnerability?.request?.headers;

    return headers && Object.keys(headers).length === 0;
  }

  get isResponseHeadersEmpty() {
    const headers = this.args.currentVulnerability?.response?.headers;

    return headers && Object.keys(headers).length === 0;
  }

  get isRequestParamsEmpty() {
    const params = this.args.currentVulnerability?.request?.params;

    return params && params?.key === '' && params?.token === '';
  }

  get isRequestBodyEmpty() {
    const body = this.args.currentVulnerability?.request?.body;

    return body === "''" || body === '';
  }

  get requestParamsKey() {
    const key = this.args.currentVulnerability?.request.params.key;

    return this.intl.t('key') + ': ' + key;
  }

  get requestParamsToken() {
    const token = this.args.currentVulnerability?.request.params.token;

    return this.intl.t('personalTokenKey') + ': ' + token;
  }

  get responseStatusCode() {
    const statusCode = this.args.currentVulnerability?.response?.status_code;

    return this.intl.t('statusCode') + ': ' + statusCode;
  }

  get responseMessage() {
    const message = this.args.currentVulnerability?.response?.reason;

    return this.intl.t('message') + ': ' + message;
  }
}

declare module '@glint/environment-ember-loose/registry' {
  export default interface Registry {
    'FileDetails::VulnerabilityAnalysisDetails::Findings::VulnerableApi': typeof FileDetailsVulnerabilityAnalysisDetailsFindingsVulnerableApiComponent;
  }
}
