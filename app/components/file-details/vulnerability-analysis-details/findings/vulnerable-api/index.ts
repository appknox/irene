import Component from '@glimmer/component';
import { service } from '@ember/service';
import { action } from '@ember/object';
import type IntlService from 'ember-intl/services/intl';

import type AnalysisModel from 'irene/models/analysis';
import type { VulnerableApiFinding } from 'irene/utils/parse-vulnerable-api-finding';

export interface FileDetailsVulnerabilityAnalysisDetailsFindingsVulnerableApiSignature {
  Element: HTMLDivElement;
  Args: {
    analysis: AnalysisModel;
    currentVulnerability?: VulnerableApiFinding;
  };
}

interface FormattedResult {
  value: string;
  isJSON?: boolean;
}

interface VulnerabilityDetails {
  title: string;
  value: string;
  isEmpty: boolean;
  copyIcon: boolean;
  isKeyValuePair?: boolean;
  whiteSpace?: 'pre-wrap' | 'pre-line';
}

export default class FileDetailsVulnerabilityAnalysisDetailsFindingsVulnerableApiComponent extends Component<FileDetailsVulnerabilityAnalysisDetailsFindingsVulnerableApiSignature> {
  @service declare intl: IntlService;

  get vulnerabilityResponse() {
    return this.args.currentVulnerability?.response;
  }

  get vulnerabilityRequest() {
    return this.args.currentVulnerability?.request;
  }

  get currentVulnerabilityDetails() {
    return [
      {
        label: this.intl.t('url'),
        value: this.url,
      },
      {
        label: this.intl.t('method'),
        value: this.vulnerabilityRequest?.method,
      },
      {
        label: this.intl.t('severity'),
        value: this.args.currentVulnerability?.severity,
      },
      {
        label: this.intl.t('confidence'),
        value: this.args.currentVulnerability?.confidence,
      },
      {
        label: this.intl.t('issueDetails'),
        value: this.args.currentVulnerability?.description,
      },
    ];
  }

  get isRequestHeadersEmpty() {
    const headers = this.vulnerabilityRequest?.headers;

    return headers && Object.keys(headers).length === 0;
  }

  get isResponseHeadersEmpty() {
    const headers = this.args.currentVulnerability?.response?.headers;

    return headers && Object.keys(headers).length === 0;
  }

  get isRequestParamsEmpty() {
    const params = this.vulnerabilityRequest?.params;

    return params && Object.keys(params).length === 0;
  }

  get isRequestBodyEmpty() {
    const body = this.vulnerabilityRequest?.body;

    return body === "''" || body === '';
  }

  get isResponseBodyEmpty() {
    const body = this.vulnerabilityResponse?.text;

    return body === "''" || body === '';
  }

  get isRequestCookiesEmpty() {
    const cookies = this.vulnerabilityRequest?.cookies;

    return cookies && Object.keys(cookies).length === 0;
  }

  get isResponseCookiesEmpty() {
    const cookies = this.vulnerabilityResponse?.cookies;

    return cookies && Object.keys(cookies).length === 0;
  }

  get responseStatusCode() {
    const statusCode = this.vulnerabilityResponse?.status_code;

    return this.intl.t('statusCode') + ': ' + statusCode;
  }

  get responseMessage() {
    const message = this.vulnerabilityResponse?.reason;

    return this.intl.t('message') + ': ' + message;
  }

  get url() {
    if (this.vulnerabilityResponse?.url) {
      return this.vulnerabilityResponse?.url;
    } else if (this.vulnerabilityRequest?.url) {
      return this.vulnerabilityRequest?.url;
    } else {
      return this.args.currentVulnerability?.url;
    }
  }

  @action getFormattedText(inputString: string | undefined): FormattedResult {
    if (!inputString) {
      return {
        value: '',
      };
    }

    const sanitizedString = inputString
      .trim()
      .replace(/(^['"])|(['"]$)/g, '')
      .replace(/\\n/g, '\n');

    // Try to parse as JSON first
    try {
      const parsed = JSON.parse(sanitizedString);

      return {
        value: JSON.stringify(parsed, null, 2),
        isJSON: true,
      };
    } catch {
      // If JSON parsing fails, return the sanitized string
      return {
        value: sanitizedString,
        isJSON: false,
      };
    }
  }

  get vulnerabilityDetails() {
    const request = this.args.currentVulnerability?.request;
    const response = this.args.currentVulnerability?.response;

    const formattedRequestBody = this.getFormattedText(request?.body);
    const formattedResponseBody = this.getFormattedText(response?.text);

    return [
      {
        title: this.intl.t('requestBody'),
        value: formattedRequestBody.value,
        isEmpty: this.isRequestBodyEmpty,
        copyIcon: true,
        whiteSpace: formattedRequestBody.isJSON ? 'pre-wrap' : 'pre-line',
      },
      {
        title: this.intl.t('requestHeaders'),
        value: request?.headers,
        isEmpty: this.isRequestHeadersEmpty,
        copyIcon: true,
        isKeyValuePair: true,
      },
      {
        title: this.intl.t('requestParameters'),
        value: request?.params,
        isEmpty: this.isRequestParamsEmpty,
        copyIcon: true,
        isKeyValuePair: true,
      },
      {
        title: this.intl.t('requestCookies'),
        value: request?.cookies,
        isEmpty: this.isRequestCookiesEmpty,
        copyIcon: true,
        isKeyValuePair: true,
      },
      {
        title: this.intl.t('response'),
        value: `${this.responseStatusCode}\n${this.responseMessage}`,
        isEmpty: !response?.status_code,
        copyIcon: false,
      },
      {
        title: this.intl.t('responseHeaders'),
        value: response?.headers,
        isEmpty: this.isResponseHeadersEmpty,
        copyIcon: true,
        isKeyValuePair: true,
      },
      {
        title: this.intl.t('responseCookies'),
        value: response?.cookies,
        isEmpty: this.isResponseCookiesEmpty,
        copyIcon: true,
        isKeyValuePair: true,
      },
      {
        title: this.intl.t('responseBody'),
        value: formattedResponseBody.value,
        isEmpty: this.isResponseBodyEmpty,
        whiteSpace: formattedResponseBody.isJSON ? 'pre-wrap' : 'pre-line',
        copyIcon: true,
      },
    ] as VulnerabilityDetails[];
  }
}

declare module '@glint/environment-ember-loose/registry' {
  export default interface Registry {
    'FileDetails::VulnerabilityAnalysisDetails::Findings::VulnerableApi': typeof FileDetailsVulnerabilityAnalysisDetailsFindingsVulnerableApiComponent;
  }
}
