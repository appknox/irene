import { action } from '@ember/object';
import { service } from '@ember/service';
import Component from '@glimmer/component';
import { tracked } from '@glimmer/tracking';
import { task } from 'ember-concurrency';
import type IntlService from 'ember-intl/services/intl';

import type AnalysisModel from 'irene/models/analysis';
import type { Finding } from 'irene/models/analysis';

import {
  isVulnerableApiFinding,
  parseVulnerableApiFinding,
  type VulnerableApiFinding,
} from 'irene/utils/parse-vulnerable-api-finding';

export interface FileDetailsVulnerabilityAnalysisDetailsFindingsSignature {
  Args: {
    analysis: AnalysisModel;
  };
}

export default class FileDetailsVulnerabilityAnalysisDetailsFindingsComponent extends Component<FileDetailsVulnerabilityAnalysisDetailsFindingsSignature> {
  @tracked vulnerableApiFindings: VulnerableApiFinding[] = [];
  @tracked customVulnerableFindings: Finding[] = [];
  @tracked limit = 1;
  @tracked offset = 0;

  @service('notifications') declare notify: NotificationService;
  @service declare intl: IntlService;
  @service('browser/window') declare window: Window;

  noop() {}

  constructor(
    owner: unknown,
    args: FileDetailsVulnerabilityAnalysisDetailsFindingsSignature['Args']
  ) {
    super(owner, args);

    this.parseCustomAndApiVulnerableFindings.perform();
  }

  get analysis() {
    return this.args.analysis;
  }

  get hasVulnerableApiFinding() {
    return this.vulnerableApiFindings.length !== 0;
  }

  get hasCustomVulnerableFinding() {
    return this.customVulnerableFindings.length > 0;
  }

  get totalVulnerableApiFindings() {
    return this.vulnerableApiFindings.length;
  }

  get currentVulnerableApiFindings() {
    return this.vulnerableApiFindings.slice(
      this.offset,
      this.offset + this.limit
    );
  }

  get apiFindingsRawPayload() {
    return this.analysis.findings
      .map((finding) => finding.description)
      .filter(Boolean)
      .join('\n');
  }

  @action
  handlePrevNextClick({ limit, offset }: { limit: number; offset: number }) {
    this.limit = limit;
    this.offset = offset;
  }

  parseCustomAndApiVulnerableFindings = task(async () => {
    const vulnerableApiFindings: VulnerableApiFinding[] = [];
    const customVulnerableFindings: Finding[] = [];

    this.analysis.findings.forEach((finding) => {
      const content = finding.description;

      if (!isVulnerableApiFinding(content)) {
        customVulnerableFindings.push(finding as Finding);

        return;
      }

      vulnerableApiFindings.push(...parseVulnerableApiFinding(content));
    });

    this.customVulnerableFindings = customVulnerableFindings;
    this.vulnerableApiFindings = vulnerableApiFindings;
  });

  downloadApiFindingsPayload = task(async () => {
    // Create a Blob with the raw text
    const blob = new Blob([this.apiFindingsRawPayload], { type: 'text/plain' });

    // Create a download link
    const link = this.window.document.createElement('a');
    link.href = URL.createObjectURL(blob);

    const analysisId = this.analysis.id;

    // Generate a filename
    const timestamp = new Date().getTime();
    link.download = `analysis_api_findings_${analysisId}_${timestamp}.txt`;

    // Append to body, click, and remove
    this.window.document.body.appendChild(link);
    link.click();
    this.window.document.body.removeChild(link);

    // Clean up the URL object
    URL.revokeObjectURL(link.href);
  });
}

declare module '@glint/environment-ember-loose/registry' {
  export default interface Registry {
    'FileDetails::VulnerabilityAnalysisDetails::Findings': typeof FileDetailsVulnerabilityAnalysisDetailsFindingsComponent;
  }
}
