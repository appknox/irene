import { action } from '@ember/object';
import { service } from '@ember/service';
import Component from '@glimmer/component';
import { tracked } from '@glimmer/tracking';
import { task } from 'ember-concurrency';
import type IntlService from 'ember-intl/services/intl';

import type AnalysisModel from 'irene/models/analysis';
import type { Finding } from 'irene/models/analysis';

import {
  isVulnerableApiFinding,
  parseVulnerableApiFinding,
  type VulnerableApiFinding,
} from 'irene/utils/parse-vulnerable-api-finding';

import styles from './index.scss';

export interface FileDetailsVulnerabilityAnalysisDetailsFindingsSignature {
  Args: {
    analysis: AnalysisModel;
  };
}

export default class FileDetailsVulnerabilityAnalysisDetailsFindingsComponent extends Component<FileDetailsVulnerabilityAnalysisDetailsFindingsSignature> {
  @tracked vulnerableApiFindings: VulnerableApiFinding[] = [];
  @tracked customVulnerableFindings: Finding[] = [];
  @tracked limit = 1;
  @tracked offset = 0;

  @service('notifications') declare notify: NotificationService;
  @service declare intl: IntlService;

  noop() {}

  constructor(
    owner: unknown,
    args: FileDetailsVulnerabilityAnalysisDetailsFindingsSignature['Args']
  ) {
    super(owner, args);

    this.parseCustomAndApiVulnerableFindings.perform();
  }

  get classes() {
    return {
      selectClass: styles['ak-pagination-select'],
      prevButtonIconClass: styles['ak-pagination-button-prev-icon'],
      nextButtonIconClass: styles['ak-pagination-button-next-icon'],
    };
  }

  get analysis() {
    return this.args.analysis;
  }

  get hasVulnerableApiFinding() {
    return this.vulnerableApiFindings.length !== 0;
  }

  get hasCustomVulnerableFinding() {
    return this.customVulnerableFindings.length > 0;
  }

  get totalVulnerableApiFindings() {
    return this.vulnerableApiFindings.length;
  }

  get currentVulnerableApiFindings() {
    return this.vulnerableApiFindings.slice(
      this.offset,
      this.offset + this.limit
    );
  }

  @action
  handlePrevNextClick({ limit, offset }: { limit: number; offset: number }) {
    this.limit = limit;
    this.offset = offset;
  }

  parseCustomAndApiVulnerableFindings = task(async () => {
    const vulnerableApiFindings: VulnerableApiFinding[] = [];
    const customVulnerableFindings: Finding[] = [];

    this.analysis.findings.forEach((finding) => {
      const content = finding.description;

      if (!isVulnerableApiFinding(content)) {
        customVulnerableFindings.push(finding as Finding);

        return;
      }

      vulnerableApiFindings.pushObjects(parseVulnerableApiFinding(content));
    });

    this.customVulnerableFindings = customVulnerableFindings;
    this.vulnerableApiFindings = vulnerableApiFindings;
  });
}

declare module '@glint/environment-ember-loose/registry' {
  export default interface Registry {
    'FileDetails::VulnerabilityAnalysisDetails::Findings': typeof FileDetailsVulnerabilityAnalysisDetailsFindingsComponent;
  }
}
