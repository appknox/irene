import Component from '@glimmer/component';
import { tracked } from '@glimmer/tracking';
import { action } from '@ember/object';
import { task } from 'ember-concurrency';
import { service } from '@ember/service';
import type { EmberTableSort } from 'ember-table';

import ENUMS from 'irene/enums';
import type FileModel from 'irene/models/file';
import type AnalysisModel from 'irene/models/analysis';
import Store from '@ember-data/store';

export interface FileDetailsVulnerabilityAnalysisSignature {
  Args: {
    file: FileModel;
  };
}

const DEFAULT_ANALYSES_SORTS = [
  { isAscending: false, valuePath: 'computedRisk' },
];

export default class FileDetailsVulnerabilityAnalysisComponent extends Component<FileDetailsVulnerabilityAnalysisSignature> {
  @service declare store: Store;
  @tracked filterVulnerabilityType: string | number =
    ENUMS.VULNERABILITY_TYPE.UNKNOWN;

  @tracked sorts = DEFAULT_ANALYSES_SORTS;
  @tracked fileAnalyses: AnalysisModel[] = [];

  constructor(
    owner: unknown,
    args: FileDetailsVulnerabilityAnalysisSignature['Args']
  ) {
    super(owner, args);

    this.fetchFileAnalyses.perform();
  }

  get file() {
    return this.args.file;
  }

  @action
  setVulnerabilityType(type: string | number) {
    this.filterVulnerabilityType = type;

    this.resetSorts();
  }

  @action
  resetSorts() {
    this.sorts = DEFAULT_ANALYSES_SORTS;
  }

  @action
  updateAnalysesSorts(sorts: EmberTableSort[]) {
    this.sorts = sorts;
  }

  fetchFileAnalyses = task(async () => {
    const analyses = await this.store.query('analysis', {
      fileId: this.args.file.id,
    });

    this.fileAnalyses = analyses.slice();
  });
}

declare module '@glint/environment-ember-loose/registry' {
  export default interface Registry {
    'FileDetails::VulnerabilityAnalysis': typeof FileDetailsVulnerabilityAnalysisComponent;
  }
}
