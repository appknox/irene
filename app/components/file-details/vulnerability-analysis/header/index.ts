import Component from '@glimmer/component';
import { tracked } from '@glimmer/tracking';
import { task } from 'ember-concurrency';
import { inject as service } from '@ember/service';

import ENUMS from 'irene/enums';
import styles from './index.scss';
import type FileModel from 'irene/models/file';
import type IreneAjaxService from 'irene/services/ajax';

export interface FileDetailsVulnerabilityAnalysisHeaderSignature {
  Args: {
    file: FileModel;
    filterVulnerabilityType: string | number;
    setVulnerabilityType: (vulnerabilityType: number) => void;
  };
}

export default class FileDetailsVulnerabilityAnalysisHeaderComponent extends Component<FileDetailsVulnerabilityAnalysisHeaderSignature> {
  @service declare ajax: IreneAjaxService;

  @tracked isSecurityEnabled = false;

  constructor(
    owner: unknown,
    args: FileDetailsVulnerabilityAnalysisHeaderSignature['Args']
  ) {
    super(owner, args);

    this.securityEnabled.perform();
  }

  get classes() {
    return {
      vulnerabilityTypeFilterSelectTrigger:
        styles['vulnerability-type-filter-select-trigger'],
    };
  }

  get isManualScanDisabled() {
    return !this.args.file.project?.get('isManualScanAvailable');
  }

  get vulnerabilityTypes() {
    const manualType = ENUMS.VULNERABILITY_TYPE.MANUAL;
    const types = ENUMS.VULNERABILITY_TYPE.CHOICES.slice(0, -1);

    const options = [
      ENUMS.VULNERABILITY_TYPE.UNKNOWN,
      ...types.map(({ value }) => value),
    ] as number[];

    return this.isManualScanDisabled
      ? options.filter((type) => type !== manualType)
      : options;
  }

  securityEnabled = task(async () => {
    try {
      await this.ajax.request('projects', { namespace: 'api/hudson-api' });

      if (!this.isDestroyed) {
        this.isSecurityEnabled = true;
      }
    } catch (error) {
      if (!this.isDestroyed) {
        this.isSecurityEnabled = false;
      }
    }
  });
}

declare module '@glint/environment-ember-loose/registry' {
  export default interface Registry {
    'FileDetails::VulnerabilityAnalysis::Header': typeof FileDetailsVulnerabilityAnalysisHeaderComponent;
  }
}
