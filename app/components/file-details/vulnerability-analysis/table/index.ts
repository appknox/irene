/* eslint-disable ember/no-computed-properties-in-native-classes */
import { action, computed } from '@ember/object';
import { inject as service } from '@ember/service';
import Component from '@glimmer/component';
import type RouterService from '@ember/routing/router-service';
import type IntlService from 'ember-intl/services/intl';
import type { EmberTableSort } from 'ember-table';

import ENUMS from 'irene/enums';
import type FileModel from 'irene/models/file';
import type AnalysisModel from 'irene/models/analysis';

interface columnType {
  name: string;
  component?: string;
  valuePath?: string;
  width?: number;
  textAlign?: string;
  isSortable?: boolean;
}

export interface FileDetailsVulnerabilityAnalysisTableSignature {
  Args: {
    file: FileModel;
    sorts: EmberTableSort[];
    filterVulnerabilityType: string | number;
    updateAnalysesSorts: (sorts: EmberTableSort[]) => void;
    columns?: columnType[];
  };
}

export default class FileDetailsVulnerabilityAnalysisTableComponent extends Component<FileDetailsVulnerabilityAnalysisTableSignature> {
  @service declare intl: IntlService;
  @service declare router: RouterService;

  get columns() {
    const defaultColumns: columnType[] = [
      {
        name: this.intl.t('impact'),
        valuePath: 'computedRisk',
        component: 'file-details/vulnerability-analysis/impact',
        width: 70,
        textAlign: 'center',
      },
      {
        name: this.intl.t('title'),
        width: 200,
        valuePath: 'vulnerability.name',
        isSortable: false,
      },
      {
        name: this.intl.t('typeOfScan'),
        component: 'file-details/type-of-scan',
        textAlign: 'right',
      },
    ];

    return this.args.columns ?? defaultColumns;
  }

  get file() {
    return this.args.file;
  }

  get analyses() {
    return this.file.analyses;
  }

  // computed is required to track 'computedRisk' changes
  @computed('analyses.@each.computedRisk', 'args.filterVulnerabilityType')
  get finalUnsortedAnalyses() {
    return this.filterAnalysesByVulnerabilityType(
      this.args.filterVulnerabilityType
    );
  }

  get isFinalAnalysesEmpty() {
    return this.finalUnsortedAnalyses.length === 0;
  }

  @action
  updateAnalysesSorts(sorts: EmberTableSort[]) {
    if (this.args.sorts[0] && !sorts.length) {
      this.args.updateAnalysesSorts([
        {
          valuePath: this.args.sorts[0].valuePath,
          isAscending: !this.args.sorts[0].isAscending,
        },
      ]);

      return;
    }

    this.args.updateAnalysesSorts(sorts);
  }

  @action
  handleAnalysesSortComparison(
    a: AnalysisModel,
    b: AnalysisModel,
    sorts: EmberTableSort[]
  ) {
    const isAscending = sorts[0]?.isAscending ?? false; // default is desc

    if (a.isOverriddenAsPassed && b.isRiskPassedBySystem) {
      return isAscending ? 1 : -1;
    }

    if (b.isOverriddenAsPassed && a.isRiskPassedBySystem) {
      return isAscending ? -1 : 1;
    }

    return isAscending
      ? a.computedRisk - b.computedRisk
      : b.computedRisk - a.computedRisk;
  }

  @action
  handleAnalysisClick({
    rowValue,
    event,
  }: {
    rowValue: AnalysisModel;
    event: MouseEvent;
  }) {
    // temp fix
    if (event.ctrlKey || event.metaKey) {
      const url = this.router.urlFor(
        'authenticated.dashboard.file.analysis',
        this.file.id,
        rowValue.id
      );

      window.open(url, '_blank');
    } else {
      this.router.transitionTo(
        'authenticated.dashboard.file.analysis',
        this.file.id,
        rowValue.id
      );
    }
  }

  filterAnalysesByVulnerabilityType(type: string | number) {
    const vulnerabilityType = parseInt(String(type));

    if (vulnerabilityType === ENUMS.VULNERABILITY_TYPE.UNKNOWN) {
      return this.analyses.toArray();
    }

    const filteredAnalysis = this.analyses?.filter((a) =>
      a.hasType(vulnerabilityType)
    );

    return filteredAnalysis;
  }
}

declare module '@glint/environment-ember-loose/registry' {
  export default interface Registry {
    'FileDetails::VulnerabilityAnalysis::Table': typeof FileDetailsVulnerabilityAnalysisTableComponent;
  }
}
