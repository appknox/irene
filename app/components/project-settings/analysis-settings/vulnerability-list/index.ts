// eslint-disable-next-line ember/use-ember-data-rfc-395-imports
import DS from 'ember-data';

import { action } from '@ember/object';
import { inject as service } from '@ember/service';
import Component from '@glimmer/component';
import { tracked } from '@glimmer/tracking';
import { task } from 'ember-concurrency';
import Store from '@ember-data/store';
import IntlService from 'ember-intl/services/intl';

import ENV from 'irene/config/environment';
import ENUMS from 'irene/enums';
import ProjectModel from 'irene/models/project';
import VulnerabilityPreferenceModel from 'irene/models/vulnerability-preference';
import MeService from 'irene/services/me';
import parseError from 'irene/utils/parse-error';

type ProjectSettingsAnalysisSettingsVulnerabilityListQueryResponse =
  DS.AdapterPopulatedRecordArray<VulnerabilityPreferenceModel> & {
    meta: { count: number };
  };

interface ProjectSettingsAnalysisSettingsVulnerabilityListSignature {
  Args: {
    project: ProjectModel | null;
  };
}

export default class ProjectSettingsAnalysisSettingsVulnerabilityListComponent extends Component<ProjectSettingsAnalysisSettingsVulnerabilityListSignature> {
  @service declare me: MeService;
  @service declare store: Store;
  @service declare intl: IntlService;
  @service declare ajax: any;
  @service('notifications') declare notify: NotificationService;

  @tracked
  vulnerabilityListResponse: ProjectSettingsAnalysisSettingsVulnerabilityListQueryResponse | null =
    null;

  @tracked
  selectedVulnerabilityPreference: VulnerabilityPreferenceModel | null = null;

  constructor(
    owner: unknown,
    args: ProjectSettingsAnalysisSettingsVulnerabilityListSignature['Args']
  ) {
    super(owner, args);

    this.loadVulnerabilityPreferences();
  }

  get columns() {
    return [
      {
        name: this.intl.t('vulnerability'),
        component:
          'project-settings/analysis-settings/vulnerability-list/name' as const,
        minWidth: 300,
      },
      {
        name: this.intl.t('editOverrideVulnerability.overriddenSeverity'),
        minWidth: 125,
        textAlign: 'center',
        component:
          'project-settings/analysis-settings/vulnerability-list/overridden-severity' as const,
      },
      {
        name: this.intl.t('action'),
        textAlign: 'center',
        component:
          'project-settings/analysis-settings/vulnerability-list/action' as const,
      },
    ];
  }

  get project() {
    return this.args.project;
  }

  get vulnerabilityPreferences() {
    return this.vulnerabilityListResponse?.toArray() || [];
  }

  get vulnerability() {
    return this.selectedVulnerabilityPreference
      ? this.store.peekRecord(
          'vulnerability',
          this.selectedVulnerabilityPreference.id
        )
      : null;
  }

  get overrideCriteriaOptions() {
    return [
      {
        label: this.intl.t('allFutureAnalyses'),
        value: ENUMS.ANALYSIS_OVERRIDE_CRITERIA.ALL_FUTURE_UPLOAD,
      },
    ];
  }

  get openOverrideEditDrawer() {
    return Boolean(this.vulnerabilityDataModel);
  }

  get vulnerabilityDataModel() {
    return this.selectedVulnerabilityPreference
      ? {
          model: this.selectedVulnerabilityPreference,
          vulnerabilityName: this.vulnerability?.name || '',
          computedRisk: this.selectedVulnerabilityPreference.risk,
          isOverridden: this.selectedVulnerabilityPreference.riskOverridden,
          overriddenRisk: this.selectedVulnerabilityPreference.risk,
          overriddenRiskComment: this.selectedVulnerabilityPreference.comment,
          overriddenBy: this.selectedVulnerabilityPreference.updatedBy,
          overrideCriteria: ENUMS.ANALYSIS_OVERRIDE_CRITERIA.ALL_FUTURE_UPLOAD,
          overrideCriteriaOptions: this.overrideCriteriaOptions,
          overriddenOn: this.selectedVulnerabilityPreference.updatedDate,

          ignoreVulnerabilityHelperText: this.intl.t(
            'projectSettings.vulnerabilityPreference.ignoreVulnerabilityHelperText'
          ),

          overrideSuccessMessage: this.intl.t(
            'projectSettings.vulnerabilityPreference.overrideSuccessMessage'
          ),

          resetConfirmComponent:
            'project-settings/analysis-settings/vulnerability-list/reset-confirm',

          resetOverrideHandler: this.resetPreference,
          editSaveOverrideHandler: this.savePreference,
        }
      : null;
  }

  @action
  handleOverrideEditDrawerClose() {
    this.selectedVulnerabilityPreference = null;
  }

  @action
  setVulnerabilityDataModel(
    vulnerabilityPreference: VulnerabilityPreferenceModel
  ) {
    this.selectedVulnerabilityPreference = vulnerabilityPreference;
  }

  @action loadVulnerabilityPreferences() {
    this.fetchVulnerabilityPreferences.perform();
  }

  @action
  async savePreference(risk: number, comment: string) {
    const data = { risk, comment };

    await this.saveVulnerabilityPreferences.perform(data);
  }

  @action
  async resetPreference() {
    const data = {
      risk: null,
      comment: null,
    };

    await this.saveVulnerabilityPreferences.perform(data);
  }

  saveVulnerabilityPreferences = task(
    async (data: { risk: number | null; comment: string | null }) => {
      const profileId = this.project?.activeProfileId;
      const vulnerabilityId = this.vulnerability?.id;

      const url = [
        ENV.endpoints['profiles'],
        profileId,
        ENV.endpoints['vulnerabilityPreferences'],
        vulnerabilityId,
      ].join('/');

      const res = await this.ajax.put(url, { data });

      // update model
      this.selectedVulnerabilityPreference?.updateValues(res);
    }
  );

  fetchVulnerabilityPreferences = task(async () => {
    try {
      this.vulnerabilityListResponse = (await this.store.query(
        'vulnerability-preference',
        {
          id: this.project?.activeProfileId,
        }
      )) as ProjectSettingsAnalysisSettingsVulnerabilityListQueryResponse;
    } catch (error) {
      this.notify.error(parseError(error, this.intl.t('pleaseTryAgain')));
    }
  });
}

declare module '@glint/environment-ember-loose/registry' {
  export default interface Registry {
    'ProjectSettings::AnalysisSettings::VulnerabilityList': typeof ProjectSettingsAnalysisSettingsVulnerabilityListComponent;
  }
}
