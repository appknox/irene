import { action } from '@ember/object';
import { inject as service } from '@ember/service';
import Component from '@glimmer/component';
import { tracked } from '@glimmer/tracking';
import { task } from 'ember-concurrency';
import IntlService from 'ember-intl/services/intl';
import Store from '@ember-data/store';

import ENUMS from 'irene/enums';
import ENV from 'irene/config/environment';
import ProjectModel from 'irene/models/project';
import VulnerabilityPreferenceModel from 'irene/models/vulnerability-preference';
import parseError from 'irene/utils/parse-error';

interface ProjectSettingsAnalysisSettingsVulnerabilityDetailsSignature {
  Args: {
    project: ProjectModel | null;
    vulnerability: VulnerabilityPreferenceModel | null;
  };
}

export default class ProjectSettingsAnalysisSettingsVulnerabilityDetailsComponent extends Component<ProjectSettingsAnalysisSettingsVulnerabilityDetailsSignature> {
  @service declare intl: IntlService;
  @service declare ajax: any;
  @service declare store: Store;
  @service('notifications') declare notify: NotificationService;

  @tracked isEditing = false;
  @tracked isExpanded = false;
  @tracked selectedRisk: number | null = null;
  @tracked vulnerabilityRisk = this.defaultVulnerabilityRisk;
  @tracked riskOverridden = this.defaultRiskOverridden;
  @tracked editedComment = '';

  get vulnerability() {
    return this.args.vulnerability;
  }

  get project() {
    return this.args.project;
  }

  get defaultVulnerabilityRisk() {
    return this.vulnerability?.risk;
  }

  get selectedRiskKey() {
    return this.risks.find((obj) => {
      if (this.selectedRisk) {
        return obj.value === this.selectedRisk;
      }

      return obj.value === this.vulnerabilityRisk;
    });
  }

  get vulnerabilityDetails() {
    return this.vulnerability
      ? this.store.peekRecord('vulnerability', this.vulnerability.id)
      : null;
  }

  get risks() {
    const risks = ENUMS.RISK.CHOICES;
    const riskFilter = [ENUMS.RISK.NONE, ENUMS.RISK.UNKNOWN];

    return risks.filter((risk) => !riskFilter.includes(risk.value as number));
  }

  get defaultRiskOverridden() {
    return this.vulnerability?.riskOverridden;
  }

  updateVulnerabilityProperties(
    data: { risk: number | null; comment: string | null },
    type: string
  ) {
    if (this.vulnerability) {
      if (type === 'mark') {
        this.riskOverridden = true;
      } else {
        this.isEditing = false;
        this.riskOverridden = false;
      }

      this.vulnerability.risk = data.risk as number;
      this.vulnerabilityRisk = data.risk as number;
      this.vulnerability.comment = data.comment as string;
    }
  }

  @action selectPreference(risk: { key: string; value: number }) {
    this.isEditing = true;
    this.selectedRisk = parseInt(String(risk.value));
    this.isExpanded = true;
  }

  @action savePreference() {
    const risk = this.selectedRisk || this.vulnerabilityRisk;
    const comment = this.editedComment;
    const tRiskAndCommentRequired = this.intl.t('riskAndCommentRequired');

    if (!risk || !comment) {
      this.notify.error(tRiskAndCommentRequired);
      return;
    }

    const type = 'mark';
    const data = { risk, comment };

    this.saveVulnerabilityPreferences.perform(data, type);
  }

  @action editPreference() {
    this.isEditing = true;
  }

  @action expandCollapse() {
    if (this.selectedRiskKey) {
      this.isExpanded = !this.isExpanded;

      if (this.isExpanded) {
        if (this.riskOverridden) {
          this.editedComment = this.vulnerability?.comment || '';
        } else {
          this.isEditing = true;
        }
      }
    }
  }

  @action cancelEdit() {
    this.isEditing = false;
    this.isExpanded = false;

    if (!this.riskOverridden) {
      this.selectedRisk = null;
    }
  }

  @action resetPreference() {
    this.editedComment = '';
    this.selectedRisk = null;

    const type = 'reset';

    const data = {
      risk: null,
      comment: null,
    };

    this.saveVulnerabilityPreferences.perform(data, type);
  }

  saveVulnerabilityPreferences = task(
    async (
      data: { risk: number | null; comment: string | null },
      type: string
    ) => {
      const profileId = this.project?.activeProfileId;
      const vulnerabilityId = this.vulnerability?.id;
      const tSavedPreferences = this.intl.t('savedPreferences');

      const url = [
        ENV.endpoints['profiles'],
        profileId,
        ENV.endpoints['vulnerabilityPreferences'],
        vulnerabilityId,
      ].join('/');

      try {
        await this.ajax.put(url, { data });
        this.notify.success(tSavedPreferences);

        this.isEditing = false;
        this.updateVulnerabilityProperties(data, type);

        this.isExpanded = false;
      } catch (error) {
        this.notify.error(parseError(error));
        this.vulnerabilityRisk = this.vulnerability?.risk;
      }
    }
  );
}

declare module '@glint/environment-ember-loose/registry' {
  export default interface Registry {
    'ProjectSettings::AnalysisSettings::VulnerabilityDetails': typeof ProjectSettingsAnalysisSettingsVulnerabilityDetailsComponent;
  }
}
