import Component from '@ember/component';
import { inject as service } from '@ember/service';
import { computed } from '@ember/object';
import ENUMS from 'irene/enums';
import ENV from 'irene/config/environment';
import { translationMacro as t } from 'ember-i18n';

export default Component.extend({
  i18n: service(),
  ajax: service(),
  notify: service('notification-messages-service'),

  tSavedPreferences: t("savedPreferences"),
  tRiskAndCommentRequired: t("riskAndCommentRequired"),

  isEditing: false,
  isSaving: false,
  isResetting: false,
  selectedRisk: null,

  risks: computed(function() {
    const risks = ENUMS.RISK.CHOICES;
    const riskFilter = [ENUMS.RISK.NONE, ENUMS.RISK.UNKNOWN];
    return risks.filter(risk => !riskFilter.includes(risk.value));
  }),

  vulnerabilityDetails: computed(function() {
    return this.get("store").find('vulnerability', this.get("vulnerability.id"));
  }),

  riskOverridden: computed("vulnerability.riskOverridden", function() {
    const riskOverridden = this.get("vulnerability.riskOverridden");
    return riskOverridden;
  }),

  setProperties(data,type) {
    if(type === "mark") {
      this.set("vulnerability.risk", data.risk);
      this.set("vulnerability.comment", data.comment);
      this.set("vulnerability.riskOverridden", true);
      this.set("riskOverridden", true);
      this.set("isSaving", false);
    }
    else {
      this.set("resettingPreference", false);
      this.set("isEditing", false);
      this.set("riskOverridden", false);
      this.set("vulnerability.risk", data.risk);
      this.set("vulnerability.comment", data.comment);
    }
  },

  saveVulnerabilityPreferences(data, type) {
    const profileId = this.get("project.activeProfileId");
    const vulnerabilityId = this.get("vulnerability.id");
    const tSavedPreferences = this.get("tSavedPreferences");
    const url = [ENV.endpoints.profiles, profileId, ENV.endpoints.vulnerabilityPreferences, vulnerabilityId].join('/');
    this.get("ajax").put(url, {data})
      .then(() => {
        if(!this.isDestroyed) {
          this.get("notify").success(tSavedPreferences);
          this.setProperties(data,type);
          this.set("isEditing", false);
        }
      }, (error) => {
        this.setProperties(data,type);
        this.get("notify").error(error.payload.message);
      });
  },

  actions: {
    selectPreference() {
      this.set("isEditing", true);
      this.set("selectedRisk", parseInt(this.$('#marked-analysis-project')[0].value));
    },

    savePreference() {
      const risk = this.get("selectedRisk") || this.get("vulnerability.risk");
      const comment = this.get("vulnerability.comment");
      if (!risk || !comment) {
        this.get("notify").error(this.get("tRiskAndCommentRequired"));
        return;
      }

      this.set("isSaving", true);
      const type = "mark";
      const data = {
        risk,
        comment
      };
      this.saveVulnerabilityPreferences(data, type);
    },

    editPreference() {
      this.set("isEditing", true);
    },

    cancelEdit() {
      this.set("isEditing", false);
    },

    resetPreference() {
      this.set("isResetting", true);
      const type = "reset";
      const data = {
        risk: null,
        comment: null
      };
      this.saveVulnerabilityPreferences(data, type);
    },

  }
});
