import { action } from '@ember/object';
import { inject as service } from '@ember/service';
import Component from '@glimmer/component';
import { tracked } from '@glimmer/tracking';
import { task } from 'ember-concurrency';
import ENV from 'irene/config/environment';
import ENUMS from 'irene/enums';

export default class VulnerabilityDetailsComponent extends Component {
  @service intl;
  @service ajax;
  @service store;
  @service('notifications') notify;

  tSavedPreferences = this.intl.t('savedPreferences');
  tRiskAndCommentRequired = this.intl.t('riskAndCommentRequired');

  @tracked isUpdatingPreference = false;
  @tracked isEditing = false;
  @tracked selectedRisk = null;
  @tracked vulnerabilityRisk = this.defaultVulnerabilityRisk;
  @tracked riskOverridden = this.defaultRiskOverridden;

  get vulnerability() {
    return this.args.vulnerability;
  }

  get project() {
    return this.args.project;
  }

  get defaultVulnerabilityRisk() {
    return this.vulnerability.risk;
  }

  get vulnerabilityDetails() {
    return this.store.peekRecord('vulnerability', this.vulnerability.id);
  }

  get risks() {
    const risks = ENUMS.RISK.CHOICES;
    const riskFilter = [ENUMS.RISK.NONE, ENUMS.RISK.UNKNOWN];
    return risks.filter((risk) => !riskFilter.includes(risk.value));
  }

  get defaultRiskOverridden() {
    const riskOverridden = this.vulnerability.riskOverridden;
    return riskOverridden;
  }

  updateVulnerabilityProperties(data, type) {
    if (type === 'mark') {
      this.vulnerability.risk = data.risk;
      this.vulnerabilityRisk = data.risk;
      this.vulnerability.comment = data.comment;
      this.vulnerability.riskOverridden = true;
      this.riskOverridden = true;
    } else {
      this.resettingPreference = false;
      this.isEditing = false;
      this.riskOverridden = false;
      this.vulnerability.risk = data.risk;
      this.vulnerabilityRisk = data.risk;
      this.vulnerability.comment = data.comment;
    }
  }

  @action selectPreference(event) {
    this.isEditing = true;
    this.selectedRisk = parseInt(event.target.value);
  }

  @action savePreference() {
    const risk = this.selectedRisk || this.vulnerabilityRisk;
    const comment = this.vulnerability.comment;
    if (!risk || !comment) {
      this.notify.error(this.tRiskAndCommentRequired);
      return;
    }

    this.isUpdatingPreference = true;

    const type = 'mark';
    const data = { risk, comment };

    this.saveVulnerabilityPreferences.perform(data, type);
  }

  @action editPreference() {
    this.isEditing = true;
  }

  @action cancelEdit() {
    this.isEditing = false;
  }

  @action resetPreference() {
    this.isUpdatingPreference = true;

    const type = 'reset';
    const data = {
      risk: null,
      comment: null,
    };

    this.saveVulnerabilityPreferences.perform(data, type);
  }

  @task(function* (data, type) {
    const profileId = this.project.activeProfileId;
    const vulnerabilityId = this.vulnerability.id;
    const tSavedPreferences = this.tSavedPreferences;

    const url = [
      ENV.endpoints.profiles,
      profileId,
      ENV.endpoints.vulnerabilityPreferences,
      vulnerabilityId,
    ].join('/');

    try {
      yield this.ajax.put(url, { data });
      this.notify.success(tSavedPreferences);
      this.isEditing = false;
      this.updateVulnerabilityProperties(data, type);
      this.isUpdatingPreference = false;
    } catch (error) {
      this.notify.error(error.payload.message);
      this.vulnerabilityRisk = this.vulnerability.risk;
      this.isUpdatingPreference = false;
    }
  })
  saveVulnerabilityPreferences;
}
