import { action } from '@ember/object';
import { inject as service } from '@ember/service';
import Component from '@glimmer/component';
import { tracked } from '@glimmer/tracking';
import { task } from 'ember-concurrency';
import IntlService from 'ember-intl/services/intl';
import ENV from 'irene/config/environment';
import ENUMS from 'irene/enums';
import Store from '@ember-data/store';
import ProjectModel from 'irene/models/project';
import VulnerabilityModel from 'irene/models/vulnerability';
import VulnerabilityPreferenceModel from 'irene/models/vulnerability-preference';

interface VulnerabilityDetailsSignature {
  Args: {
    project: ProjectModel | null;
    vulnerability: VulnerabilityPreferenceModel | null;
  };
}

export default class VulnerabilityDetailsComponent extends Component<VulnerabilityDetailsSignature> {
  @service declare intl: IntlService;
  @service declare ajax: any;
  @service declare store: Store;
  @service('notifications') declare notify: NotificationService;

  @tracked isUpdatingPreference = false;
  @tracked isEditing = false;
  @tracked isExpanded = false;
  @tracked selectedRisk: number | null = null;
  @tracked vulnerabilityRisk = this.defaultVulnerabilityRisk;
  @tracked riskOverridden = this.defaultRiskOverridden;

  constructor(owner: unknown, args: VulnerabilityDetailsSignature['Args']) {
    super(owner, args);
  }

  get vulnerability() {
    return this.args.vulnerability;
  }

  get project() {
    return this.args.project;
  }

  get defaultVulnerabilityRisk() {
    return this.vulnerability?.risk;
  }

  get selectedRiskKey() {
    const obj = {key: 'MEDIUM', value: 2};
    return this.risks.find((obj)=> obj.value === this.selectedRisk || obj.value === this.vulnerabilityRisk);
  }

  get vulnerabilityDetails() {
    return this.vulnerability
      ? this.store.peekRecord('vulnerability', this.vulnerability.id)
      : null;
  }

  get risks() {
    const risks = ENUMS.RISK.CHOICES;
    const riskFilter = [ENUMS.RISK.NONE, ENUMS.RISK.UNKNOWN];
    return risks.filter((risk) => !riskFilter.includes(risk.value as number));
  }

  get defaultRiskOverridden() {
    const riskOverridden = this.vulnerability?.riskOverridden;
    return riskOverridden;
  }

  updateVulnerabilityProperties(
    data: { risk: number | undefined; comment: string },
    type: string
  ) {
    if (this.vulnerability) {
      if (type === 'mark') {
        this.vulnerability.risk = data.risk as number;
        this.vulnerabilityRisk = data.risk;
        this.vulnerability.comment = data.comment;
        // this.vulnerability.riskOverridden = true;  //TODO ASK
        this.riskOverridden = true;
      } else {
        // this.resettingPreference = false;
        this.isEditing = false;
        this.riskOverridden = false;
        this.vulnerability.risk = data.risk as number;
        this.vulnerabilityRisk = data.risk;
        this.vulnerability.comment = data.comment;
      }
    }
  }

  @action selectPreference(event: any) {
    this.isEditing = true;
    this.selectedRisk = parseInt(event.value);
  }

  @action savePreference() {
    const risk = this.selectedRisk || this.vulnerabilityRisk;
    const comment = this.vulnerability?.comment;
    const tRiskAndCommentRequired = this.intl.t('riskAndCommentRequired');
    if (!risk || !comment) {
      this.notify.error(tRiskAndCommentRequired);
      return;
    }

    this.isUpdatingPreference = true;

    const type = 'mark';
    const data = { risk, comment };

    this.saveVulnerabilityPreferences.perform(data, type);
  }

  @action editPreference() {
    this.isEditing = true;
  }

  @action expandCollapse() {
    this.isExpanded = !this.isExpanded;
  }

  @action cancelEdit() {
    this.isEditing = false;
  }

  @action resetPreference() {
    this.isUpdatingPreference = true;

    const type = 'reset';
    const data = {
      risk: null,
      comment: null,
    };

    this.saveVulnerabilityPreferences.perform(data, type);
  }

  saveVulnerabilityPreferences = task(async (data, type) => {
    const profileId = this.project?.activeProfileId;
    const vulnerabilityId = this.vulnerability?.id;
    const tSavedPreferences = this.intl.t('savedPreferences');

    const url = [
      ENV.endpoints['profiles'],
      profileId,
      ENV.endpoints['vulnerabilityPreferences'],
      vulnerabilityId,
    ].join('/');

    try {
      await this.ajax.put(url, { data });
      this.notify.success(tSavedPreferences);
      this.isEditing = false;
      this.updateVulnerabilityProperties(data, type);
      this.isUpdatingPreference = false;
    } catch (error: any) {
      this.notify.error(error.payload.message);
      this.vulnerabilityRisk = this.vulnerability?.risk;
      this.isUpdatingPreference = false;
    }
  });
}

declare module '@glint/environment-ember-loose/registry' {
  export default interface Registry {
    VulnerabilityDetails: typeof VulnerabilityDetailsComponent;
    'vulnerability-details': typeof VulnerabilityDetailsComponent;
  }
}
