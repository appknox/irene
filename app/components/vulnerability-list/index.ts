// eslint-disable-next-line ember/use-ember-data-rfc-395-imports
import DS from 'ember-data';

import { action } from '@ember/object';
import { inject as service } from '@ember/service';
import Component from '@glimmer/component';
import { tracked } from '@glimmer/tracking';
import { task } from 'ember-concurrency';
import MeService from 'irene/services/me';
import Store from '@ember-data/store';
import ProjectModel from 'irene/models/project';
import VulnerabilityPreferenceModel from 'irene/models/vulnerability-preference';

type VulnerabilityListQueryResponse =
  DS.AdapterPopulatedRecordArray<VulnerabilityPreferenceModel> & {
    meta: { count: number };
  };

interface VulnerabilityListSignature {
  Args: {
    project: ProjectModel | null;
  };
}

export default class VulnerabilityListComponent extends Component<VulnerabilityListSignature> {
  @service declare me: MeService;
  @service declare store: Store;

  @tracked
  vulnerabilityListResponse: VulnerabilityListQueryResponse | null = null;

  constructor(owner: unknown, args: VulnerabilityListSignature['Args']) {
    super(owner, args);
  }

  get project() {
    return this.args.project;
  }

  get vulnerabilityPreferences() {
    return this.vulnerabilityListResponse?.toArray() || [];
  }
  @action loadVulnerabilityPreferences() {
    this.fetchVulnerabilityPreferences.perform();
  }

  // @task(function* () {
  //   const vulnerabilityPreferences = yield this.store.query(
  //     'vulnerability-preference',
  //     {
  //       id: this.project.activeProfileId,
  //     }
  //   );

  //   this.vulnerabilityPreferences = vulnerabilityPreferences;
  // })
  // fetchVulnerabilityPreferences;

  fetchVulnerabilityPreferences = task(async () => {
    this.vulnerabilityListResponse = (await this.store.query(
      'vulnerability-preference',
      {
        id: this.project?.activeProfileId,
      }
    )) as VulnerabilityListQueryResponse;
  });
}

declare module '@glint/environment-ember-loose/registry' {
  export default interface Registry {
    VulnerabilityList: typeof VulnerabilityListComponent;
    'vulnerability-list': typeof VulnerabilityListComponent;
  }
}
