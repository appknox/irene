import Component from '@glimmer/component';
import { action } from '@ember/object';
import { service } from '@ember/service';
import { tracked } from '@glimmer/tracking';
import { all, task } from 'ember-concurrency';
import type Store from '@ember-data/store';
import type IntlService from 'ember-intl/services/intl';

import { getComputedRiskCategory } from 'irene/utils/compare-files';
import { scrollDashboardMainContainerTo } from 'irene/utils/scroll-to-top';
import parseError from 'irene/utils/parse-error';
import type FileModel from 'irene/models/file';
import type VulnerabilityModel from 'irene/models/vulnerability';
import type AnalysisModel from 'irene/models/analysis';

interface FileCompareVulnerabilityDetailsSignature {
  Args: {
    file1: FileModel | null;
    file2: FileModel | null;
    vulnerability: VulnerabilityModel | null;
  };
}

export default class FileCompareVulnerabilityDetailsComponent extends Component<FileCompareVulnerabilityDetailsSignature> {
  @service declare store: Store;
  @service declare intl: IntlService;
  @service('notifications') declare notify: NotificationService;

  @tracked expandFilesOverview = false;
  @tracked file1AnalysisModel: AnalysisModel | null = null;
  @tracked file2AnalysisModel: AnalysisModel | null = null;

  constructor(
    owner: unknown,
    args: FileCompareVulnerabilityDetailsSignature['Args']
  ) {
    super(owner, args);

    // Required to fetch all analysis data since the "FileAnalysisModel" does not contain all analysis data
    this.fetchAllFileAnalyses.perform();
  }

  get file1() {
    return this.args.file1;
  }

  get vulnerabilityId() {
    return this.args.vulnerability?.id;
  }

  get file2() {
    return this.args.file2;
  }

  get headerCTAIcon() {
    return this.expandFilesOverview ? 'arrow-drop-up' : 'arrow-drop-down';
  }

  get analysisStatus() {
    const category = getComputedRiskCategory(
      Number(this.file1AnalysisModel?.computedRisk),
      Number(this.file2AnalysisModel?.computedRisk)
    );

    if (category.newRisk) {
      return 'New';
    }

    if (category.resolved) {
      return 'Resolved';
    }

    if (category.recurring) {
      return 'Recurring';
    }

    return 'Untested';
  }

  @action
  handleExpandFilesOverview() {
    this.expandFilesOverview = !this.expandFilesOverview;

    scrollDashboardMainContainerTo({ top: 0, behavior: 'smooth' });
  }

  get fileAnalyses() {
    return [this.file1AnalysisModel, this.file2AnalysisModel];
  }

  @action findVulnerabilityAnalysis(file: FileModel | null) {
    return file?.analyses.find(
      (a) => a.vulnerability.get('id') === this.vulnerabilityId
    );
  }

  @action getFileAnalysisModel(analysisId: string | undefined) {
    // If no analysis is found, return null
    if (!analysisId) {
      return null;
    }

    return this.store.findRecord('analysis', String(analysisId));
  }

  fetchAllFileAnalyses = task(async () => {
    const file1AnalysisId = this.findVulnerabilityAnalysis(this.file1)?.id;
    const file2AnalysisId = this.findVulnerabilityAnalysis(this.file2)?.id;

    try {
      const [file1AnalysisModel, file2AnalysisModel] = await all([
        this.getFileAnalysisModel(file1AnalysisId),
        this.getFileAnalysisModel(file2AnalysisId),
      ]);

      this.file1AnalysisModel = file1AnalysisModel;
      this.file2AnalysisModel = file2AnalysisModel;
    } catch (error) {
      this.notify.error(parseError(error, this.intl.t('pleaseTryAgain')));
    }
  });
}

declare module '@glint/environment-ember-loose/registry' {
  export default interface Registry {
    'FileCompare::VulnerabilityDetails': typeof FileCompareVulnerabilityDetailsComponent;
  }
}
