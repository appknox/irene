import Component from '@glimmer/component';
import { action } from '@ember/object';
import RouterService from '@ember/routing/router-service';
import { inject as service } from '@ember/service';
import Store from '@ember-data/store';
import IntlService from 'ember-intl/services/intl';
import { tracked } from '@glimmer/tracking';

import FileModel from 'irene/models/file';
import VulnerabilityModel from 'irene/models/vulnerability';
import { getComputedRiskCategory } from 'irene/utils/compare-files';
import { scrollOrganizationDashboardMainContainerTo } from 'irene/utils/scroll-to-top';

interface FileCompareVulnerabilityDetailsSignature {
  Args: {
    file1: FileModel | null;
    file2: FileModel | null;
    vulnerability: VulnerabilityModel | null;
  };
}

export default class FileCompareVulnerabilityDetailsComponent extends Component<FileCompareVulnerabilityDetailsSignature> {
  @service declare store: Store;
  @service declare intl: IntlService;
  @service declare router: RouterService;

  @tracked expandFilesOverview = false;

  // Route to visit when a user clicks on the back button
  routeUrlMapForComparePageLoad = {
    New: 'new-issues',
    Resolved: 'resolved-test-cases',
    Recurring: 'index',
    Untested: 'untested-cases',
  };

  get file1() {
    return this.args.file1;
  }

  get routeToReturnTo() {
    return this.routeUrlMapForComparePageLoad[this.analysisStatus];
  }

  get fileCompareReferrer() {
    return this.router.currentRoute?.parent?.queryParams?.['referrer'];
  }

  get isAllUploadsBreadcrumb() {
    return this.fileCompareReferrer === 'all_uploads';
  }

  get breadcrumbItems() {
    return [
      {
        route: 'authenticated.projects',
        linkTitle: this.intl.t('allProjects'),
      },
      {
        route: 'authenticated.project.files',
        linkTitle: this.file1?.project?.get('packageName'),
        model: this.file1?.project?.get('id'),
        hidden: !this.isAllUploadsBreadcrumb,
      },
      {
        route: 'authenticated.file',
        linkTitle: `${this.intl.t('scanDetails')}`,
        model: this.file1?.id,
        hidden: this.isAllUploadsBreadcrumb,
      },
      {
        route: 'authenticated.choose',
        linkTitle: this.intl.t('fileCompare.fileSelection'),
        model: this.file1?.id,
        hidden: this.isAllUploadsBreadcrumb,
      },
      {
        route: `authenticated.dashboard.compare.${this.routeToReturnTo}`,
        linkTitle: this.intl.t('compare'),
        model: `${this.file1?.id}...${this.file2?.id}`,
        query: { referrer: this.fileCompareReferrer },
      },
      {
        route: `authenticated.dashboard.compare.${this.routeToReturnTo}`,
        linkTitle: this.intl.t('testCase'),
        model: `${this.file1?.id}`,
      },
    ];
  }

  get vulnerabilityId() {
    return this.args.vulnerability?.id;
  }

  get file2() {
    return this.args.file2;
  }

  get file1Analysis() {
    return this.file1?.analyses.find(
      (analysis) => analysis.vulnerability.get('id') === this.vulnerabilityId
    );
  }
  get file2Analysis() {
    return this.file2?.analyses.find(
      (analysis) => analysis.vulnerability.get('id') === this.vulnerabilityId
    );
  }

  get analysisStatus() {
    const category = getComputedRiskCategory(
      Number(this.file1Analysis?.computedRisk),
      Number(this.file2Analysis?.computedRisk)
    );

    if (category.newRisk) {
      return 'New';
    }

    if (category.resolved) {
      return 'Resolved';
    }

    if (category.recurring) {
      return 'Recurring';
    }

    return 'Untested';
  }

  @action
  handleExpandFilesOverview() {
    this.expandFilesOverview = !this.expandFilesOverview;

    scrollOrganizationDashboardMainContainerTo({ top: 0, behavior: 'smooth' });
  }

  get fileAnalyses() {
    return [this.file1Analysis, this.file2Analysis];
  }
}

declare module '@glint/environment-ember-loose/registry' {
  export default interface Registry {
    'FileCompare::VulnerabilityDetails': typeof FileCompareVulnerabilityDetailsComponent;
  }
}
