import { render } from '@ember/test-helpers';
import { hbs } from 'ember-cli-htmlbars';
import { setupMirage } from 'ember-cli-mirage/test-support';
import { setupIntl } from 'ember-intl/test-support';
import { setupRenderingTest } from 'ember-qunit';
import { module, test } from 'qunit';

import Service from '@ember/service';

class OrganizationMeStub extends Service {
  org = {
    is_owner: true,
    is_admin: false,
  };
}

module('Integration | Component | vulnerability-list', function (hooks) {
  setupRenderingTest(hooks);
  setupMirage(hooks);
  setupIntl(hooks);

  hooks.beforeEach(async function () {
    this.server.create('organization', 1);
    const profile = this.server.create('profile');
    this.project = this.server.create('project', {
      activeProfileId: profile.id,
    });

    await this.owner.lookup('service:organization').load();
    this.owner.register('service:me', OrganizationMeStub);
  });

  test('it does not renders when user is not admin', async function (assert) {
    await render(hbs`<VulnerabilityList @project={{this.project}} />`);
    assert.dom('[data-test-vulnerability-list-container]').doesNotExist();
  });

  test('it renders when user is admin', async function (assert) {
    this.server.get('/profiles/:id/vulnerability_preferences', (schema) => {
      return schema['vulnerabilityPreferences'].all().models;
    });

    class OrganizationMeStub extends Service {
      org = {
        is_owner: true,
        is_admin: true,
      };
    }
    this.owner.register('service:me', OrganizationMeStub);

    await render(hbs`<VulnerabilityList @project={{this.project}} />`);
    assert.dom('[data-test-vulnerability-list-container]').exists();
    assert
      .dom('[data-test-vulnerability-list-header-text]')
      .hasText('t:vulnerabilityPreferences:()');
    assert
      .dom('[data-test-vulnerability-list-warning-pref-conditions]')
      .hasTextContaining('t:warning:()')
      .hasTextContaining('t:vulnerabilityPreferencesCondition:()');
    assert
      .dom('[data-test-vulnerability-list-vulnerability-text]')
      .hasText('t:vulnerability:()');
    assert
      .dom('[data-test-vulnerability-list-override-risk-test]')
      .hasText('t:overrideRisk:()');
  });

  test('it renders vulnerability list if vulnuerability preferences is one or more', async function (assert) {
    for (let num of [1, 2]) {
      this.vulnerabilityPreferences = this.server.create(
        'vulnerability-preference',
        { risk: num }
      );
    }

    this.server.get('/profiles/:id/vulnerability_preferences', (schema) => {
      return schema['vulnerabilityPreferences'].all().models;
    });

    class OrganizationMeStub extends Service {
      org = {
        is_owner: true,
        is_admin: true,
      };
    }

    this.owner.register('service:me', OrganizationMeStub);

    await render(hbs`<VulnerabilityList @project={{this.project}} />`);
    assert.dom('[data-test-vulnerability-list-container]').exists();
    assert
      .dom('[data-test-vulnerability-list-header-text]')
      .hasText('t:vulnerabilityPreferences:()');

    assert.dom('[data-test-vulnerability-details-container]').exists();
    const numberOfVulnerabilityItems = this.element.querySelectorAll(
      '[data-test-vulnerability-details-container]'
    ).length;

    assert.strictEqual(
      numberOfVulnerabilityItems,
      2,
      'Renders the current number of vulnerability items'
    );
  });
});
