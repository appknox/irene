import { render } from '@ember/test-helpers';
import { hbs } from 'ember-cli-htmlbars';
import { setupMirage } from 'ember-cli-mirage/test-support';
import { setupIntl } from 'ember-intl/test-support';
import { setupRenderingTest } from 'ember-qunit';
import { module, test } from 'qunit';

module(
  'Integration | Component | sbom/scan-details/component-details/vulnerabilities/vulnerability-id',
  function (hooks) {
    setupRenderingTest(hooks);
    setupMirage(hooks);
    setupIntl(hooks);

    hooks.beforeEach(async function () {
      const modelName = 'sbom-vulnerability-audit';
      const store = this.owner.lookup('service:store');

      const normalized = store.normalize(
        modelName,
        this.server.create(modelName).toJSON()
      );

      this.sbomVulnerabilityAudit = store.push(normalized);
    });

    test('it renders the right vulnerability vulnerability-id data', async function (assert) {
      await render(hbs`
        <Sbom::ScanDetails::ComponentDetails::Vulnerabilities::VulnerabilityId
          @sbomVulnerability={{this.sbomVulnerabilityAudit.sbVulnerability}}
        />
      `);

      assert
        .dom('[data-test-sbomComponentVulnerabilities-vulnerabilityId]')
        .exists()
        .hasText(
          `${this.sbomVulnerabilityAudit.sbVulnerability.vulnerabilityId}`
        );
    });

    test('it renders right url and target on vulnerability id anchor tag', async function (assert) {
      const sbomVulnerability = this.sbomVulnerabilityAudit.sbVulnerability;

      await render(hbs`
        <Sbom::ScanDetails::ComponentDetails::Vulnerabilities::VulnerabilityId
          @sbomVulnerability={{this.sbomVulnerabilityAudit.sbVulnerability}}
        />
      `);

      assert
        .dom('[data-test-sbomComponentVulnerabilities-vulnerabilityId]')
        .hasTagName('a')
        .hasAttribute('href', sbomVulnerability.sourceUrl)
        .hasAttribute('target', '_blank');
    });
  }
);
