import { module, test } from 'qunit';
import { setupRenderingTest } from 'ember-qunit';
import { click, findAll, render } from '@ember/test-helpers';
import { hbs } from 'ember-cli-htmlbars';
import { setupIntl, t } from 'ember-intl/test-support';
import { setupMirage } from 'ember-cli-mirage/test-support';

import { analysisRiskStatus } from 'irene/helpers/analysis-risk-status';
import { getComputedRiskCategory } from 'irene/utils/compare-files';
import ENUMS from 'irene/enums';

const serializeForJsonApi = (payload, type) => ({
  data: {
    attributes: payload,
    id: payload.id,
    type,
  },
});

// File tags
const getTags = (types, file) => {
  if (types === undefined) {
    return [];
  }

  const tags = [];

  for (const type of Array.from(types)) {
    if (type === ENUMS.VULNERABILITY_TYPE.STATIC) {
      tags.push({
        status: file?.get?.('isStaticDone'),
        text: 'static',
      });
    }

    if (type === ENUMS.VULNERABILITY_TYPE.DYNAMIC) {
      tags.push({
        status: file?.get?.('isDynamicDone'),
        text: 'dynamic',
      });
    }

    if (type === ENUMS.VULNERABILITY_TYPE.MANUAL) {
      tags.push({
        status: file?.get?.('isManualDone'),
        text: 'manual',
      });
    }

    if (type === ENUMS.VULNERABILITY_TYPE.API) {
      tags.push({
        status: file?.get?.('isApiDone'),
        text: 'api',
      });
    }
  }

  return tags;
};

// Gets an analysis status
const getAnalysisStatus = (file1Analysis, file2Analysis) => {
  const category = getComputedRiskCategory(
    Number(file1Analysis?.computedRisk),
    Number(file2Analysis?.computedRisk)
  );

  if (category.newRisk) {
    return 'New';
  }

  if (category.resolved) {
    return 'Resolved';
  }

  if (category.recurring) {
    return 'Recurring';
  }

  return 'Untested';
};

module(
  'Integration | Component | file-compare/vulnerability-details',
  function (hooks) {
    setupRenderingTest(hooks);
    setupIntl(hooks, 'en');
    setupMirage(hooks);

    hooks.beforeEach(async function () {
      // Common server mocks
      this.server.get('/profiles/:id/unknown_analysis_status', (_, req) => {
        return {
          id: req.params.id,
          status: true,
        };
      });

      this.server.get('/v2/projects/:id', (schema, req) => {
        return schema.projects.find(req.params.id).toJSON();
      });

      this.server.get('/owasps/:id', (schema, req) =>
        serializeForJsonApi(
          schema.owasps.find(`${req.params.id}`)?.toJSON(),
          'owasps'
        )
      );

      this.server.get('/v2/owaspmobile2024s/:id', (schema, req) =>
        schema.owaspmobile2024s.find(`${req.params.id}`)?.toJSON()
      );

      this.server.get('/v2/cwes/:id', (schema, req) =>
        schema.cwes.find(`${req.params.id}`)?.toJSON()
      );

      this.server.get('/v2/analyses/:id', (schema, req) =>
        schema.analyses.find(`${req.params.id}`)?.toJSON()
      );

      this.server.get('/v2/asvses/:id', (schema, req) =>
        schema.asvses.find(`${req.params.id}`)?.toJSON()
      );

      this.server.get('/v2/mstgs/:id', (schema, req) =>
        schema.mstgs.find(`${req.params.id}`)?.toJSON()
      );

      this.server.get('/pcidsses/:id', (schema, req) =>
        serializeForJsonApi(
          schema.pcidsses.find(`${req.params.id}`)?.toJSON(),
          'pcidsses'
        )
      );

      this.server.get('/v2/gdprs/:id', (schema, req) =>
        schema.gdprs.find(`${req.params.id}`)?.toJSON()
      );

      this.server.get('/v2/hipaas/:id', (schema, req) =>
        schema.hipaas.find(`${req.params.id}`)?.toJSON()
      );

      // Profile Model
      this.server.create('profile');

      // Store service
      const store = this.owner.lookup('service:store');

      const vulnerability = this.server.create('vulnerability');

      const vulnerabilityModel = store.push(
        store.normalize('vulnerability', {
          attributes: vulnerability.toJSON(),
          id: vulnerability.id,
          type: 'vulnerabilities',
        })
      );

      // Creates analyses and maps a vulnerability to it
      const createAnalyses = ({ vulnerability = vulnerabilityModel }) => {
        const analysis = this.server.create('analysis', {
          overriden_risk: null,
        });

        const normalizedAnalysis = store.normalize(
          'analysis',
          analysis.toJSON()
        );

        const analysisModel = store.push(normalizedAnalysis);

        analysisModel.set('vulnerability', vulnerability);

        return analysisModel;
      };

      // File Analyses Models
      const project = this.server.create('project');

      const file1Analyses = [1].map(createAnalyses);
      const file2Analyses = [1].map(createAnalyses);

      // Creates two files that will ultimately serve as both base and compare files
      const files = this.server.createList('file', 2);
      const fileModels = files.map((file) => {
        const normalizedFile = store.normalize('file', {
          ...file.toJSON(),
          project: project.id,
        });

        return store.push(normalizedFile);
      });

      const file1 = fileModels[0];
      file1.set('analyses', file1Analyses);

      const file2 = fileModels[1];
      file2.set('analyses', file2Analyses);

      this.setProperties({
        file1,
        file2,
        vulnerability: vulnerabilityModel,
        file1Analysis: file1Analyses[0],
        file2Analysis: file2Analyses[0],
        createAnalyses,
      });
    });

    test('it renders', async function (assert) {
      await render(hbs`
        <FileCompare::VulnerabilityDetails @file1={{this.file1}} @file2={{this.file2}} @vulnerability={{this.vulnerability}} />
      `);

      assert
        .dom('[data-test-fileCompare-compareFiles-breadcrumbContainer]')
        .exists();

      assert
        .dom('[data-test-fileCompare-vulnerabilityDetails-file1ID]')
        .exists()
        .containsText(this.file1?.id);

      assert
        .dom('[data-test-fileCompare-vulnerabilityDetails-file2ID]')
        .exists()
        .containsText(this.file2?.id);

      assert.dom('[data-test-fileCompare-expandFilesOverview-btn]').exists();

      assert.dom('[data-test-fileCompare-vulnerabilityDetails-root]').exists();

      assert
        .dom('[data-test-fileCompare-vulnerabilityDetails-header]')
        .exists()
        .containsText(t('testCase'))
        .containsText(this.vulnerability.name);

      assert
        .dom('[data-test-fileCompare-vulnerabilityDetails-content]')
        .exists();

      // Analysis Details assertions
      const file1AnalysisDetailsSelector = `[data-test-vulnerabilityDetails-fileAnalysisDetails="${this.file1Analysis.id}"]`;
      const file2AnalysisDetailsSelector = `[data-test-vulnerabilityDetails-fileAnalysisDetails="${this.file2Analysis.id}"]`;

      [
        [file1AnalysisDetailsSelector, this.file1Analysis, this.file1],
        [file2AnalysisDetailsSelector, this.file2Analysis, this.file2],
      ].forEach(([analysisSelector, analysis, file]) => {
        assert
          .dom(
            `${analysisSelector} [data-test-fileCompare-analysisDetails-severityDetails]`
          )
          .exists()
          .containsText(t('severity'))
          .containsText(
            analysisRiskStatus([
              analysis?.computedRisk,
              analysis?.status,
              analysis?.isOverriddenRisk,
            ]).label
          );

        // Type of scan tags
        const fileTags = getTags(analysis.vulnerabilityTypes, file);

        const renderedFileTags = findAll(
          `${analysisSelector} [data-test-vulnerability-analysis-scanTypeTag]`
        );

        renderedFileTags.forEach((rft, idx) => {
          const tag = fileTags[idx];
          assert.dom(rft).exists().containsText(t(tag.text));
        });

        assert
          .dom('[data-test-analysisDetails-descriptionLabel]')
          .hasText(t('description'));

        if (analysis.isScanning) {
          assert
            .dom(
              `${analysisSelector} [data-test-analysisDetails-descriptionValue]`
            )
            .hasText(`${analysis.vulnerability.get('question')}`);
        } else if (analysis.isRisky) {
          assert
            .dom(
              `${analysisSelector} [data-test-analysisDetails-descriptionValue]`
            )
            .hasText(
              `${analysis.vulnerability
                .get('descriptionUnescapedd')
                .toString()}`
            );
        } else if (analysis.vulnerability.get('successMessage')) {
          assert
            .dom(
              `${analysisSelector} [data-test-analysisDetails-descriptionValue]`
            )
            .hasText(`${analysis.vulnerability.get('successMessage')}`);
        }
      });

      // File Analysis status
      const analysisStatus = getAnalysisStatus(
        this.file1Analysis,
        this.file2Analysis
      );

      assert
        .dom('[data-test-fileCompare-analysisDetails-analysisStatus]')
        .exists()
        .containsText(analysisStatus);
    });

    test('it toggles file overview cards on show more click', async function (assert) {
      await render(hbs`
      <FileCompare::VulnerabilityDetails @file1={{this.file1}} @file2={{this.file2}} @vulnerability={{this.vulnerability}} />
    `);

      assert.dom('[data-test-fileCompareHeader-file1Overview]').doesNotExist();
      assert.dom('[data-test-fileCompareHeader-file2Overview]').doesNotExist();

      await click('[data-test-fileCompare-expandFilesOverview-btn]');

      [
        ['[data-test-fileCompareHeader-file1Overview]', this.file1],
        ['[data-test-fileCompareHeader-file2Overview]', this.file2],
      ].forEach(([selector, file]) => {
        assert
          .dom(selector)
          .exists()
          .containsText(file.name)
          .containsText(file.project.get('packageName'))
          .containsText(file.version)
          .containsText(file.versionCode);
      });
    });

    test('it shows empty state if either file vulnerability does not exist', async function (assert) {
      const file2Analyses = [1].map(() =>
        this.createAnalyses({ vulnerability: null })
      );

      this.file2.set('analyses', file2Analyses);

      await render(hbs`
      <FileCompare::VulnerabilityDetails @file1={{this.file1}} @file2={{this.file2}} @vulnerability={{this.vulnerability}} />
    `);

      assert
        .dom(
          `[data-test-vulnerabilityDetails-fileAnalysisDetails="${this.file1Analysis.id}"]`
        )
        .exists();

      assert
        .dom(
          `[data-test-vulnerabilityDetails-fileAnalysisDetails="${this.file2Analysis.id}"]`
        )
        .doesNotExist();

      assert
        .dom('[data-test-vulnerabilityDetails-fileAnalysisDetails-notFound]')
        .exists();
    });
  }
);
