import Service from '@ember/service';
import { click, fillIn, findAll, render } from '@ember/test-helpers';
import { hbs } from 'ember-cli-htmlbars';
import { setupMirage } from 'ember-cli-mirage/test-support';
import { setupIntl } from 'ember-intl/test-support';
import { setupRenderingTest } from 'ember-qunit';
import ENUMS from 'irene/enums';
import { module, test } from 'qunit';
import { Response } from 'miragejs';
import { selectChoose } from 'ember-power-select/test-support';

import { riskText } from 'irene/helpers/risk-text';
import { analysisRiskStatus } from 'irene/helpers/analysis-risk-status';
import styles from 'irene/components/ak-select/index.scss';

const classes = {
  dropdown: styles['ak-select-dropdown'],
  trigger: styles['ak-select-trigger'],
  triggerError: styles['ak-select-trigger-error'],
};

const serializeForJsonApi = (payload, type) => ({
  data: {
    attributes: payload,
    id: payload.id,
    type,
  },
});

class NotificationsStub extends Service {
  errorMsg = null;
  successMsg = null;

  error(msg) {
    this.errorMsg = msg;
  }
  success(msg) {
    this.successMsg = msg;
  }
}

const getRiskStatusObj = (
  risk,
  status = ENUMS.ANALYSIS.COMPLETED,
  isOverridden = false
) => analysisRiskStatus([risk, status, isOverridden]);

module(
  'Integration | Component | vulnerability-analysis-details/edit-analysis-button',
  function (hooks) {
    setupRenderingTest(hooks);
    setupMirage(hooks);
    setupIntl(hooks);

    hooks.beforeEach(async function () {
      this.server.createList('organization', 1);

      this.server.createList('organization-me', 1, {
        is_owner: true,
        is_admin: true,
      });

      const store = this.owner.lookup('service:store');

      const vulnerability = store.push(
        store.normalize(
          'vulnerability',
          serializeForJsonApi(
            this.server.create('vulnerability').toJSON(),
            'vulnerabilities'
          ).data
        )
      );

      const analysis = store.push(
        store.normalize(
          'analysis',
          this.server
            .create('analysis', {
              file: '1',
              vulnerability: vulnerability.id,
              status: ENUMS.ANALYSIS_STATUS.COMPLETED,
              computed_risk: ENUMS.RISK.LOW,
            })
            .toJSON()
        )
      );

      const file = this.server.create('file');

      await this.owner.lookup('service:organization').load();

      this.setProperties({
        file: store.push(store.normalize('file', file.toJSON())),
        vulnerability,
        analysis,
        store,
      });

      this.owner.register('service:notifications', NotificationsStub);
    });

    test.each(
      'it renders/hides button for user role and based on risk',
      [
        [{ is_owner: false, is_admin: true }, ENUMS.RISK.CRITICAL, true],
        [{ is_owner: false, is_admin: false }, ENUMS.RISK.CRITICAL, false],
        [{ is_owner: true, is_admin: true }, ENUMS.RISK.UNKNOWN, false],
        [{ is_owner: true, is_admin: true }, ENUMS.RISK.NONE, false],
      ],
      async function (assert, [role, computedRisk, shouldRender]) {
        this.analysis.computedRisk = computedRisk;

        this.server.db.organizationMes.update('1', role);

        this.server.get('/organizations/:id/me', (schema, req) =>
          schema.organizationMes.find(`${req.params.id}`)?.toJSON()
        );

        await render(
          hbs`<FileDetails::VulnerabilityAnalysisDetails::EditAnalysisButton @analysis={{this.analysis}} />`
        );

        if (shouldRender) {
          assert
            .dom('[data-test-analysisDetails-editAnalysisBtn]')
            .isNotDisabled()
            .hasText('t:editAnalysis:()');
        } else {
          assert
            .dom('[data-test-analysisDetails-editAnalysisBtn]')
            .doesNotExist();
        }
      }
    );

    test('test edit analysis modal and override risk', async function (assert) {
      assert.expect(32);

      this.analysis.overriddenRisk = null;
      this.analysis.computedRisk = ENUMS.RISK.MEDIUM;
      this.analysis.risk = ENUMS.RISK.MEDIUM;

      // filter current risk and non risk choices
      const overrideRiskOptions = ENUMS.RISK.CHOICES.filter(
        (risk) => this.analysis.risk !== risk.value
      ).filter(
        (risk) => ![ENUMS.RISK.NONE, ENUMS.RISK.UNKNOWN].includes(risk.value)
      );

      const overrideForOptions = [
        { label: 't:currentFileOnly:()', value: 'false' },
        { label: 't:allFutureAnalyses:()', value: 'true' },
      ];

      this.server.get('/organizations/:id/me', (schema, req) =>
        schema.organizationMes.find(`${req.params.id}`)?.toJSON()
      );

      this.server.put(
        '/files/:fileId/vulnerability_preferences/:id/risk',
        (_, req) => {
          const requestValues = req.requestBody.split('&');

          assert.strictEqual(
            requestValues[0],
            `risk=${overrideRiskOptions[0].value}`
          );

          assert.strictEqual(requestValues[1], `comment=testing`);

          assert.strictEqual(
            requestValues[2],
            `all=${overrideForOptions[0].value}`
          );

          return new Response(200);
        }
      );

      await render(
        hbs`<FileDetails::VulnerabilityAnalysisDetails::EditAnalysisButton @analysis={{this.analysis}} />`
      );

      assert
        .dom('[data-test-analysisDetails-editAnalysisBtn]')
        .isNotDisabled()
        .hasText('t:editAnalysis:()');

      await click('[data-test-analysisDetails-editAnalysisBtn]');

      assert.dom('[data-test-ak-modal-header]').hasText('t:editAnalysis:()');

      assert
        .dom('[data-test-analysisDetails-editAnalysisModal-vulnerabilityName]')
        .hasText(this.analysis.vulnerability.get('name'));

      assert
        .dom('[data-test-analysisDetails-editAnalysisModal-overrideRiskTitle]')
        .hasText('t:overrideRisk:()');

      assert
        .dom(
          '[data-test-analysisDetails-editAnalysisModal-overrideDescription]'
        )
        .hasText('t:editAnalysisOverrideDescription:()');

      assert
        .dom('[data-test-analysisDetails-editAnalysisModal-markItAsLabel]')
        .hasText('t:markItAs:()');

      // open
      await click(
        `[data-test-analysisDetails-editAnalysisModal-markItAsSelect] .${classes.trigger}`
      );

      const markItAsSelectOptions = findAll('.ember-power-select-option');

      // default first option selected
      assert
        .dom(markItAsSelectOptions[0])
        .hasAria('selected', 'true')
        .hasText(`t:${riskText([overrideRiskOptions[0].value])}:()`);

      assert
        .dom('[data-test-analysisDetails-editAnalysisModal-ForLabel]')
        .hasText('t:for:()');

      assert
        .dom(
          `[data-test-analysisDetails-editAnalysisModal-ForSelect] .${classes.trigger}`
        )
        .hasText(overrideForOptions[0].label);

      assert
        .dom('[data-test-analysisDetails-editAnalysisModal-CommentLabel]')
        .hasText('t:comment:()');

      assert
        .dom('[data-test-analysisDetails-editAnalysisModal-CommentInput]')
        .isNotDisabled()
        .hasNoValue();

      assert
        .dom('[data-test-analysisDetails-editAnalysisModal-SaveBtn]')
        .isNotDisabled()
        .hasText('t:save:()');

      // test save click without comments
      await click('[data-test-analysisDetails-editAnalysisModal-SaveBtn]');

      const notify = this.owner.lookup('service:notifications');

      assert.strictEqual(notify.errorMsg, 't:riskAndCommentRequired:()');

      await fillIn(
        '[data-test-analysisDetails-editAnalysisModal-CommentInput]',
        'testing'
      );

      await click('[data-test-analysisDetails-editAnalysisModal-SaveBtn]');

      assert.strictEqual(notify.successMsg, 't:successfullyOverridden:()');

      // ui after save
      assert
        .dom('[data-test-analysisDetails-editAnalysisModal-overrideRiskTitle]')
        .hasText('t:overrideRisk:()');

      assert
        .dom(
          '[data-test-analysisDetails-editAnalysisModal-overriddenRiskTitle]'
        )
        .hasText('t:overriddenRisk:()');

      assert
        .dom('[data-test-analysisDetails-editAnalysisModal-overriddenRisk]')
        .containsText(getRiskStatusObj(this.analysis.overriddenRisk).label);

      assert
        .dom('[data-test-analysisDetails-editAnalysisModal-orginalRiskTitle]')
        .hasText('t:orginalRisk:()');

      assert
        .dom('[data-test-analysisDetails-editAnalysisModal-orginalRisk]')
        .containsText(getRiskStatusObj(this.analysis.risk).label);

      assert
        .dom(
          '[data-test-analysisDetails-editAnalysisModal-overriddenCommentLabel]'
        )
        .hasText('t:comment:()');

      assert
        .dom('[data-test-analysisDetails-editAnalysisModal-overriddenComment]')
        .hasText(this.analysis.overriddenRiskComment);

      assert
        .dom('[data-test-analysisDetails-editAnalysisModal-editOverriddenBtn]')
        .isNotDisabled()
        .hasText('t:edit:()');

      assert
        .dom('[data-test-analysisDetails-editAnalysisModal-resetOverriddenBtn]')
        .isNotDisabled()
        .hasText('t:reset:()');
    });

    test('test edit analysis modal and reset risk', async function (assert) {
      this.analysis.overriddenRisk = ENUMS.RISK.CRITICAL;
      this.analysis.computedRisk = ENUMS.RISK.MEDIUM;
      this.analysis.risk = ENUMS.RISK.MEDIUM;

      this.server.get('/organizations/:id/me', (schema, req) =>
        schema.organizationMes.find(`${req.params.id}`)?.toJSON()
      );

      this.server.delete(
        '/files/:fileId/vulnerability_preferences/:id/risk',
        () => {
          return new Response(204);
        }
      );

      await render(
        hbs`<FileDetails::VulnerabilityAnalysisDetails::EditAnalysisButton @analysis={{this.analysis}} />`
      );

      assert
        .dom('[data-test-analysisDetails-editAnalysisBtn]')
        .isNotDisabled()
        .hasText('t:editAnalysis:()');

      await click('[data-test-analysisDetails-editAnalysisBtn]');

      assert.dom('[data-test-ak-modal-header]').hasText('t:editAnalysis:()');

      assert
        .dom('[data-test-analysisDetails-editAnalysisModal-overrideRiskTitle]')
        .hasText('t:overrideRisk:()');

      assert
        .dom(
          '[data-test-analysisDetails-editAnalysisModal-overriddenRiskTitle]'
        )
        .hasText('t:overriddenRisk:()');

      assert
        .dom('[data-test-analysisDetails-editAnalysisModal-overriddenRisk]')
        .containsText(getRiskStatusObj(this.analysis.overriddenRisk).label);

      assert
        .dom('[data-test-analysisDetails-editAnalysisModal-orginalRiskTitle]')
        .hasText('t:orginalRisk:()');

      assert
        .dom('[data-test-analysisDetails-editAnalysisModal-orginalRisk]')
        .containsText(getRiskStatusObj(this.analysis.risk).label);

      assert
        .dom(
          '[data-test-analysisDetails-editAnalysisModal-overriddenCommentLabel]'
        )
        .hasText('t:comment:()');

      assert
        .dom('[data-test-analysisDetails-editAnalysisModal-overriddenComment]')
        .hasText(this.analysis.overriddenRiskComment || 't:none:()');

      assert
        .dom('[data-test-analysisDetails-editAnalysisModal-editOverriddenBtn]')
        .isNotDisabled()
        .hasText('t:edit:()');

      assert
        .dom('[data-test-analysisDetails-editAnalysisModal-resetOverriddenBtn]')
        .isNotDisabled()
        .hasText('t:reset:()');

      await click(
        '[data-test-analysisDetails-editAnalysisModal-resetOverriddenBtn]'
      );

      // edit analysis modal closes
      assert
        .dom('[data-test-analysisDetails-editAnalysisModal-overrideRiskTitle]')
        .doesNotExist();

      // confirm reset modal
      assert
        .dom('[data-test-ak-modal-header]')
        .hasText('t:resetOverriddenAnalysis:()');

      assert
        .dom('[data-test-confirmbox-confirmbtn]')
        .isNotDisabled()
        .hasText('t:ok:()');

      assert
        .dom('[data-test-confirmbox-cancelbtn]')
        .isNotDisabled()
        .hasText('t:cancel:()');

      await click('[data-test-confirmbox-confirmbtn]');

      const notify = this.owner.lookup('service:notifications');

      assert.strictEqual(notify.successMsg, 't:successfullyReset:()');
      assert.strictEqual(this.analysis.overriddenRisk, null);
      assert.strictEqual(this.analysis.overriddenRiskComment, null);

      assert.dom('[data-test-ak-modal-header]').doesNotExist();
    });

    test('test edit analysis modal and modify overridden risk', async function (assert) {
      assert.expect(33);

      this.analysis.overriddenRisk = ENUMS.RISK.CRITICAL;
      this.analysis.overriddenRiskComment = 'testing';
      this.analysis.computedRisk = ENUMS.RISK.MEDIUM;
      this.analysis.risk = ENUMS.RISK.MEDIUM;

      // filter current risk and non risk choices
      const overrideRiskOptions = ENUMS.RISK.CHOICES.filter(
        (risk) => this.analysis.risk !== risk.value
      ).filter(
        (risk) => ![ENUMS.RISK.NONE, ENUMS.RISK.UNKNOWN].includes(risk.value)
      );

      const overrideForOptions = [
        { label: 't:currentFileOnly:()', value: 'false' },
        { label: 't:allFutureAnalyses:()', value: 'true' },
      ];

      this.server.get('/organizations/:id/me', (schema, req) =>
        schema.organizationMes.find(`${req.params.id}`)?.toJSON()
      );

      this.server.put(
        '/files/:fileId/vulnerability_preferences/:id/risk',
        (_, req) => {
          const requestValues = req.requestBody.split('&');

          assert.strictEqual(
            requestValues[0],
            `risk=${overrideRiskOptions[1].value}`
          );

          assert.strictEqual(requestValues[1], `comment=testing`);

          assert.strictEqual(
            requestValues[2],
            `all=${overrideForOptions[1].value}`
          );

          return new Response(200);
        }
      );

      await render(
        hbs`<FileDetails::VulnerabilityAnalysisDetails::EditAnalysisButton @analysis={{this.analysis}} />`
      );

      assert
        .dom('[data-test-analysisDetails-editAnalysisBtn]')
        .isNotDisabled()
        .hasText('t:editAnalysis:()');

      await click('[data-test-analysisDetails-editAnalysisBtn]');

      assert.dom('[data-test-ak-modal-header]').hasText('t:editAnalysis:()');

      assert
        .dom('[data-test-analysisDetails-editAnalysisModal-overrideRiskTitle]')
        .hasText('t:overrideRisk:()');

      assert
        .dom(
          '[data-test-analysisDetails-editAnalysisModal-overriddenRiskTitle]'
        )
        .hasText('t:overriddenRisk:()');

      assert
        .dom('[data-test-analysisDetails-editAnalysisModal-overriddenRisk]')
        .containsText(getRiskStatusObj(this.analysis.overriddenRisk).label);

      assert
        .dom('[data-test-analysisDetails-editAnalysisModal-orginalRiskTitle]')
        .hasText('t:orginalRisk:()');

      assert
        .dom('[data-test-analysisDetails-editAnalysisModal-orginalRisk]')
        .containsText(getRiskStatusObj(this.analysis.risk).label);

      assert
        .dom(
          '[data-test-analysisDetails-editAnalysisModal-overriddenCommentLabel]'
        )
        .hasText('t:comment:()');

      assert
        .dom('[data-test-analysisDetails-editAnalysisModal-overriddenComment]')
        .hasText(this.analysis.overriddenRiskComment);

      assert
        .dom('[data-test-analysisDetails-editAnalysisModal-editOverriddenBtn]')
        .isNotDisabled()
        .hasText('t:edit:()');

      assert
        .dom('[data-test-analysisDetails-editAnalysisModal-resetOverriddenBtn]')
        .isNotDisabled()
        .hasText('t:reset:()');

      await click(
        '[data-test-analysisDetails-editAnalysisModal-editOverriddenBtn]'
      );

      // should show edit override risk ui
      assert
        .dom('[data-test-analysisDetails-editAnalysisModal-overrideRiskTitle]')
        .hasText('t:overrideRisk:()');

      assert
        .dom('[data-test-analysisDetails-editAnalysisModal-markItAsLabel]')
        .hasText('t:markItAs:()');

      // open
      await click(
        `[data-test-analysisDetails-editAnalysisModal-markItAsSelect] .${classes.trigger}`
      );

      const markItAsSelectOptions = findAll('.ember-power-select-option');

      // default first option selected
      assert
        .dom(markItAsSelectOptions[0])
        .hasAria('selected', 'true')
        .hasText(`t:${riskText([overrideRiskOptions[0].value])}:()`);

      // select 2nd option
      await selectChoose(
        `[data-test-analysisDetails-editAnalysisModal-markItAsSelect] .${classes.trigger}`,
        `t:${riskText([overrideRiskOptions[1].value])}:()`
      );

      // default first option selected
      assert
        .dom('[data-test-analysisDetails-editAnalysisModal-ForLabel]')
        .hasText('t:for:()');

      assert
        .dom(
          `[data-test-analysisDetails-editAnalysisModal-ForSelect] .${classes.trigger}`
        )
        .hasText(overrideForOptions[0].label);

      // select 2nd option
      await selectChoose(
        `[data-test-analysisDetails-editAnalysisModal-ForSelect] .${classes.trigger}`,
        overrideForOptions[1].label
      );

      assert
        .dom('[data-test-analysisDetails-editAnalysisModal-orginalRiskTitle]')
        .hasText('t:orginalRisk:()');

      assert
        .dom('[data-test-analysisDetails-editAnalysisModal-orginalRisk]')
        .containsText(getRiskStatusObj(this.analysis.risk).label);

      assert
        .dom('[data-test-analysisDetails-editAnalysisModal-CommentLabel]')
        .hasText('t:comment:()');

      assert
        .dom('[data-test-analysisDetails-editAnalysisModal-CommentInput]')
        .isNotDisabled()
        .hasValue(this.analysis.overriddenRiskComment);

      assert
        .dom('[data-test-analysisDetails-editAnalysisModal-SaveBtn]')
        .isNotDisabled()
        .hasText('t:save:()');

      assert
        .dom('[data-test-analysisDetails-editAnalysisModal-editCancelBtn]')
        .isNotDisabled()
        .hasText('t:cancel:()');

      await click('[data-test-analysisDetails-editAnalysisModal-SaveBtn]');

      const notify = this.owner.lookup('service:notifications');

      assert.strictEqual(notify.successMsg, 't:successfullyOverridden:()');
    });
  }
);
