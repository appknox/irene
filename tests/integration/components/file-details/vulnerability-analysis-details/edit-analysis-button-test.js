import Service from '@ember/service';
import { click, fillIn, find, render } from '@ember/test-helpers';
import { hbs } from 'ember-cli-htmlbars';
import { setupMirage } from 'ember-cli-mirage/test-support';
import { setupIntl, t } from 'ember-intl/test-support';
import { setupRenderingTest } from 'ember-qunit';
import { module, test } from 'qunit';
import { Response } from 'miragejs';
import { selectChoose } from 'ember-power-select/test-support';
import dayjs from 'dayjs';

import ENUMS from 'irene/enums';
import { riskText } from 'irene/helpers/risk-text';
import { analysisRiskStatus } from 'irene/helpers/analysis-risk-status';
import styles from 'irene/components/ak-select/index.scss';

const classes = {
  dropdown: styles['ak-select-dropdown'],
  trigger: styles['ak-select-trigger'],
  triggerError: styles['ak-select-trigger-error'],
};

const serializeForJsonApi = (payload, type) => ({
  data: {
    attributes: payload,
    id: payload.id,
    type,
  },
});

class NotificationsStub extends Service {
  errorMsg = null;
  successMsg = null;

  error(msg) {
    this.errorMsg = msg;
  }
  success(msg) {
    this.successMsg = msg;
  }
}

const getRiskStatusObj = (
  risk,
  status = ENUMS.ANALYSIS.COMPLETED,
  isOverridden = false
) => analysisRiskStatus([risk, status, isOverridden]);

module(
  'Integration | Component | vulnerability-analysis-details/edit-analysis-button',
  function (hooks) {
    setupRenderingTest(hooks);
    setupMirage(hooks);
    setupIntl(hooks, 'en');

    hooks.beforeEach(async function () {
      this.server.createList('organization', 1);

      this.server.createList('organization-me', 1, {
        is_owner: true,
        is_admin: true,
      });

      const store = this.owner.lookup('service:store');
      const files = this.server.createList('file', 3, { project: '1' });

      const project = this.server.create('project', {
        last_file_id: files[2].id,
      });

      const vulnerability = store.push(
        store.normalize(
          'vulnerability',
          serializeForJsonApi(
            this.server.create('vulnerability').toJSON(),
            'vulnerabilities'
          ).data
        )
      );

      const createAnalysis = (payload = {}) =>
        store.push(
          store.normalize(
            'analysis',
            this.server
              .create('analysis', {
                file: files[2].id, // latest file
                vulnerability: vulnerability.id,
                status: ENUMS.ANALYSIS_STATUS.COMPLETED,
                computed_risk: ENUMS.RISK.LOW,
                ...payload,
              })
              .toJSON()
          )
        );

      await this.owner.lookup('service:organization').load();

      this.setProperties({
        files,
        project,
        vulnerability,
        createAnalysis,
        store,
      });

      this.owner.register('service:notifications', NotificationsStub);
    });

    function assertEditAnalysis(assert, analysis, isLatestFile = true) {
      assert
        .dom(
          '[data-test-analysisRisk-overrideEditDrawer-vulnerabilityNameLabel]'
        )
        .hasText(t('editOverrideVulnerability.nameOfTheVulnerability'));

      assert
        .dom('[data-test-analysisRisk-overrideEditDrawer-vulnerabilityName]')
        .hasText(analysis.vulnerability.get('name'));

      const computedRiskLabel = getRiskStatusObj(analysis.computedRisk).label;

      assert
        .dom(`[data-test-analysisRiskTag-root='${computedRiskLabel}']`)
        .exists();

      assert
        .dom(
          '[data-test-analysisRisk-overrideEditDrawer-overrideForm-overrideToLabel]'
        )
        .hasText(t('editOverrideVulnerability.overrideTo'));

      if (analysis.overriddenRisk) {
        assert
          .dom(
            '[data-test-analysisRisk-overrideEditDrawer-overrideForm-overrideToSelect]'
          )
          .hasText(t(riskText([analysis.overriddenRisk])));
      } else {
        assert
          .dom(
            '[data-test-analysisRisk-overrideEditDrawer-overrideForm-overrideToSelect]'
          )
          .exists();
      }

      if (isLatestFile) {
        if (analysis.overrideCriteria) {
          assert
            .dom(
              `[data-test-analysisRisk-overrideEditDrawer-overrideForm-criteriaSelect] .${classes.trigger}`
            )
            .hasText(
              analysis.overrideCriteria ===
                ENUMS.ANALYSIS_OVERRIDE_CRITERIA.CURRENT_FILE
                ? t('currentFileOnly')
                : t('allFutureAnalyses')
            );
        } else {
          assert
            .dom(
              `[data-test-analysisRisk-overrideEditDrawer-overrideForm-criteriaSelect] .${classes.trigger}`
            )
            .exists();
        }
      } else {
        assert
          .dom(
            '[data-test-analysisRisk-overrideEditDrawer-overrideForm-overrideCriteriaText]'
          )
          .hasText(t('currentFileOnly'));
      }

      assert
        .dom(
          '[data-test-analysisRisk-overrideEditDrawer-overrideForm-commentLabel]'
        )
        .hasText(t('reason'));

      assert
        .dom(
          '[data-test-analysisRisk-overrideEditDrawer-overrideForm-commentInput]'
        )
        .isNotDisabled()
        .hasValue(analysis.overriddenRiskComment ?? '');

      assert
        .dom('[data-test-analysisRisk-overrideEditDrawer-overrideForm-saveBtn]')
        .isNotDisabled()
        .hasText(t('save'));

      assert
        .dom(
          '[data-test-analysisRisk-overrideEditDrawer-overrideForm-cancelBtn]'
        )
        .isNotDisabled()
        .hasText(t('cancel'));
    }

    function assertOverrideDetails(assert, analysis) {
      assert
        .dom(
          '[data-test-analysisRisk-overrideEditDrawer-vulnerabilityNameLabel]'
        )
        .hasText(t('editOverrideVulnerability.nameOfTheVulnerability'));

      assert
        .dom('[data-test-analysisRisk-overrideEditDrawer-vulnerabilityName]')
        .hasText(analysis.vulnerability.get('name'));

      assert
        .dom(
          `[data-test-analysisRiskTag-root='${getRiskStatusObj(analysis.computedRisk).label}']`
        )
        .exists();

      assert
        .dom(
          '[data-test-analysisRisk-overrideEditDrawer-overrideDetails-overriddenAsTitle]'
        )
        .hasText(t('editOverrideVulnerability.overriddenAs'));

      assert
        .dom(
          '[data-test-analysisRisk-overrideEditDrawer-overrideDetails-overriddenRiskText]'
        )
        .hasText(t(riskText([analysis.overriddenRisk])));

      assert
        .dom(
          '[data-test-analysisRisk-overrideEditDrawer-overrideDetails-overriddenRiskCriteriaText]'
        )
        .hasText(
          analysis.overrideCriteria ===
            ENUMS.ANALYSIS_OVERRIDE_CRITERIA.CURRENT_FILE
            ? t('currentFileOnly')
            : t('allFutureAnalyses')
        );

      assert
        .dom(
          '[data-test-analysisRisk-overrideEditDrawer-overrideDetails-reasonTitle]'
        )
        .hasText(t('reason'));

      assert
        .dom(
          '[data-test-analysisRisk-overrideEditDrawer-overrideDetails-reasonValue]'
        )
        .hasText(analysis.overriddenRiskComment);

      assert
        .dom(
          `[data-test-analysisRisk-overrideEditDrawer-overrideDetails-auditDetails="${t('editOverrideVulnerability.overriddenOn')}"]`
        )
        .hasText(
          `${t('editOverrideVulnerability.overriddenOn')} - ${dayjs(analysis.overriddenDate).format('MMM DD, YYYY')}`
        );

      assert
        .dom(
          `[data-test-analysisRisk-overrideEditDrawer-overrideDetails-auditDetails="${t('editOverrideVulnerability.overriddenBy')}"]`
        )
        .hasText(
          `${t('editOverrideVulnerability.overriddenBy')} - ${analysis.overriddenBy}`
        );

      assert
        .dom(
          `[data-test-analysisRisk-overrideEditDrawer-overrideDetails-auditDetails="${t('editOverrideVulnerability.overriddenSeverity')}"]`
        )
        .hasText(
          `${t('editOverrideVulnerability.overriddenSeverity')} - ${t(riskText([analysis.risk]))} ${t(riskText([analysis.overriddenRisk]))}`
        );

      assert
        .dom(
          '[data-test-analysisRisk-overrideEditDrawer-overrideDetails-editBtn]'
        )
        .isNotDisabled()
        .hasText(t('edit'));

      assert
        .dom(
          '[data-test-analysisRisk-overrideEditDrawer-overrideDetails-resetBtn]'
        )
        .isNotDisabled()
        .hasText(t('resetOverride'));
    }

    const ownerRole = { is_owner: true, is_admin: true };
    const adminRole = { is_owner: false, is_admin: true };
    const memberRole = { is_owner: false, is_admin: false };

    test.each(
      'it renders/hides button for user role and based on risk',
      [
        [adminRole, ENUMS.RISK.CRITICAL, true],
        [memberRole, ENUMS.RISK.CRITICAL, false],
        [ownerRole, ENUMS.RISK.UNKNOWN, false],
        [ownerRole, ENUMS.RISK.NONE, false], // system passed
        [ownerRole, ENUMS.RISK.NONE, false, ENUMS.RISK.CRITICAL], // system passed
        [ownerRole, ENUMS.RISK.NONE, false, ENUMS.RISK.NONE], // system passed
        [ownerRole, ENUMS.RISK.CRITICAL, true, ENUMS.RISK.NONE], // overridden passed
        [ownerRole, ENUMS.RISK.CRITICAL, true, ENUMS.RISK.LOW], // overridden
      ],
      async function (assert, [role, risk, shouldRender, overriddenRisk]) {
        this.analysis = this.createAnalysis({
          risk,
          computed_risk:
            risk === ENUMS.RISK.NONE ? risk : (overriddenRisk ?? risk),
          overridden_risk: overriddenRisk ?? null,
        });

        this.server.db.organizationMes.update('1', role);

        this.server.get('/organizations/:id/me', (schema, req) =>
          schema.organizationMes.find(`${req.params.id}`)?.toJSON()
        );

        await render(
          hbs`<FileDetails::VulnerabilityAnalysisDetails::EditAnalysisButton @analysis={{this.analysis}} />`
        );

        if (shouldRender) {
          assert
            .dom('[data-test-analysisDetails-editAnalysisBtn]')
            .isNotDisabled();
        } else {
          assert
            .dom('[data-test-analysisDetails-editAnalysisBtn]')
            .doesNotExist();
        }
      }
    );

    test.each(
      'test edit analysis drawer and override risk',
      [
        { isOverridden: true, isLatestFile: false, expected: 51 },
        { isOverridden: true, isLatestFile: true, expected: 51 },
        { isOverridden: false, isLatestFile: false, expected: 24 },
        { isOverridden: false, isLatestFile: true, expected: 24 },
        { isLatestFile: true, markPassed: true, expected: 24 },
        { isLatestFile: false, markPassed: true, expected: 24 },
      ],
      async function (
        assert,
        { isOverridden, expected, isLatestFile, markPassed }
      ) {
        assert.expect(expected);

        const analysisId = '12124';
        const overrideToRisk = markPassed ? ENUMS.RISK.NONE : ENUMS.RISK.LOW;

        // create analysis
        this.analysis = this.createAnalysis({
          id: analysisId,
          file: isLatestFile ? this.files[2].id : this.files[0].id,
          overridden_risk: isOverridden ? ENUMS.RISK.CRITICAL : null,
          overridden_risk_comment: isOverridden ? 'test override' : null,
          overridden_by: isOverridden ? 'test@appknox.com' : null,
          overridden_date: isOverridden ? dayjs().toString() : null,
          override_criteria: isOverridden
            ? ENUMS.ANALYSIS_OVERRIDE_CRITERIA.CURRENT_FILE
            : null,
          computed_risk: isOverridden ? ENUMS.RISK.CRITICAL : ENUMS.RISK.MEDIUM,
          risk: ENUMS.RISK.MEDIUM,
        });

        const overrideForOptions = [
          {
            label: t('currentFileOnly'),
            value: ENUMS.ANALYSIS_OVERRIDE_CRITERIA.CURRENT_FILE,
          },
          {
            label: t('allFutureAnalyses'),
            value: ENUMS.ANALYSIS_OVERRIDE_CRITERIA.ALL_FUTURE_UPLOAD,
          },
        ];

        this.server.get('/organizations/:id/me', (schema, req) =>
          schema.organizationMes.find(`${req.params.id}`)?.toJSON()
        );

        this.server.get('/v2/projects/:id', (schema, req) => {
          return schema.projects.find(`${req.params.id}`)?.toJSON();
        });

        this.server.get('/v2/files/:id', (schema, req) => {
          return schema.files.find(`${req.params.id}`)?.toJSON();
        });

        this.server.get('/v2/analyses/:id', (schema, req) => {
          return schema.analyses.find(`${req.params.id}`)?.toJSON();
        });

        this.server.put(
          '/files/:fileId/vulnerability_preferences/:id/risk',
          (schema, req) => {
            const data = req.requestBody
              .split('&')
              .map((it) => it.split('='))
              .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});

            assert.strictEqual(data.risk, `${overrideToRisk}`);
            assert.strictEqual(data.comment, 'testing');

            assert.strictEqual(
              data.all,
              `${overrideForOptions[0].value === ENUMS.ANALYSIS_OVERRIDE_CRITERIA.ALL_FUTURE_UPLOAD}`
            );

            schema.analyses.find(analysisId).update({
              computed_risk: parseInt(data.risk),
              overridden_risk: parseInt(data.risk),
              overridden_risk_comment: data.comment,
            });

            return new Response(200);
          }
        );

        await render(
          hbs`<FileDetails::VulnerabilityAnalysisDetails::EditAnalysisButton @analysis={{this.analysis}} />`
        );

        assert
          .dom('[data-test-analysisDetails-editAnalysisBtn]')
          .isNotDisabled();

        await click('[data-test-analysisDetails-editAnalysisBtn]');

        assert
          .dom('[data-test-analysisRisk-overrideEditDrawer-title]')
          .hasText(isOverridden ? t('overrideDetails') : t('editAnalysis'));

        // assert override details
        if (isOverridden) {
          assertOverrideDetails(assert, this.analysis);

          await click(
            '[data-test-analysisRisk-overrideEditDrawer-overrideDetails-editBtn]'
          );

          assert
            .dom('[data-test-analysisRisk-overrideEditDrawer-title]')
            .hasText(t('editAnalysis'));
        }

        // assert edit analysis
        assertEditAnalysis(assert, this.analysis, isLatestFile);

        const optionToSelect = markPassed
          ? t('ignoreVulnerability')
          : t(riskText([overrideToRisk]));

        // select risk
        await selectChoose(
          `[data-test-analysisRisk-overrideEditDrawer-overrideForm-overrideToSelect] .${classes.trigger}`,
          optionToSelect
        );

        if (markPassed) {
          assert
            .dom(
              '[data-test-analysisRisk-overrideEditDrawer-overrideForm-overrideSelectHelperText]'
            )
            .hasText(t('fileAnalysisDetails.ignoreVulnerabilityHelperText'));
        } else {
          assert
            .dom(
              '[data-test-analysisRisk-overrideEditDrawer-overrideForm-overrideSelectHelperText]'
            )
            .doesNotExist();
        }

        // if latest file then can select criteria
        if (isLatestFile) {
          await selectChoose(
            `[data-test-analysisRisk-overrideEditDrawer-overrideForm-criteriaSelect] .${classes.trigger}`,
            overrideForOptions[0].label
          );
        }

        await fillIn(
          '[data-test-analysisRisk-overrideEditDrawer-overrideForm-commentInput]',
          'testing'
        );

        await click(
          '[data-test-analysisRisk-overrideEditDrawer-overrideForm-saveBtn]'
        );

        // ui after save
        if (isOverridden) {
          assert
            .dom('[data-test-analysisRisk-overrideEditDrawer-title]')
            .hasText(t('overrideDetails'));

          assertOverrideDetails(assert, this.analysis);
        } else {
          assert
            .dom('[data-test-analysisRisk-overrideEditDrawer-title]')
            .hasText(t('successMessage'));

          assert
            .dom(
              '[data-test-analysisRisk-overrideEditDrawer-overrideForm-successSvg]'
            )
            .exists();

          assert
            .dom(
              '[data-test-analysisRisk-overrideEditDrawer-overrideForm-successMsg]'
            )
            .hasText(t('fileAnalysisDetails.overrideSuccessMessage'));

          assert
            .dom(
              '[data-test-analysisRisk-overrideEditDrawer-overrideForm-successOriginalRisk]'
            )
            .hasText(t(riskText([this.analysis.risk])));

          assert
            .dom(
              '[data-test-analysisRisk-overrideEditDrawer-overrideForm-successOverriddenRisk]'
            )
            .hasText(t(riskText([this.analysis.overriddenRisk])));
        }
      }
    );

    test.each(
      'test edit analysis drawer and reset risk',
      [
        {
          isLatestFile: true,
          overrideCriteria: ENUMS.ANALYSIS_OVERRIDE_CRITERIA.CURRENT_FILE,
          resetAll: false,
        },
        {
          isLatestFile: true,
          overrideCriteria: ENUMS.ANALYSIS_OVERRIDE_CRITERIA.ALL_FUTURE_UPLOAD,
          resetAll: true,
          expected: 27,
        },
        {
          isLatestFile: false,
          overrideCriteria: ENUMS.ANALYSIS_OVERRIDE_CRITERIA.CURRENT_FILE,
          resetAll: false,
        },
        {
          isLatestFile: false,
          overrideCriteria: ENUMS.ANALYSIS_OVERRIDE_CRITERIA.ALL_FUTURE_UPLOAD,
          resetAll: false,
        },
      ],
      async function (
        assert,
        { isLatestFile, overrideCriteria, resetAll, expected }
      ) {
        assert.expect(expected ?? 25);

        const analysisId = '11234';

        // create analysis
        this.analysis = this.createAnalysis({
          id: analysisId,
          file: isLatestFile ? this.files[2].id : this.files[1].id,
          overridden_risk: ENUMS.RISK.CRITICAL,
          overridden_risk_comment: 'test override',
          overridden_by: 'test@appknox.com',
          overridden_date: dayjs().toString(),
          override_criteria: overrideCriteria,
          computed_risk: ENUMS.RISK.CRITICAL,
          risk: ENUMS.RISK.MEDIUM,
        });

        this.server.get('/organizations/:id/me', (schema, req) =>
          schema.organizationMes.find(`${req.params.id}`)?.toJSON()
        );

        this.server.get('/v2/projects/:id', (schema, req) => {
          return schema.projects.find(`${req.params.id}`)?.toJSON();
        });

        this.server.get('/v2/files/:id', (schema, req) => {
          return schema.files.find(`${req.params.id}`)?.toJSON();
        });

        this.server.get('/v2/analyses/:id', (schema, req) => {
          return schema.analyses.find(`${req.params.id}`)?.toJSON();
        });

        this.server.delete(
          '/files/:fileId/vulnerability_preferences/:id/risk',
          (schema, req) => {
            assert.strictEqual(req.requestBody, `all=${resetAll}`);

            schema.analyses.find(analysisId).update({
              overridden_risk: null,
              overridden_risk_comment: null,
              overridden_by: null,
              overridden_date: null,
              override_criteria: null,
              computed_risk: ENUMS.RISK.MEDIUM,
            });

            return new Response(204);
          }
        );

        await render(
          hbs`<FileDetails::VulnerabilityAnalysisDetails::EditAnalysisButton @analysis={{this.analysis}} />`
        );

        assert
          .dom('[data-test-analysisDetails-editAnalysisBtn]')
          .isNotDisabled();

        await click('[data-test-analysisDetails-editAnalysisBtn]');

        assert
          .dom('[data-test-analysisRisk-overrideEditDrawer-title]')
          .hasText(t('overrideDetails'));

        // assert override details
        assertOverrideDetails(assert, this.analysis);

        await click(
          '[data-test-analysisRisk-overrideEditDrawer-overrideDetails-resetBtn]'
        );

        // reset confirm
        assert
          .dom('[data-test-analysisRisk-overrideEditDrawer-title]')
          .hasText(t('confirmation'));

        const hasCurrentAndFutureReset =
          this.analysis.overrideCriteria ===
            ENUMS.ANALYSIS_OVERRIDE_CRITERIA.ALL_FUTURE_UPLOAD && isLatestFile;

        assert
          .dom(
            '[data-test-analysisDetails-editAnalysis-resetConfirm-confirmTitle]'
          )
          .hasText(
            hasCurrentAndFutureReset
              ? t(
                  'fileAnalysisDetails.currentFileResetOrRemoveOverrideConfirmTitle'
                )
              : t('fileAnalysisDetails.currentFileResetConfirmTitle')
          );

        let actionBtn1 = null;
        let actionBtn2 = null;

        if (hasCurrentAndFutureReset) {
          assert
            .dom(
              '[data-test-analysisDetails-editAnalysis-resetConfirm-noteTitle]'
            )
            .hasText(
              t('fileAnalysisDetails.editAnalysisResetConfirmNoteTitle')
            );

          assert
            .dom(
              '[data-test-analysisDetails-editAnalysis-resetConfirm-noteText]'
            )
            .hasText(t('fileAnalysisDetails.editAnalysisResetConfirmNoteText'));

          actionBtn1 = find(
            `[data-test-analysisDetails-editAnalysis-resetConfirm-resetAction="${t('fileAnalysisDetails.resetForTheCurrentFile')}"]`
          );

          actionBtn2 = find(
            `[data-test-analysisDetails-editAnalysis-resetConfirm-resetAction="${t('fileAnalysisDetails.removeOverride')}"]`
          );
        } else {
          actionBtn1 = find(
            `[data-test-analysisDetails-editAnalysis-resetConfirm-resetAction="${t('yes')}"]`
          );

          actionBtn2 = find(
            `[data-test-analysisDetails-editAnalysis-resetConfirm-resetAction="${t('cancel')}"]`
          );
        }

        assert.dom(actionBtn1).isNotDisabled();
        assert.dom(actionBtn2).isNotDisabled();

        if (resetAll) {
          await click(actionBtn2);
        } else {
          await click(actionBtn1);
        }

        // reset success
        assert
          .dom('[data-test-analysisRisk-overrideEditDrawer-title]')
          .hasText(t('successMessage'));

        assert
          .dom(
            '[data-test-analysisDetails-editAnalysis-resetConfirm-successSvg]'
          )
          .exists();

        assert
          .dom(
            '[data-test-analysisDetails-editAnalysis-resetConfirm-successMsg]'
          )
          .hasText(
            resetAll
              ? t('fileAnalysisDetails.removeOverrideSuccessMessage')
              : t('fileAnalysisDetails.currentFileResetSuccessMessage')
          );
      }
    );

    test.each(
      'test edit analysis form validation',
      [true, false],
      async function (assert, { isLatestFile }) {
        // create analysis
        this.analysis = this.createAnalysis({
          file: this.files[isLatestFile ? 2 : 0].id,
          overridden_risk: null,
          computed_risk: ENUMS.RISK.CRITICAL,
          risk: ENUMS.RISK.CRITICAL,
        });

        this.server.get('/organizations/:id/me', (schema, req) =>
          schema.organizationMes.find(`${req.params.id}`)?.toJSON()
        );

        this.server.get('/v2/projects/:id', (schema, req) => {
          return schema.projects.find(`${req.params.id}`)?.toJSON();
        });

        this.server.get('/v2/files/:id', (schema, req) => {
          return schema.files.find(`${req.params.id}`)?.toJSON();
        });

        this.server.get('/v2/analyses/:id', (schema, req) => {
          return schema.analyses.find(`${req.params.id}`)?.toJSON();
        });

        await render(
          hbs`<FileDetails::VulnerabilityAnalysisDetails::EditAnalysisButton @analysis={{this.analysis}} />`
        );

        assert
          .dom('[data-test-analysisDetails-editAnalysisBtn]')
          .isNotDisabled();

        await click('[data-test-analysisDetails-editAnalysisBtn]');

        assert
          .dom('[data-test-analysisRisk-overrideEditDrawer-title]')
          .hasText(t('editAnalysis'));

        // click save without any values
        await click(
          '[data-test-analysisRisk-overrideEditDrawer-overrideForm-saveBtn]'
        );

        assert
          .dom(
            '[data-test-analysisRisk-overrideEditDrawer-overrideForm-riskCriteriaSelectError]'
          )
          .hasText(
            isLatestFile
              ? t('editOverrideVulnerability.emptySeverityCriteriaErrorText')
              : t('editOverrideVulnerability.emptySeverityErrorText')
          );

        assert
          .dom(
            '[data-test-analysisRisk-overrideEditDrawer-overrideForm-commentInputError]'
          )
          .hasText(t('editOverrideVulnerability.emptyReasonErrorText'));

        if (isLatestFile) {
          await selectChoose(
            `[data-test-analysisRisk-overrideEditDrawer-overrideForm-criteriaSelect] .${classes.trigger}`,
            t('currentFileOnly')
          );

          // click save with only criteria selected
          await click(
            '[data-test-analysisRisk-overrideEditDrawer-overrideForm-saveBtn]'
          );

          assert
            .dom(
              '[data-test-analysisRisk-overrideEditDrawer-overrideForm-riskCriteriaSelectError]'
            )
            .hasText(t('editOverrideVulnerability.emptySeverityErrorText'));

          assert
            .dom(
              '[data-test-analysisRisk-overrideEditDrawer-overrideForm-commentInputError]'
            )
            .hasText(t('editOverrideVulnerability.emptyReasonErrorText'));
        }
      }
    );
  }
);
