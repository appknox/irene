import { getOwner } from '@ember/application';
import tHelper from 'ember-i18n/helper';
import localeConfig from 'ember-i18n/config/en';
import { test, moduleForComponent } from 'ember-qunit';
import { startMirage } from 'irene/initializers/ember-cli-mirage';
import { run } from '@ember/runloop';

moduleForComponent('vulnerability-details', 'Integration | Component | vulnerability details', {
  unit: true,
  needs: [
    'helper:risk-text',
    'helper:eq',
    'service:i18n',
    'service:ajax',
    'service:notification-messages-service',
    'service:session',
    'locale:en/translations',
    'locale:en/config',
    'util:i18n/missing-message',
    'util:i18n/compile-template',
    'config:environment',
    'component:attach-tooltip',
    'component:ember-popper',
  ],
  beforeEach() {
    // set the locale and the config
    getOwner(this).lookup('service:i18n').set('locale', 'en');
    this.register('locale:en/config', localeConfig);

    // register t helper
    this.register('helper:t', tHelper);

    // start Mirage
    this.server = startMirage();
  },
  afterEach() {
    // shutdown Mirage
    this.server.shutdown();
  }
});

test('it exists', function(assert) {
  const component = this.subject();
  var store = {
    find: function() {
      return [
        {
          id:1,
          type: "vulnerability",
          attributes: {
            name: "test"
          }
        }
      ];
    }
  };
  component.set('store', store);
  this.render();
  run(function() {
    assert.deepEqual(component.get("vulnerabilityDetails"), [{
        id:1,
        type: "vulnerability",
        attributes: {
          name: "test"
        }
      }
    ]);
    component.set('vulnerability', {riskOverridden: 1, riskOverriddenComment: 'abc'});
    assert.equal(component.get('vulnerability.riskOverridden'), 1);
    assert.equal(component.get('vulnerability.riskOverriddenComment'), 'abc');
    assert.notOk(component.setProperties(1,"mark"));
    assert.notOk(component.setProperties(1,"ignore"));
    assert.notOk(component.setProperties(1,"reset"));
    component.set("project", {activeProfileId:1});
    component.set("vulnerability", {id:1});
    assert.notOk(component.saveVulnerabilityPreferences(1, "mark"));
    component.send("selectPreference");
    component.send("editPreference");
    component.send("cancelEdit");
    component.send("resetPreference");
  });
});
