import Service from '@ember/service';
import { click, fillIn, render } from '@ember/test-helpers';
import { hbs } from 'ember-cli-htmlbars';
import { setupMirage } from 'ember-cli-mirage/test-support';
import { setupIntl } from 'ember-intl/test-support';
import { setupRenderingTest } from 'ember-qunit';

import ENUMS from 'irene/enums';
import { riskText } from 'irene/helpers/risk-text';
import { analysisRiskStatus } from 'irene/helpers/analysis-risk-status';
import { module, test } from 'qunit';
import { selectChoose } from 'ember-power-select/test-support';
import styles from 'irene/components/ak-select/index.scss';

const classes = {
  dropdown: styles['ak-select-dropdown'],
  trigger: styles['ak-select-trigger'],
  triggerError: styles['ak-select-trigger-error'],
};

class NotificationsStub extends Service {
  errorMsg = null;
  successMsg = null;
  error(msg) {
    this.errorMsg = msg;
    return this.errorMsg;
  }

  success(msg) {
    this.successMsg = msg;
    return this.successMsg;
  }
}

const getRiskStatusObj = (
  risk,
  status = ENUMS.ANALYSIS.COMPLETED,
  isOverridden = false
) => analysisRiskStatus([risk, status, isOverridden]);

module(
  'Integration | Component | project-settings/analysis-settings/vulnerability-details',
  function (hooks) {
    setupRenderingTest(hooks);
    setupMirage(hooks);
    setupIntl(hooks);

    hooks.beforeEach(async function () {
      this.project = this.server.create('project', {
        activeProfileId: 1,
      });

      this.vulnerabilityPreference = this.server.create(
        'vulnerability-preference',
        { risk: null }
      );

      this.vulnerability = this.owner
        .lookup('service:store')
        .createRecord('vulnerability', {
          id: 1,
          name: 'Appknox Vulnerability',
        });

      this.owner.register('service:notifications', NotificationsStub);
      this.notifyService = this.owner.lookup('service:notifications');

      // Risk select options
      const risks = ENUMS.RISK.CHOICES;
      const riskFilter = [ENUMS.RISK.NONE, ENUMS.RISK.UNKNOWN];
      this.riskSelectOptions = risks.filter(
        (risk) => !riskFilter.includes(risk.value)
      );
    });

    test('it renders correctly when risk overridden is false.', async function (assert) {
      await render(
        hbs`<ProjectSettings::AnalysisSettings::VulnerabilityDetails @project={{this.project}} @vulnerability={{this.vulnerabilityPreference}}  />`
      );

      assert
        .dom('[data-prjSettings-analysisSettings-vulnDetails-container]')
        .exists();

      assert
        .dom('[data-prjSettings-analysisSettings-vulnDetails-name]')
        .exists()
        .hasText(this.vulnerability.name);

      assert
        .dom('[data-prjSettings-analysisSettings-vulnDetails-riskSelectBox]')
        .exists()
        .hasText('t:selectRisk:()');
    });

    test('it renders correctly when risk overridden is true', async function (assert) {
      this.vulnerabilityPreference = this.server.create(
        'vulnerability-preference',
        { risk: 0, comment: 'No comments' }
      );

      await render(
        hbs`<ProjectSettings::AnalysisSettings::VulnerabilityDetails @project={{this.project}} @vulnerability={{this.vulnerabilityPreference}}  />`
      );

      const overridenRiskText = getRiskStatusObj(
        this.vulnerabilityPreference.risk
      ).label;

      assert
        .dom('[data-prjSettings-analysisSettings-vulnDetails-riskLabelClass]')
        .exists()
        .containsText(overridenRiskText);

      assert
        .dom('[data-prjSettings-analysisSettings-vulnDetails-riskSelectBox]')
        .doesNotExist();
    });

    test('edit details should toggle if overriden risk is available', async function (assert) {
      this.vulnerabilityPreference = this.server.create(
        'vulnerability-preference',
        { risk: 1, comment: 'No comments' }
      );

      await render(
        hbs`<ProjectSettings::AnalysisSettings::VulnerabilityDetails @project={{this.project}} @vulnerability={{this.vulnerabilityPreference}}  />`
      );

      this.set('vulnerabilityRisk', 1);
      this.set('isExpanded', false);

      await click(
        '[data-prjSettings-analysisSettings-vulnDetails-expandViewIcon]'
      );

      assert
        .dom(
          '[data-prjSettings-analysisSettings-vulnDetails-riskEditCommentDesc]'
        )
        .exists();
    });

    test('edit details should toggle if overriden risk is null', async function (assert) {
      await render(
        hbs`<ProjectSettings::AnalysisSettings::VulnerabilityDetails @project={{this.project}} @vulnerability={{this.vulnerabilityPreference}}  />`
      );

      this.set('vulnerabilityRisk', 1);
      this.set('isExpanded', false);

      await click(
        '[data-prjSettings-analysisSettings-vulnDetails-expandViewIcon]'
      );
      assert
        .dom(
          '[data-prjSettings-analysisSettings-vulnDetails-riskEditCommentDesc]'
        )
        .doesNotExist();
    });

    test('it should show right comment', async function (assert) {
      this.vulnerabilityPreference = this.server.create(
        'vulnerability-preference',
        { risk: 1, comment: 'No comments' }
      );

      await render(
        hbs`<ProjectSettings::AnalysisSettings::VulnerabilityDetails @project={{this.project}} @vulnerability={{this.vulnerabilityPreference}}  />`
      );

      this.set('vulnerabilityRisk', 1);
      this.set('isExpanded', false);

      await click(
        '[data-prjSettings-analysisSettings-vulnDetails-expandViewIcon]'
      );
      assert
        .dom(
          '[data-prjSettings-analysisSettings-vulnDetails-riskEditCommentDesc]'
        )
        .exists();

      assert
        .dom(
          '[data-prjSettings-analysisSettings-vulnDetails-riskEditedComment]'
        )
        .exists()
        .containsText('No comments');
    });

    test('it should reset vulnerability', async function (assert) {
      this.vulnerabilityPreference = this.server.create(
        'vulnerability-preference',
        { risk: 1, comment: 'No comments' }
      );

      await render(
        hbs`<ProjectSettings::AnalysisSettings::VulnerabilityDetails @project={{this.project}} @vulnerability={{this.vulnerabilityPreference}}  />`
      );

      this.set('vulnerabilityRisk', 1);
      this.set('isExpanded', false);

      await click(
        '[data-prjSettings-analysisSettings-vulnDetails-expandViewIcon]'
      );

      assert
        .dom('[data-prjSettings-analysisSettings-vulnDetails-resetBtn]')
        .exists();
      await click('[data-prjSettings-analysisSettings-vulnDetails-resetBtn]');

      assert
        .dom('[data-prjSettings-analysisSettings-vulnDetails-riskSelectBox]')
        .exists()
        .hasText('t:selectRisk:()');
    });

    test('it should edit comment', async function (assert) {
      this.vulnerabilityPreference = this.server.create(
        'vulnerability-preference',
        { id: 1, risk: 1, comment: 'No comments' }
      );

      this.server.put(
        '/profiles/:id/vulnerability_preferences/:id',
        (schema, request) => {
          const body = new URLSearchParams(request.requestBody);
          const comment = body.get('comment');
          const risk = body.get('risk');

          return {
            id: request.params.id,
            risk,
            comment,
          };
        }
      );

      await render(
        hbs`<ProjectSettings::AnalysisSettings::VulnerabilityDetails @project={{this.project}} @vulnerability={{this.vulnerabilityPreference}}  />`
      );

      this.set('vulnerabilityRisk', 1);
      this.set('isExpanded', false);

      await click(
        '[data-prjSettings-analysisSettings-vulnDetails-expandViewIcon]'
      );

      assert
        .dom('[data-prjSettings-analysisSettings-vulnDetails-editBtn]')
        .exists();

      await click('[data-prjSettings-analysisSettings-vulnDetails-editBtn]');

      await fillIn(
        '[data-prjSettings-analysisSettings-vulnDetails-commentInput]',
        'testing'
      );

      assert
        .dom('[data-prjSettings-analysisSettings-vulnDetails-commentInput]')
        .hasValue('testing');

      assert
        .dom('[data-prjSettings-analysisSettings-vulnDetails-editSaveBtn]')
        .exists();

      await click(
        '[data-prjSettings-analysisSettings-vulnDetails-editSaveBtn]'
      );

      assert
        .dom('[data-prjSettings-analysisSettings-vulnDetails-editBtn]')
        .doesNotExist();

      assert
        .dom('[data-prjSettings-analysisSettings-vulnDetails-editSaveBtn]')
        .doesNotExist();

      assert
        .dom(
          '[data-prjSettings-analysisSettings-vulnDetails-riskEditCommentDesc]'
        )
        .doesNotExist();
    });

    test('it should edit risk', async function (assert) {
      this.vulnerabilityPreference = this.server.create(
        'vulnerability-preference',
        { risk: 1, comment: 'No comments' }
      );

      await render(
        hbs`<ProjectSettings::AnalysisSettings::VulnerabilityDetails @project={{this.project}} @vulnerability={{this.vulnerabilityPreference}}  />`
      );

      this.set('vulnerabilityRisk', 1);
      this.set('isExpanded', false);

      await click(
        '[data-prjSettings-analysisSettings-vulnDetails-expandViewIcon]'
      );

      assert
        .dom('[data-prjSettings-analysisSettings-vulnDetails-editBtn]')
        .exists();

      await click('[data-prjSettings-analysisSettings-vulnDetails-editBtn]');

      await selectChoose(
        `[data-prjSettings-analysisSettings-vulnDetails-riskSelectBox] .${classes.trigger}`,
        `t:${riskText([this.riskSelectOptions[2].value])}:()`
      );

      assert
        .dom('[data-prjSettings-analysisSettings-vulnDetails-editSaveBtn]')
        .exists();

      await click(
        '[data-prjSettings-analysisSettings-vulnDetails-editSaveBtn]'
      );

      assert
        .dom('[data-prjSettings-analysisSettings-vulnDetails-editBtn]')
        .doesNotExist();

      assert
        .dom('[data-prjSettings-analysisSettings-vulnDetails-editSaveBtn]')
        .doesNotExist();

      assert
        .dom(
          '[data-prjSettings-analysisSettings-vulnDetails-riskEditCommentDesc]'
        )
        .doesNotExist();

      const overridenRiskText = getRiskStatusObj(
        this.vulnerabilityPreference.risk
      ).label;

      assert
        .dom('[data-prjSettings-analysisSettings-vulnDetails-riskLabelClass]')
        .exists()
        .containsText(overridenRiskText);
    });

    test('it overide risk, when overridden is false', async function (assert) {
      this.vulnerabilityPreference = this.server.create(
        'vulnerability-preference',
        { id: 1, comment: '', risk: null, riskLabelClass: 'tag is-warning' }
      );

      this.server.put(
        '/profiles/:id/vulnerability_preferences/:id',
        (schema, request) => {
          const body = new URLSearchParams(request.requestBody);
          const comment = body.get('comment');
          const risk = body.get('risk');

          return {
            id: request.params.id,
            risk,
            comment,
          };
        }
      );

      await render(
        hbs`<ProjectSettings::AnalysisSettings::VulnerabilityDetails @project={{this.project}} @vulnerability={{this.vulnerabilityPreference}}  />`
      );

      assert
        .dom('[data-prjSettings-analysisSettings-vulnDetails-riskSelectBox]')
        .exists()
        .hasText('t:selectRisk:()');

      await selectChoose(
        `[data-prjSettings-analysisSettings-vulnDetails-riskSelectBox] .${classes.trigger}`,
        `t:${riskText([this.riskSelectOptions[2].value])}:()`
      );

      const overridenRiskText = riskText([3]);

      assert
        .dom('[data-prjSettings-analysisSettings-vulnDetails-riskSelectBox]')
        .exists()
        .hasText(`t:${overridenRiskText}:()`);

      assert
        .dom(
          '[data-prjSettings-analysisSettings-vulnDetails-riskEditCommentDesc]'
        )
        .exists();

      await fillIn(
        '[data-prjSettings-analysisSettings-vulnDetails-commentInput]',
        'testing'
      );

      assert
        .dom('[data-prjSettings-analysisSettings-vulnDetails-commentInput]')
        .hasValue('testing');

      assert
        .dom('[data-prjSettings-analysisSettings-vulnDetails-editSaveBtn]')
        .exists();

      await click(
        '[data-prjSettings-analysisSettings-vulnDetails-editSaveBtn]'
      );

      assert
        .dom('[data-prjSettings-analysisSettings-vulnDetails-editSaveBtn]')
        .doesNotExist();

      assert
        .dom(
          '[data-prjSettings-analysisSettings-vulnDetails-riskEditCommentDesc]'
        )
        .doesNotExist();

      await click(
        '[data-prjSettings-analysisSettings-vulnDetails-expandViewIcon]'
      );

      assert
        .dom('[data-prjSettings-analysisSettings-vulnDetails-riskLabelClass]')
        .exists()
        .hasText(getRiskStatusObj(3).label);

      assert
        .dom(
          '[data-prjSettings-analysisSettings-vulnDetails-riskEditedComment]'
        )
        .exists()
        .containsText('testing');
    });

    test('it should not override risk, when no comment is entered', async function (assert) {
      this.vulnerabilityPreference = this.server.create(
        'vulnerability-preference',
        { id: 1, comment: '', risk: null }
      );

      await render(
        hbs`<ProjectSettings::AnalysisSettings::VulnerabilityDetails @project={{this.project}} @vulnerability={{this.vulnerabilityPreference}}  />`
      );

      assert
        .dom('[data-prjSettings-analysisSettings-vulnDetails-riskSelectBox]')
        .exists()
        .hasText('t:selectRisk:()');

      await selectChoose(
        `[data-prjSettings-analysisSettings-vulnDetails-riskSelectBox] .${classes.trigger}`,
        `t:${riskText([this.riskSelectOptions[2].value])}:()`
      );

      const overridenRiskText = riskText([3]);

      assert
        .dom('[data-prjSettings-analysisSettings-vulnDetails-riskSelectBox]')
        .exists()
        .hasText(`t:${overridenRiskText}:()`);

      assert
        .dom(
          '[data-prjSettings-analysisSettings-vulnDetails-riskEditCommentDesc]'
        )
        .exists();

      assert
        .dom('[data-prjSettings-analysisSettings-vulnDetails-editSaveBtn]')
        .exists();

      await click(
        '[data-prjSettings-analysisSettings-vulnDetails-editSaveBtn]'
      );

      assert
        .dom('[data-prjSettings-analysisSettings-vulnDetails-editSaveBtn]')
        .exists();

      assert
        .dom(
          '[data-prjSettings-analysisSettings-vulnDetails-riskEditCommentDesc]'
        )
        .exists();

      assert.strictEqual(
        this.notifyService.get('errorMsg'),
        `t:riskAndCommentRequired:()`,
        'Error notification message should not exist'
      );
    });
  }
);
