import Service from '@ember/service';
import { click, fillIn, render, select } from '@ember/test-helpers';
import { hbs } from 'ember-cli-htmlbars';
import { setupMirage } from 'ember-cli-mirage/test-support';
import { setupIntl } from 'ember-intl/test-support';
import { setupRenderingTest } from 'ember-qunit';
import ENUMS from 'irene/enums';
import { riskText } from 'irene/helpers/risk-text';
import { module, test } from 'qunit';
import { selectChoose } from 'ember-power-select/test-support';
import styles from 'irene/components/ak-select/index.scss';

const classes = {
  dropdown: styles['ak-select-dropdown'],
  trigger: styles['ak-select-trigger'],
  triggerError: styles['ak-select-trigger-error'],
};

class NotificationsStub extends Service {
  errorMsg = null;
  successMsg = null;
  error(msg) {
    this.errorMsg = msg;
    return this.errorMsg;
  }

  success(msg) {
    this.successMsg = msg;
    return this.successMsg;
  }
}

module('Integration | Component | vulnerability-details', function (hooks) {
  setupRenderingTest(hooks);
  setupMirage(hooks);
  setupIntl(hooks);

  hooks.beforeEach(async function () {
    this.project = this.server.create('project', {
      activeProfileId: 1,
    });

    this.vulnerabilityPreference = this.server.create(
      'vulnerability-preference'
    );

    this.vulnerability = this.owner
      .lookup('service:store')
      .createRecord('vulnerability', {
        id: 1,
        name: 'Appknox Vulnerability',
      });

    this.owner.register('service:notifications', NotificationsStub);
    this.notifyService = this.owner.lookup('service:notifications');

    // Risk select options
    const risks = ENUMS.RISK.CHOICES;
    const riskFilter = [ENUMS.RISK.NONE, ENUMS.RISK.UNKNOWN];
    this.riskSelectOptions = risks.filter(
      (risk) => !riskFilter.includes(risk.value)
    );
  });

  test('it renders correctly when risk overridden is false.', async function (assert) {
    await render(
      hbs`<ProjectSettings::AnalysisSettings::VulnerabilityDetails @project={{this.project}} @vulnerability={{this.vulnerabilityPreference}}  />`
    );

    assert.dom('[data-test-vulnerability-details-container]').exists();
    assert
      .dom('[data-test-vulnerability-details-name]')
      .exists()
      .hasText(this.vulnerability.name);

    assert
      .dom('[data-test-risk-select-preferences]')
      .exists()
      .hasText('Select Risk');
  });

  test('it renders correctly when risk overridden is true', async function (assert) {
    this.vulnerabilityPreference = this.server.create(
      'vulnerability-preference',
      { risk: 0, comment: 'No comments' }
    );

    await render(
      hbs`<ProjectSettings::AnalysisSettings::VulnerabilityDetails @project={{this.project}} @vulnerability={{this.vulnerabilityPreference}}  />`
    );

    const overridenRiskText = riskText([this.vulnerabilityPreference.risk]);
    assert
      .dom('[data-test-vulnerability-risk-label-class]')
      .exists()
      .containsText(`t:${overridenRiskText}:()`);

    assert.dom('[data-test-risk-select-preferences]').doesNotExist();
  });

  test('accordion should not work when overridden is true', async function (assert) {
    this.vulnerabilityPreference = this.server.create(
      'vulnerability-preference',
      { risk: 1, comment: 'No comments' }
    );

    await render(
      hbs`<ProjectSettings::AnalysisSettings::VulnerabilityDetails @project={{this.project}} @vulnerability={{this.vulnerabilityPreference}}  />`
    );

    this.set('vulnerabilityRisk', 1);
    this.set('isExpanded', false);

    await click('[data-test-vulnerability-details-icon-click]');
    assert.dom('[data-test-vulnerability-risk-comments]').exists();
  });

  test('accordion should not work when overridden is false', async function (assert) {
    await render(
      hbs`<ProjectSettings::AnalysisSettings::VulnerabilityDetails @project={{this.project}} @vulnerability={{this.vulnerabilityPreference}}  />`
    );

    this.set('vulnerabilityRisk', 1);
    this.set('isExpanded', false);

    await click('[data-test-vulnerability-details-icon-click]');
    assert.dom('[data-test-vulnerability-risk-comments]').doesNotExist();
  });

  test('it should show right comment', async function (assert) {
    this.vulnerabilityPreference = this.server.create(
      'vulnerability-preference',
      { risk: 1, comment: 'No comments' }
    );

    await render(
      hbs`<ProjectSettings::AnalysisSettings::VulnerabilityDetails @project={{this.project}} @vulnerability={{this.vulnerabilityPreference}}  />`
    );

    this.set('vulnerabilityRisk', 1);
    this.set('isExpanded', false);

    await click('[data-test-vulnerability-details-icon-click]');
    assert.dom('[data-test-vulnerability-risk-comments]').exists();

    assert
      .dom('[data-test-vulnerability-comment]')
      .exists()
      .containsText('No comments');
  });

  test('it should reset vulnerability', async function (assert) {
    this.vulnerabilityPreference = this.server.create(
      'vulnerability-preference',
      { risk: 1, comment: 'No comments' }
    );

    await render(
      hbs`<ProjectSettings::AnalysisSettings::VulnerabilityDetails @project={{this.project}} @vulnerability={{this.vulnerabilityPreference}}  />`
    );

    this.set('vulnerabilityRisk', 1);
    this.set('isExpanded', false);

    await click('[data-test-vulnerability-details-icon-click]');

    assert.dom('[data-test-vulnerability-reset-button]').exists();
    await click('[data-test-vulnerability-reset-button]');

    assert
      .dom('[data-test-risk-select-preferences]')
      .exists()
      .hasText('Select Risk');
  });

  test('it should edit comment', async function (assert) {
    this.vulnerabilityPreference = this.server.create(
      'vulnerability-preference',
      { id: 1, risk: 1, comment: 'No comments' }
    );

    this.server.put(
      '/profiles/:id/vulnerability_preferences/:id',
      (schema, request) => {
        const body = new URLSearchParams(request.requestBody);
        const comment = body.get('comment');
        const risk = body.get('risk');
        return {
          id: request.params.id,
          risk,
          comment,
        };
      }
    );

    await render(
      hbs`<ProjectSettings::AnalysisSettings::VulnerabilityDetails @project={{this.project}} @vulnerability={{this.vulnerabilityPreference}}  />`
    );

    this.set('vulnerabilityRisk', 1);
    this.set('isExpanded', false);

    await click('[data-test-vulnerability-details-icon-click]');

    assert.dom('[data-test-vulnerability-edit-button]').exists();
    await click('[data-test-vulnerability-edit-button]');

    await fillIn('[data-test-vulnerability-comment-input]', 'testing');
    assert.dom('[data-test-vulnerability-comment-input]').hasValue('testing');

    assert.dom('[data-test-vulnerability-save-button]').exists();
    await click('[data-test-vulnerability-save-button]');

    assert.dom('[data-test-vulnerability-edit-button]').doesNotExist();
    assert.dom('[data-test-vulnerability-save-button]').doesNotExist();
    assert.dom('[data-test-vulnerability-risk-comments]').doesNotExist();
  });

  test('it should edit risk', async function (assert) {
    this.vulnerabilityPreference = this.server.create(
      'vulnerability-preference',
      { risk: 1, comment: 'No comments' }
    );

    await render(
      hbs`<ProjectSettings::AnalysisSettings::VulnerabilityDetails @project={{this.project}} @vulnerability={{this.vulnerabilityPreference}}  />`
    );

    this.set('vulnerabilityRisk', 1);
    this.set('isExpanded', false);

    await click('[data-test-vulnerability-details-icon-click]');

    assert.dom('[data-test-vulnerability-edit-button]').exists();
    await click('[data-test-vulnerability-edit-button]');

    await selectChoose(
      `[data-test-risk-select-preferences] .${classes.trigger}`,
      `t:${riskText([this.riskSelectOptions[2].value])}:()`
    );

    assert.dom('[data-test-vulnerability-save-button]').exists();
    await click('[data-test-vulnerability-save-button]');

    assert.dom('[data-test-vulnerability-edit-button]').doesNotExist();
    assert.dom('[data-test-vulnerability-save-button]').doesNotExist();
    assert.dom('[data-test-vulnerability-risk-comments]').doesNotExist();

    const overridenRiskText = riskText([this.vulnerabilityPreference.risk]);
    assert
      .dom('[data-test-vulnerability-risk-label-class]')
      .exists()
      .containsText(`t:${overridenRiskText}:()`);
  });

  test('it overide risk, when overridden is false', async function (assert) {
    this.vulnerabilityPreference = this.server.create(
      'vulnerability-preference',
      { id: 1, comment: '', risk: null, riskLabelClass: 'tag is-warning' }
    );

    this.server.put(
      '/profiles/:id/vulnerability_preferences/:id',
      (schema, request) => {
        const body = new URLSearchParams(request.requestBody);
        const comment = body.get('comment');
        const risk = body.get('risk');
        return {
          id: request.params.id,
          risk,
          comment,
        };
      }
    );

    await render(
      hbs`<ProjectSettings::AnalysisSettings::VulnerabilityDetails @project={{this.project}} @vulnerability={{this.vulnerabilityPreference}}  />`
    );

    assert
      .dom('[data-test-risk-select-preferences]')
      .exists()
      .hasText('Select Risk');

    await selectChoose(
      `[data-test-risk-select-preferences] .${classes.trigger}`,
      `t:${riskText([this.riskSelectOptions[2].value])}:()`
    );
    const overridenRiskText = riskText([3]);
    assert
      .dom('[data-test-risk-select-preferences]')
      .exists()
      .hasText(`t:${overridenRiskText}:()`);

    assert.dom('[data-test-vulnerability-risk-comments]').exists();

    await fillIn('[data-test-vulnerability-comment-input]', 'testing');
    assert.dom('[data-test-vulnerability-comment-input]').hasValue('testing');

    assert.dom('[data-test-vulnerability-save-button]').exists();
    await click('[data-test-vulnerability-save-button]');

    assert.dom('[data-test-vulnerability-save-button]').doesNotExist();
    assert.dom('[data-test-vulnerability-risk-comments]').doesNotExist();

    await click('[data-test-vulnerability-details-icon-click]');

    assert
      .dom('[data-test-vulnerability-risk-label-class]')
      .exists()
      .hasText(`t:${overridenRiskText}:()`);

    assert
      .dom('[data-test-vulnerability-comment]')
      .exists()
      .containsText('testing');
  });

  test('it should not overide risk, when no comment is entered', async function (assert) {
    this.vulnerabilityPreference = this.server.create(
      'vulnerability-preference',
      { id: 1, comment: '', risk: null }
    );

    await render(
      hbs`<ProjectSettings::AnalysisSettings::VulnerabilityDetails @project={{this.project}} @vulnerability={{this.vulnerabilityPreference}}  />`
    );

    assert
      .dom('[data-test-risk-select-preferences]')
      .exists()
      .hasText('Select Risk');

    await selectChoose(
      `[data-test-risk-select-preferences] .${classes.trigger}`,
      `t:${riskText([this.riskSelectOptions[2].value])}:()`
    );
    const overridenRiskText = riskText([3]);
    assert
      .dom('[data-test-risk-select-preferences]')
      .exists()
      .hasText(`t:${overridenRiskText}:()`);

    assert.dom('[data-test-vulnerability-risk-comments]').exists();

    assert.dom('[data-test-vulnerability-save-button]').exists();
    await click('[data-test-vulnerability-save-button]');

    assert.dom('[data-test-vulnerability-save-button]').exists();
    assert.dom('[data-test-vulnerability-risk-comments]').exists();

    assert.strictEqual(
      this.notifyService.get('errorMsg'),
      `t:riskAndCommentRequired:()`,
      'Error notification message should not exist'
    );
  });
});
