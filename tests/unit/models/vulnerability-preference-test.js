/* eslint-disable prettier/prettier, qunit/require-expect, qunit/no-assert-equal, qunit/no-assert-equal-boolean */
import ENUMS from 'irene/enums';
import { module, test } from 'qunit';
import { setupTest } from 'ember-qunit';

module('Unit | Model | vulnerability preference', function (hooks) {
  setupTest(hooks);

  test('it exists', function (assert) {
    const submission = this.owner
      .lookup('service:store')
      .createRecord('vulnerability-preference');

    submission.set('risk', 1);

    assert.equal(submission.get('riskOverridden'), true, 'Risk Overridden');

    assert.equal(
      submission.iconClass(ENUMS.RISK.UNKNOWN),
      'fa-spinner fa-spin',
      'Icon Class'
    );

    assert.equal(
      submission.iconClass(ENUMS.RISK.NONE),
      'fa-check',
      'Icon Class'
    );

    assert.equal(
      submission.iconClass(ENUMS.RISK.CRITICAL),
      'fa-warning',
      'Icon Class'
    );

    assert.equal(
      submission.get('riskIconClass'),
      'fa-warning',
      'Risk Icon Class'
    );

    assert.equal(
      submission.labelClass(ENUMS.RISK.UNKNOWN),
      'tag is-progress',
      'Label Class'
    );

    assert.equal(
      submission.labelClass(ENUMS.RISK.NONE),
      'tag is-success',
      'Label Class'
    );

    assert.equal(
      submission.labelClass(ENUMS.RISK.LOW),
      'tag is-info',
      'Label Class'
    );

    assert.equal(
      submission.labelClass(ENUMS.RISK.MEDIUM),
      'tag is-warning',
      'Label Class'
    );

    assert.equal(
      submission.labelClass(ENUMS.RISK.HIGH),
      'tag is-danger',
      'Label Class'
    );

    assert.equal(
      submission.labelClass(ENUMS.RISK.CRITICAL),
      'tag is-critical',
      'Label Class'
    );

    assert.equal(
      submission.get('riskLabelClass'),
      'tag is-info',
      'Risk Label Class'
    );
  });
});
