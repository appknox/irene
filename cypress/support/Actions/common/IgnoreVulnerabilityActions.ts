import { SelectorMatcherOptions } from '@testing-library/cypress';
import dayjs from 'dayjs';

import { MirageFactoryDefProps } from '../../../support/Mirage';
import cyTranslate from '../../../support/translations';
import { API_ROUTES } from '../../../support/api.routes';

// Test Types
export type VulnerabilityItemProps = MirageFactoryDefProps['vulnerability'];
export type AnalysisItemProps = MirageFactoryDefProps['analysis'];
export type RiskTextKeys = keyof typeof RISK_TEXT_MAP;

export type VulnerabilityListResponse = Array<{
  id: number;
  attributes: VulnerabilityItemProps;
}>;

// Test Constants
export const RISK_TEXT_MAP = {
  0: 'Passed',
  1: 'Low',
  2: 'Medium',
  3: 'High',
  4: 'Critical',
};

export const ANALYSIS_OVERRIDE_CRITERIA = {
  current_file: cyTranslate('currentFileOnly'),
  all_future_upload: cyTranslate('allFutureAnalyses'),
};

const DEFAULT_ASSERT_OPTS = {
  timeout: 20000,
};

export default class IgnoreVulnerabilityActions {
  /**
   * Closes the edit modal by clicking the close button.
   */
  closeEditDrawer() {
    cy.findByTestId('overrideEditDrawer-closeBtn').click({ force: true });
  }

  /**
   * Opens the edit drawer by clicking the button with the specified label.
   *
   * @param {string} btnLabel - The label text of the button to be clicked.
   */
  openEditDrawer(btnLabel: string) {
    cy.findByLabelText(btnLabel, DEFAULT_ASSERT_OPTS).click({
      force: true,
    });
  }

  /**
   * Finds a button by its label and clicks it.
   *
   * @param {string} label - The accessible name of the button to be found.
   */
  findBtnByLabelAndClick(label: string) {
    cy.findByRole('button', {
      ...DEFAULT_ASSERT_OPTS,
      name: label,
    }).click({ force: true });
  }

  /**
   * Retrieves the vulnerability analysis item by its alias.
   *
   * @param {string} alias - The alias used to identify the vulnerability item.
   * @returns {Cypress.Chainable<VulnerabilityItemProps>} A Cypress chainable object containing the vulnerability item.
   */
  getAnalysisVulnerability(
    alias: string
  ): Cypress.Chainable<VulnerabilityItemProps> {
    return cy.get<VulnerabilityItemProps>(alias, DEFAULT_ASSERT_OPTS);
  }

  /**
   * Finds and clicks the first anchor element with the specified href attribute.
   *
   * @param {string} href - The href attribute value to find and click the link.
   */
  findAndClickLinkByHrefAttr(href: string) {
    cy.get(`a[href="${href}"]`, DEFAULT_ASSERT_OPTS)
      .first()
      .click({ force: true });
  }

  /**
   * Navigates to the file details page from an analysis view based on a file ID.
   *
   * @param {string} fileIdAlias - The alias for the file ID used to construct the href.
   */
  goToFileDetailsFromAnalysis(fileIdAlias: string) {
    cy.get<string>(fileIdAlias).then((fileId) =>
      this.findAndClickLinkByHrefAttr(`/dashboard/file/${fileId}`)
    );
  }

  /**
   * Retrieves all vulnerability preference items by their test ID.
   *
   * @param {number} id - The ID of the vulnerability preference item.
   * @returns {Cypress.Chainable<JQuery<HTMLElement>>} - The Cypress chainable for the found elements.
   */
  getVulnPrefItem(id: number): Cypress.Chainable<JQuery<HTMLElement>> {
    return cy.findByTestId(`vulnPreference-item-${id}`, DEFAULT_ASSERT_OPTS);
  }

  /**
   * Asserts the existence of the Edit Analysis Drawer.
   *
   * @returns {Cypress.Chainable<JQuery<HTMLElement>>} - The Cypress chainable for the found drawer element.
   */
  getEditAnalysisDrawer(): Cypress.Chainable<JQuery<HTMLElement>> {
    return cy
      .findByTestId('editAnaysis-drawer', DEFAULT_ASSERT_OPTS)
      .should('exist');
  }

  /**
   * Intercepts an analysis item response for a given ID and assigns an alias.
   *
   * @param {Object} params - The parameters for intercepting the analysis item.
   * @param {string} params.idAlias - The alias for the analysis item ID.
   * @param {string} params.intAlias - The alias for the intercept request.
   */
  interceptAnalysisItemRes({
    idAlias,
    intAlias,
  }: {
    idAlias: string;
    intAlias: string;
  }) {
    cy.get<string>(idAlias).then((id) =>
      cy
        .intercept({ url: `${API_ROUTES.analysis.route}/${id}`, times: 2 })
        .as(intAlias)
    );
  }

  /**
   * Navigates to the project analysis settings page using the provided project ID alias.
   *
   * @param {string} prjIdAlias - The alias used to retrieve the project ID.
   */
  goToPrjAnalysisSettings(prjIdAlias: string) {
    this.findBtnByLabelAndClick('file summary more button');

    cy.get<string>(prjIdAlias).then((prjId) => {
      this.findAndClickLinkByHrefAttr(`/dashboard/project/${prjId}/settings`);
    });

    cy.findByRole('link', { name: cyTranslate('analysisSettings') }).click();

    // Assert project analysis settings page
    this.assertMultipleTextInfo(
      [
        cyTranslate('projectSettings.headerText'),
        cyTranslate('analysisSettings'),
      ],
      DEFAULT_ASSERT_OPTS
    );
  }

  /**
   * Navigates to the analysis details page for a specific file and analysis using their aliases.
   *
   * @param {string} fileIdAlias - The alias used to retrieve the file ID.
   * @param {string} analysisIdAlias - The alias used to retrieve the analysis ID.
   */
  doGoToAnalysisDetailsPage(fileIdAlias: string, analysisIdAlias: string) {
    cy.getAliases<string>([fileIdAlias, analysisIdAlias]).then(
      ([fileId, analysisId]) => {
        cy.visit(
          `/dashboard/file/${fileId}/analysis/${analysisId}`,
          DEFAULT_ASSERT_OPTS
        );
      }
    );
  }

  /**
   * Asserts that multiple pieces of text are present on an elemebt.
   *
   * @param {string[]} infoList - An array of text strings to be verified.
   * @param {SelectorMatcherOptions} [opts] - Optional configuration for the text selector.
   */
  assertMultipleTextInfo(infoList: string[], opts?: SelectorMatcherOptions) {
    infoList.forEach((info) =>
      cy
        .findByText(info, {
          exact: false,
          ...opts,
        })
        .should('exist')
    );
  }

  /**
   * Edits the analysis details in the edit drawer by selecting options and entering a reason for the override.
   *
   * @param {Object} params - The parameters for editing the analysis details.
   * @param {boolean | string | undefined} [params.toPassed] - Indicates whether to select 'All future analysis' override option.
   * @param {boolean | string | undefined} [params.riskTextToModifyTo] - The risk text to modify to, used if `toPassed` is false.
   * @param {boolean | string | undefined} [params.allFutureAnalysis] - Indicates whether to select 'All future analysis' or 'Current file only' criteria option.
   * @param {boolean | string | undefined} [params.isInPrjSettingsPage] - Indicates whether the override is on the project settings page.
   */
  doEditAnalysisDetails({
    toPassed,
    riskTextToModifyTo,
    allFutureAnalysis,
    isInPrjSettingsPage,
  }: Record<string, boolean | string | undefined>) {
    // Open override select options
    cy.findByTestId('overrideEditDrawer-overrideForm-overrideToSelect').click();

    cy.get('.ember-power-select-options').within(() => {
      if (toPassed) {
        // Select 'Ignore vulnerability' override option
        cy.findByText(cyTranslate('ignoreVulnerability')).click();
      } else {
        // Select another risk override option
        cy.findByText(String(riskTextToModifyTo), {
          exact: false,
        }).click();
      }
    });

    // Open criteria select options
    cy.findByTestId('overrideEditDrawer-overrideForm-criteriaSelect').click();

    if (!isInPrjSettingsPage) {
      if (allFutureAnalysis) {
        // Select 'All future analysis' override option
        cy.findByText(cyTranslate('allFutureAnalyses')).click();
      } else {
        // Select 'current file' override option
        cy.findByText(cyTranslate('currentFileOnly')).click();
      }
    }

    cy.findByPlaceholderText(
      cyTranslate('editOverrideVulnerability.reasonForOverridePlaceholder')
    )
      .as('editOverrideVulnerabilityReason')
      .should('not.have.value');

    cy.get('@editOverrideVulnerabilityReason')
      .type('Edit Test Reason', { delay: 0 })
      .then(($input) => {
        expect($input.val()).to.equal('Edit Test Reason');
      });
  }

  /**
   * Asserts that the edited analysis information is correctly displayed in the UI.
   *
   * @param {string} analysisAlias - The alias of the analysis item to be validated.
   * @param {Object} info - The information to check against the displayed values.
   * @param {string} info.riskTextToModifyTo - The modified risk text to verify in the UI.
   * @param {string} info.riskyAnalysisRiskText - The risky analysis risk text to verify in the UI.
   * @param {boolean} [info.isInPrjSettingsPage] - Optional flag indicating whether the information is in the project settings page.
   */
  assertEditedAnalysisInfo(
    analysisAlias: string,
    info: {
      riskTextToModifyTo: string;
      riskyAnalysisRiskText: string;
      isInPrjSettingsPage?: boolean;
    }
  ) {
    cy.get<AnalysisItemProps>(analysisAlias).then(
      ({
        overridden_risk,
        override_criteria,
        overridden_date,
        overridden_risk_comment,
        overridden_by,
      }) => {
        const overriddenRisk = RISK_TEXT_MAP[overridden_risk as RiskTextKeys];

        const overriddenCriteria =
          ANALYSIS_OVERRIDE_CRITERIA[
            override_criteria as keyof typeof ANALYSIS_OVERRIDE_CRITERIA
          ];

        const overriddenDate = dayjs(overridden_date).format('MMM DD, YYYY');

        cy.findByTestId(
          'overrideEditDrawer-overrideDetails-overriddenRiskInfo'
        ).within(() =>
          this.assertMultipleTextInfo([
            overridden_risk_comment,
            overriddenRisk,
            overriddenCriteria,
          ])
        );

        // Check for overridden props and their titles
        cy.findByTestId(
          'overrideEditDrawer-overrideDetails-auditDetails'
        ).within(() => {
          this.assertMultipleTextInfo(
            [
              cyTranslate('editOverrideVulnerability.overriddenOn'),
              overriddenDate,
              !info.isInPrjSettingsPage
                ? (info.riskTextToModifyTo,
                  info.riskyAnalysisRiskText,
                  cyTranslate('editOverrideVulnerability.overriddenSeverity'),
                  cyTranslate('editOverrideVulnerability.overriddenBy'),
                  overridden_by)
                : null,
            ].filter(Boolean) as string[]
          );
        });
      }
    );
  }

  /**
   * Resets or removes analysis overrides based on provided options.
   *
   * @param {Object} params - The parameters for resetting or removing overrides.
   * @param {boolean} [params.resetForCurrentFileOnly] - Indicates whether to reset overrides for the current file only.
   * @param {boolean} [params.removeOverride] - Indicates whether to remove overrides for all future analyses.
   * @param {boolean} [params.allFutureAnalysis] - Indicates whether to confirm reset or removal for all future analyses.
   * @param {boolean} [params.isInPrjSettingsPage] - Indicates whether the action is performed in the project settings page.
   */
  doResetAnalysis({
    resetForCurrentFileOnly,
    removeOverride,
    allFutureAnalysis,
    isInPrjSettingsPage,
  }: Record<string, boolean | undefined>) {
    // RESET Edited Analysis
    this.findBtnByLabelAndClick(cyTranslate('resetOverride'));

    if (allFutureAnalysis && !isInPrjSettingsPage) {
      this.assertMultipleTextInfo(
        [
          cyTranslate(
            'fileAnalysisDetails.currentFileResetOrRemoveOverrideConfirmTitle'
          ),
          cyTranslate('fileAnalysisDetails.editAnalysisResetConfirmNoteText'),
          cyTranslate('fileAnalysisDetails.editAnalysisResetConfirmNoteTitle'),
        ],
        DEFAULT_ASSERT_OPTS
      );
    }

    if (resetForCurrentFileOnly && !isInPrjSettingsPage) {
      // Reset override for all future analysis
      this.findBtnByLabelAndClick(
        cyTranslate('fileAnalysisDetails.resetForTheCurrentFile')
      );
    } else if (removeOverride && !isInPrjSettingsPage) {
      // Remove override for all future analyses
      this.findBtnByLabelAndClick(
        cyTranslate('fileAnalysisDetails.removeOverride')
      );
    } else {
      this.findBtnByLabelAndClick(cyTranslate('yes'));
    }

    const resetConfirmText = isInPrjSettingsPage
      ? cyTranslate(
          'projectSettings.vulnerabilityPreference.resetSuccessMessage'
        )
      : removeOverride
        ? cyTranslate('fileAnalysisDetails.removeOverrideSuccessMessage')
        : cyTranslate('fileAnalysisDetails.currentFileResetSuccessMessage');

    // Text confirmation of reset
    cy.findByText(resetConfirmText, {
      ...DEFAULT_ASSERT_OPTS,
      exact: false,
    }).should('exist');
  }
}
