export default function() {

  this.get('/projects', function() {
    return {
      "projects": [{
		"jiraProject": null,
		"packageName": "com.appknox.dvia",
		"githubRepo": null,
		"fileCount": null,
		"owner": 1,
		"url": null,
		"createdOn": "2016-08-21 05:43:03.278720+00:00",
		"updatedOn": "2016-08-21 05:43:03.289807+00:00",
		"uuid": "f6b2a0f5-868a-485d-84c7-55c18b42239d",
		"id": 496,
		"testPassword": null,
		"type": "project",
		"platform": 1,
		"name": "DVIA                            ",
		"testUser": null
	}, {
		"jiraProject": null,
		"packageName": "in.swiggy.android",
		"githubRepo": null,
		"fileCount": null,
		"owner": 1,
		"url": null,
		"createdOn": "2016-08-21 05:43:05.262176+00:00",
		"updatedOn": "2016-08-23 11:05:26.839405+00:00",
		"uuid": "b330b63b-9c98-4ddc-89aa-9d9fa9dbe48c",
		"id": 497,
		"testPassword": null,
		"type": "project",
		"platform": 0,
		"name": "Swiggy",
		"testUser": null
	}, {
		"jiraProject": null,
		"packageName": "org.devgeeks.pixfor",
		"githubRepo": null,
		"fileCount": null,
		"owner": 1,
		"url": null,
		"createdOn": "2016-08-21 05:43:15.905786+00:00",
		"updatedOn": "2016-08-21 05:43:15.914677+00:00",
		"uuid": "ee46acd8-6348-4971-9539-b7cbe4437ee6",
		"id": 498,
		"testPassword": null,
		"type": "project",
		"platform": 0,
		"name": "Pixfor",
		"testUser": null
	}, {
		"jiraProject": null,
		"packageName": "com.azuga.smartfleet",
		"githubRepo": null,
		"fileCount": null,
		"owner": 1,
		"url": null,
		"createdOn": "2016-08-26 07:55:24.009569+00:00",
		"updatedOn": "2016-08-26 07:55:24.021916+00:00",
		"uuid": "2b7031d5-95cf-427d-9dc9-1f5710e6a0e7",
		"id": 554,
		"testPassword": null,
		"type": "project",
		"platform": 0,
		"name": "Azuga FleetMobile",
		"testUser": null
	}, {
		"jiraProject": null,
		"packageName": "com.finatics.finomena",
		"githubRepo": null,
		"fileCount": null,
		"owner": 1,
		"url": null,
		"createdOn": "2016-08-24 14:41:52.594581+00:00",
		"updatedOn": "2016-08-24 14:41:52.602665+00:00",
		"uuid": "f0263ab9-1533-42fc-a415-c50aed5bb0c2",
		"id": 534,
		"testPassword": null,
		"type": "project",
		"platform": 0,
		"name": "Finomena",
		"testUser": null
	}, {
		"jiraProject": null,
		"packageName": "com.numberman.aboutnumber",
		"githubRepo": null,
		"fileCount": null,
		"owner": 1,
		"url": null,
		"createdOn": "2016-08-24 15:03:49.795091+00:00",
		"updatedOn": "2016-08-24 15:03:49.805413+00:00",
		"uuid": "a76dad01-a13e-4ba9-99f3-3f19a2303fb7",
		"id": 535,
		"testPassword": null,
		"type": "project",
		"platform": 0,
		"name": "Strike",
		"testUser": null
	}, {
		"jiraProject": null,
		"packageName": "com.azuga.ruc",
		"githubRepo": null,
		"fileCount": null,
		"owner": 1,
		"url": null,
		"createdOn": "2016-08-26 07:55:35.937021+00:00",
		"updatedOn": "2016-08-26 07:55:35.945284+00:00",
		"uuid": "33c7db92-5ad3-4866-b7f0-fa98db77f97d",
		"id": 555,
		"testPassword": null,
		"type": "project",
		"platform": 0,
		"name": "Azuga Insight",
		"testUser": null
	}, {
		"jiraProject": null,
		"packageName": "com.oyo.consumer",
		"githubRepo": null,
		"fileCount": null,
		"owner": 1,
		"url": null,
		"createdOn": "2016-08-25 07:04:15.600750+00:00",
		"updatedOn": "2016-08-25 07:04:15.609414+00:00",
		"uuid": "debc4f69-97bb-4709-9bc6-be5af9132b6a",
		"id": 540,
		"testPassword": null,
		"type": "project",
		"platform": 0,
		"name": "OYO",
		"testUser": null
	}, {
		"jiraProject": null,
		"packageName": "and.dev.azuga",
		"githubRepo": null,
		"fileCount": null,
		"owner": 1,
		"url": null,
		"createdOn": "2016-08-26 07:55:21.819020+00:00",
		"updatedOn": "2016-08-26 07:55:21.827387+00:00",
		"uuid": "a468a8b6-ce96-42dc-a354-2a8bcd4ed3b5",
		"id": 553,
		"testPassword": null,
		"type": "project",
		"platform": 0,
		"name": "DriveSafe",
		"testUser": null
	  }]
   }
  });

  this.get('/files', function() {
    return {
      "files": [{
		"createdOn": "2016-08-23 11:05:26.879256+00:00",
		"manual": 0,
		"report": "931_in.swiggy.android_19a0e7f6-7d91-440b-9c04-bccd7e752002.pdf",
		"sha1hash": "c420e3553c7936ca6d94d6439d7667bc4adfb8c0",
		"uuid": "19a0e7f6-7d91-440b-9c04-bccd7e752002",
		"updatedOn": "2016-08-23 11:05:26.879284+00:00",
		"isDynamicDone": false,
		"project": 497,
		"type": "file",
		"isStaticDone": false,
		"dynamicStatus": 0,
		"deviceToken": "None",
		"version": "1.5",
		"iconUrl": "https://appknox-production.s3.amazonaws.com/19a0e7f6-7d91-440b-9c04-bccd7e752002.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAJVFM4UJLOXTCBGHA%2F20160920%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20160920T062843Z&X-Amz-Expires=86400&X-Amz-SignedHeaders=host&X-Amz-Signature=0e8fa7073984e020de0e8b325a0f1c77c16f31336328e8d0c68835016bb24da6",
		"id": 931,
		"md5hash": "820adddd9b89aa5d0fa74b6279eb088e",
		"name": "in.swiggy.android"
	}, {
		"createdOn": "2016-08-21 05:43:13.902566+00:00",
		"manual": 0,
		"report": "889_in.swiggy.android_e06d0f4c-70ec-44b2-9961-920928771ce3.pdf",
		"sha1hash": "c420e3553c7936ca6d94d6439d7667bc4adfb8c0",
		"uuid": "e06d0f4c-70ec-44b2-9961-920928771ce3",
		"updatedOn": "2016-08-21 05:43:13.902605+00:00",
		"isDynamicDone": false,
		"project": 497,
		"type": "file",
		"isStaticDone": false,
		"dynamicStatus": 0,
		"deviceToken": "None",
		"version": "1.5",
		"iconUrl": "https://appknox-production.s3.amazonaws.com/e06d0f4c-70ec-44b2-9961-920928771ce3.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAJVFM4UJLOXTCBGHA%2F20160920%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20160920T062843Z&X-Amz-Expires=86400&X-Amz-SignedHeaders=host&X-Amz-Signature=3555634b5bd1c0626d4b70a0d30780f04dfd2fb339fc9ce008fa7344590fb104",
		"id": 889,
		"md5hash": "820adddd9b89aa5d0fa74b6279eb088e",
		"name": "in.swiggy.android"
	}, {
		"createdOn": "2016-08-21 05:43:09.101626+00:00",
		"manual": 0,
		"report": "888_in.swiggy.android_a767c214-42ba-46f6-a5e4-64947562cbb8.pdf",
		"sha1hash": "c420e3553c7936ca6d94d6439d7667bc4adfb8c0",
		"uuid": "a767c214-42ba-46f6-a5e4-64947562cbb8",
		"updatedOn": "2016-08-21 05:43:09.101662+00:00",
		"isDynamicDone": false,
		"project": 497,
		"type": "file",
		"isStaticDone": false,
		"dynamicStatus": 0,
		"deviceToken": "None",
		"version": "1.5",
		"iconUrl": "https://appknox-production.s3.amazonaws.com/a767c214-42ba-46f6-a5e4-64947562cbb8.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAJVFM4UJLOXTCBGHA%2F20160920%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20160920T062844Z&X-Amz-Expires=86400&X-Amz-SignedHeaders=host&X-Amz-Signature=67a878f1995c053f3a2b324ca2a8fb6deb8219261eb54bcbae7d657f4f2b754c",
		"id": 888,
		"md5hash": "820adddd9b89aa5d0fa74b6279eb088e",
		"name": "in.swiggy.android"
	}, {
		"createdOn": "2016-08-21 05:43:05.413428+00:00",
		"manual": 0,
		"report": "887_in.swiggy.android_916aa84d-c0a7-4d1c-85d3-0dec5cf2aa36.pdf",
		"sha1hash": "c420e3553c7936ca6d94d6439d7667bc4adfb8c0",
		"uuid": "916aa84d-c0a7-4d1c-85d3-0dec5cf2aa36",
		"updatedOn": "2016-08-21 05:43:05.413469+00:00",
		"isDynamicDone": false,
		"project": 497,
		"type": "file",
		"isStaticDone": false,
		"dynamicStatus": 0,
		"deviceToken": "None",
		"version": "1.5",
		"iconUrl": "https://appknox-production.s3.amazonaws.com/916aa84d-c0a7-4d1c-85d3-0dec5cf2aa36.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAJVFM4UJLOXTCBGHA%2F20160920%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20160920T062844Z&X-Amz-Expires=86400&X-Amz-SignedHeaders=host&X-Amz-Signature=755bf9ba56a991899a086d7fcc33541f4dab694187b012637c58210d1c1909c8",
		"id": 887,
		"md5hash": "820adddd9b89aa5d0fa74b6279eb088e",
		"name": "in.swiggy.android"
	}]
  }
  });

  this.get('/pricings', function(){
    return {
      "pricings":[
        {
          "id" : 1,
          "name": "Lite",
          "heading": "Single Application Project",
          "sast": "SAST (Static)",
          "dast": "DAST (Dynamic)",
          "uba": "UBA (Manual)",
          "remedition": "Remedition :	1 Session",
          "sla": "SLA	: 3-5 Working Days",
          "scans": "No.of Scans :	Unlimited"
        },
        {
          "id" : 2,
          "name": "Essential",
          "heading": "Two Application Project",
          "sast": "SAST (Static)",
          "dast": "DAST (Dynamic)",
          "uba": "UBA (Manual)",
          "remedition": "Remedition :	3 Session",
          "sla": "SLA	: 3-5 Working Days",
          "scans": "No.of Scans :	Unlimited"
        },
        {
          "id" : 3,
          "name": "Premium",
          "heading": "Three Application Project",
          "sast": "SAST (Static)",
          "dast": "DAST (Dynamic)",
          "uba": "UBA (Manual)",
          "remedition": "Remedition : 5 Session",
          "sla": "SLA	: 3-5 Working Days",
          "scans": "No.of Scans :	Unlimited"
        }
      ]
    }
  });
  this.get('/vulnerabilities', function(){
    return {
      "vulnerabilities": [
    {
    	"description": "Implements naive hostname verification. This HostnameVerifier breaks certificate validation!",
    	"question": "Is the Hostnameverifier for SSL not implemented properly?",
    	"nonCompliant": "<p>The following code inherits javax.net.ssl.SSLContext:</p>\n<pre><span style=' color: Blue;'>public</span> <span style=' color: Blue;'>void</span> HostnameVerifier() {\n    HostnameVerifier hv = <span style=' color: Blue;'>new</span> HostnameVerifier() {\n        @Override\n        <span style=' color: Blue;'>public</span> <span style=' color: Blue;'>boolean</span> verify(String hostname, SSLSession session) {\n            <span style=' color: Green;'>// Always return true -&gt; Accespt any host names</span>\n            <span style=' color: Blue;'>return</span> <span style=' color: Maroon;'>true</span>;\n        }\n    };\n}</pre>\n<p>HostnameVerifier will always return true without checking the contents or verifying the hostname</p>\n",
    	"relatedTo": "<ul>\n    <li><a href=\"http://jvn.jp/en/jp/JVN39218538/\">JVN#39218538</a> Pizza Hut Japan Official Order App for Android has a problem whereby it fails to verify SSL server certificates.</li>\n    <li><a href=\"http://jvn.jp/en/jp/JVN75084836/\">JVN#75084836</a> Yome Collection for Android has a problem with management of IMEI.</li>\n    <li><a href=\"http://jvn.jp/en/jp/JVN68156832/\">JVN#68156832</a> Yafuoku! contains an issue where it fails to verify SSL server certificates</li>\n</ul>",
    	"intro": "<p>Allowing All Hostnames: The app does not verify if the certificate is issued for the URL the client is connecting to.\nFor example, when a client connects to example.com, it will accept a server certificate issued for some-other-domain.com.</p>\n<p>On Android, using HttpURLConnection is recommended for HTTP client implementation.</p>\n",
    	"heading": "Hostname Verifier for SSL/TLS is not properly configured",
    	"businessImplication": "In the event that a user (anonymous or verified) is able to execute over-privileged functionality, the business may experience:\n <ul>\n     <li>Reputational Damage</li>\n     <li>Fraud</li>\n     <li>Information Theft</li>\n </ul>\n",
    	"uuid": "d40e215f-e815-4a23-a47c-4d5610579545",
    	"id": 6,
    	"type": "vulnerabilitie",
    	"name": "Broken hostnameverifier for SSL",
    	"compliant": "<p> The code example shows how to verify hostname using a wrapHostnameVerifier which also checks for custom loaded certificates\n</p>\n<pre><span style=' color: Blue;'>public</span> HostnameVerifier wrapHostnameVerifier(<span style=' color: Blue;'>final</span> HostnameVerifier defaultVerifier) {\n    <span style=' color: Blue;'>if</span> (defaultVerifier == <span style=' color: Blue;'>null</span>)\n        <span style=' color: Blue;'>throw</span> <span style=' color: Blue;'>new</span> IllegalArgumentException(<span style=' color: Maroon;'>\"The default verifier may not be null\"</span>);\n\n    <span style=' color: Blue;'>return</span> <span style=' color: Blue;'>new</span> SecuringHostnameVerifier(defaultVerifier);\n}\n\n\n\n<span style=' color: Blue;'>class</span> SecuringHostnameVerifier <span style=' color: Blue;'>implements</span> HostnameVerifier {\n    <span style=' color: Blue;'>private</span> HostnameVerifier defaultVerifier;\n\n    <span style=' color: Blue;'>public</span> MemorizingHostnameVerifier(HostnameVerifier wrapped) {\n        defaultVerifier = wrapped;\n    }\n\n    @Override\n    <span style=' color: Blue;'>public</span> <span style=' color: Blue;'>boolean</span> verify(String hostname, SSLSession session) {\n        Log.d(<span style=' color: Maroon;'>\"log\"</span>, <span style=' color: Maroon;'>\"hostname verifier for \"</span> + hostname + <span style=' color: Maroon;'>\", trying default verifier first\"</span>);\n        <span style=' color: Green;'>// if the default verifier accepts the hostname, we are done</span>\n        <span style=' color: Blue;'>if</span> (defaultVerifier.verify(hostname, session)) {\n            Log.d(<span style=' color: Maroon;'>\"log\"</span>, <span style=' color: Maroon;'>\"default verifier accepted \"</span> + hostname);\n            <span style=' color: Blue;'>return</span> <span style=' color: Maroon;'>true</span>;\n        }\n        <span style=' color: Green;'>// otherwise, we check if the hostname is an alias for this cert in our keystore</span>\n        <span style=' color: Blue;'>try</span> {\n            X509Certificate cert = (X509Certificate)session.getPeerCertificates()[<span style=' color: Maroon;'>0</span>];\n            <span style=' color: Blue;'>if</span> (cert.equals(appKeyStore.getCertificate(hostname.toLowerCase(Locale.US)))) {\n                Log.d(<span style=' color: Maroon;'>\"log\"</span>, <span style=' color: Maroon;'>\"certificate for \"</span> + hostname + <span style=' color: Maroon;'>\" is in keystore. accepting.\"</span>);\n                <span style=' color: Blue;'>return</span> <span style=' color: Maroon;'>true</span>;\n            } <span style=' color: Blue;'>else</span> {\n                Log.d(<span style=' color: Maroon;'>\"log\"</span>, <span style=' color: Maroon;'>\"server \"</span> + hostname + <span style=' color: Maroon;'>\" provided wrong certificate.\"</span>);\n                <span style=' color: Blue;'>return</span> <span style=' color: Maroon;'>false</span>;\n            }\n        } <span style=' color: Blue;'>catch</span> (Exception e) {\n            e.printStackTrace();\n            <span style=' color: Blue;'>return</span> <span style=' color: Maroon;'>false</span>;\n        }\n    }\n}</pre>\n",
    	"types": [1],
    	"successMessage": "HostNameVerifier for SSL Seems to be verfying hostnames properly, or SSL were not implemented in your application."
    }, {
    	"description": "Implements AllowAllHostname Verifier which might allow hacker to eavesdrop into the connection.",
    	"question": "Does this application has AllowAllHostname Verification?",
    	"nonCompliant": "<p>The following code extends HttpClient class that inherits javax.net.ssl.SSLContext:</p>\n<pre><span style=' color: Blue;'>public</span> <span style=' color: Blue;'>void</span> allowAllHostnameVerifier() {\n    SSLSocketFactory sf = <span style=' color: Blue;'>null</span>;\n\n    sf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\n}</pre>\n<p>\n    This will enable the use of <b>SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER</b> as a result, host name verification that should take place when establishing an SSL connection is disabled and will lead to the same situation as all the certificate is trusted.\n</p>\n",
    	"relatedTo": "<ul>\n    <li><a href=\"http://jvn.jp/en/jp/JVN39218538/\">JVN#39218538</a> Pizza Hut Japan Official Order App for Android has a problem whereby it fails to verify SSL server certificates.</li>\n    <li><a href=\"http://jvn.jp/en/jp/JVN75084836/\">JVN#75084836</a> Yome Collection for Android has a problem with management of IMEI.</li>\n    <li><a href=\"http://jvn.jp/en/jp/JVN68156832/\">JVN#68156832</a> Yafuoku! contains an issue where it fails to verify SSL server certificates</li>\n</ul>",
    	"intro": "<p>Android apps that use SSL/TLS protocols for secure communication should properly verify server certificates which should verify that the subject (CN) of X.509 certificate and the URL matches\n</p>\n\n<p><b>Allowing All Hostnames</b>: The app does not verify if the certificate issued is for the URL the client is connecting to. For example, when a client connects to example.com, it will accept a server certificate issued for some-other-domain.com.</p>\n\n<p>On Android, using HttpURLConnection is recommended for HTTP client implementation.</p>\n",
    	"heading": "Properly Verify Server Certificate on SSL/TLS",
    	"businessImplication": "In the event that a user (anonymous or verified) is able to execute over-privileged functionality, the business may experience:\n<ul>\n    <li>Reputational Damage</li>\n    <li>Fraud</li>\n    <li>Information Theft</li>\n</ul>\n",
    	"uuid": "c0c74089-9750-4120-b53e-21005c50c2b9",
    	"id": 8,
    	"type": "vulnerabilitie",
    	"name": "Hostname Verifier Allows all hostname",
    	"compliant": "<p>\n    Never use <b>SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER</b> in production code\n<p>\n    Please refer to \"<a href=\"http://www.jssec.org/dl/android_securecoding.pdf\">Android Application Secure Design/Secure Coding Guidebook</a>\", Section 5.4 Communicate by HTTPS.\n</p>\n",
    	"types": [1],
    	"successMessage": "AllowAllHostname verifier seems to be disabled."
    }, {
    	"description": "NSUserDefaults is an alternative way by which data can be stored in plist files ",
    	"question": "Does this application store sensitive information in NSUserDefaults?",
    	"nonCompliant": "",
    	"relatedTo": "",
    	"intro": "<p>\n    NSUserDefaults are stored in plist in binary format, with no encryption, and is stored in your app's directory. Any user can edit, see, share, move and whatever they want to. Thus, if any sensitive information is stored in NSUserDefaults then it may reach wrong hands &amp; can be used for personal use later on.\n</p>\n",
    	"heading": "Avoid storing sensitive data in NSUserDefaults",
    	"businessImplication": "<p>\n    Sensitive information can get compromised since plist files store data unencrypted.\n</p>\n",
    	"uuid": "2a129e6c-1ed4-4e2b-baaa-5e7269a36349",
    	"id": 22,
    	"type": "vulnerabilitie",
    	"name": "Avoid storing sensitive data in NSUserDefaults",
    	"compliant": "<p>\n    Avoid using NSUserDefaults to store sensitive pieces of information as it stores data in plist files which contain information in unencrypted form.\n</p>\n",
    	"types": [2],
    	"successMessage": "this application doesn't store sensitive information in NSUserDefaults"
    }, {
    	"description": "Application seems to be using extra permissions which are not really needed",
    	"question": "Is your Application having over-privileged permission?",
    	"nonCompliant": "",
    	"relatedTo": "",
    	"intro": "<p>\n    An app might request a user for certain permissions, like access to SD card, contacts, social profiles, etc. which has not actually been invoked while the scan was running. We list out all these permissions so that you can optimize your app and follow proper compliance checks.\n</p>\n",
    	"heading": "Do not ask for permissions that may not be used",
    	"businessImplication": "<p>\n    Users may not download your app when presented with a long list of permissions. Imagine a flashlight app requesting access to SD card, camera, contacts, SMS and more. This is an invitation to poor ratings and reviews on App Stores. This also breaks compliance standards.\n</p>\n",
    	"uuid": "1377e56e-1b38-4589-9dbf-d09e5aefd90b",
    	"id": 10,
    	"type": "vulnerabilitie",
    	"name": "Unused Permissions",
    	"compliant": "<p>\n    Do not request for permissions beyond what your app actually needs\n</p>\n",
    	"types": [1],
    	"successMessage": "Application seems to have exact set of permissions required"
    }, {
    	"description": "Application seems to use JavascriptInterface, using that, an attacker can do a Remote Code Execution on your application and steal sensitive informations.",
    	"question": "Is your Application using JavascriptInterface? Is the Application over non-SSL or broken SSL Implementation?",
    	"nonCompliant": "<p>\n    This non-compliant code example shows an application that calls the addJavascriptInterface() method, and hence is not secure for API level JELLY_BEAN and lower.\n</p>\n\n<pre>WebView webView = <span style=' color: Blue;'>new</span> WebView(<span style=' color: Blue;'>this</span>);\nsetContentView(webView);...\n<span style=' color: Blue;'>class</span> JsObject {\n<span style=' color: Blue;'>private</span> String sensitiveInformation;\n\n...\n<span style=' color: Blue;'>public</span> String toString() {\n    <span style=' color: Blue;'>return</span> sensitiveInformation;\n}\n\n}\nwebView.addJavascriptInterface(<span style=' color: Blue;'>new</span> JsObject(), <span style=' color: Maroon;'>\"injectedObject\"</span>);\nwebView.loadData(<span style=' color: Maroon;'>\"\"</span>, <span style=' color: Maroon;'>\"text/html\"</span>, <span style=' color: Blue;'>null</span>);\nwebView.loadUrl(<span style=' color: Maroon;'>\"http://www.example.com\"</span>);\n</pre>\n\n<p>\n    JavaScript can now control the host. Java reflection could be used to access any of the public methods of an injected object, using the permissions of the app.\n</p>\n",
    	"relatedTo": "",
    	"intro": "<p>\n    For API level JELLY_BEAN or below, allowing an app to use the addJavascriptInterface method with untrusted content in a WebView leaves the app vulnerable to scripting attacks using reflection to access public methods from JavaScript.  Untrusted content examples include content from any HTTP URL (as opposed to HTTPS) and user-provided content. The method addJavascriptInterface(Object, String) is called from the android.webkit.WebView class. Sensitive data and app control should not be exposed to scripting attacks.\n</p>",
    	"heading": "Do not provide addJavascriptInterface method access in a WebView which could contain untrusted content. (API level JELLY_BEAN or below)",
    	"businessImplication": "<p>\nThe app may be susceptible to JavaScript scripting attacks from user-supplied content or content from HTTP causing loss of sensitive information.\n</p>\n",
    	"uuid": "e071990d-bdd6-4134-be64-8874098453aa",
    	"id": 11,
    	"type": "vulnerabilitie",
    	"name": "Remote Code Execution Through JavascriptInterface",
    	"compliant": "<ol>\n<li>\n\n    <p>\n        Compliant code could refrain from calling the addJavascriptInterface() method.\n    </p>\n\n    <pre>\nWebView webView = new WebView(this);\nsetContentView(webView);\n    </pre>\n</li>\n<li>\n\n    <p>\n        Another compliant solution is to specify in the app's manifest that the app is only for API levels JELLY_BEAN_MR1 and above. For these API levels, only public methods that are annotated with JavascriptInterface can be accessed from JavaScript. API level 17 is JELLY_BEAN_MR1.\n    </p>\n\n    <pre>\n&lt;manifest&gt;\n&lt;uses-sdk android:minSdkVersion=&quot;17&quot; /&gt;\n...\n \n&lt;/manifest&gt;\n    </pre>\n</li>\n</ol>",
    	"types": [1],
    	"successMessage": "Application is safe from Remote Code execution through JavascriptInterface"
    }, {
    	"description": "YapDB is an alternative to SQLite3 database, used by applications to store data",
    	"question": "Does this application stores data in RealmDB?",
    	"nonCompliant": "",
    	"relatedTo": "",
    	"intro": "<p>\n    Yap databases are used by the applications to store data which can be further used by the application at later stages. However, these databases don't have any built-in support for encryption and hence, all the information is stored in plain-text format in these files. If an application stores user credentials or some sensitive user specific data in this database then it can be accessed by any third party.\n</p>\n",
    	"heading": "Insecured data stored in YapDB",
    	"businessImplication": "<p>\nFailure to use encryption routines may result in the database and its associated data including user credentials getting compromised.\n</p>\n",
    	"uuid": "dbad00bd-00eb-44fe-b36a-9ccce9734ab6",
    	"id": 27,
    	"type": "vulnerabilitie",
    	"name": "Insecured data stored in YapDB",
    	"compliant": "<p>\n    It is suggested to use custom encryption while storing data in Yap databases.\n</p>\n<p>\n    SQLCipher is a SQLite extension that transparently encrypts the entire database, and is available under a BSD-style license. SQLCipher support has been added as a Cocoapod subspec. Simply change your Podfile:\n</p>\n<pre style='color:#000000;background:#ffffff;'>pod <span style='color:#696969; '>'YapDatabase/SQLCipher'</span>\n</pre>\n<p>\n    If you aren't using the SQLCipher subspec, the project won't compile the encryption configuration options to prevent the case of accidentally trying to use encryption when support is not available.\n</p>\n<p>\n    Once the project is configured to use SQLCipher, it then needs to tell YapDatabase the passphrase. This is done by setting the cipherKeyBlock of YapDatabaseOptions.\n</p>\n<pre style='color:#000000;background:#ffffff;'>YapDatabaseOptions <span style='color:#808030; '>*</span>options <span style='color:#808030; '>=</span> <span style='color:#808030; '>[</span><span style='color:#808030; '>[</span>YapDatabaseOptions alloc<span style='color:#808030; '>]</span> init<span style='color:#808030; '>]</span>;\n    options<span style='color:#008c00; '>.</span>corruptAction <span style='color:#808030; '>=</span> YapDatabaseCorruptAction_Fail;\n    options<span style='color:#008c00; '>.</span>cipherKeyBlock <span style='color:#808030; '>=</span> <span style='color:#808030; '>^</span> NSData <span style='color:#808030; '>*</span><span style='color:#808030; '>(</span>void<span style='color:#808030; '>)</span>{\n        <span style='color:#808030; '>/</span><span style='color:#808030; '>/</span> You can also <span style='color:#800000; font-weight:bold; '>do</span> things <span style='color:#808030; '>like</span> fetch from the keychain <span style='color:#800000; font-weight:bold; '>in</span> here.\n        return <span style='color:#808030; '>[</span>@<span style='color:#808030; '>\"</span><span style='color:#0000e6; '>super secure passphrase</span><span style='color:#808030; '>\"</span> dataUsingEncoding:NSUTF8StringEncoding<span style='color:#808030; '>]</span>;\n\n        <span style='color:#808030; '>/</span><span style='color:#808030; '>/</span> Note: The return type <span style='color:#808030; '>is</span> NSData, <span style='color:#808030; '>and</span> does <span style='color:#808030; '>NOT</span> have <span style='color:#800000; font-weight:bold; '>to</span> be a <span style='color:#800000; font-weight:bold; '>string</span> <span style='color:#800000; font-weight:bold; '>in</span> UTF<span style='color:#808030; '>-</span><span style='color:#008c00; '>8</span>.\n        <span style='color:#808030; '>/</span><span style='color:#808030; '>/</span> It can be any kind of blob of data, including randomly generated bytes.\n    };\n\n    self<span style='color:#008c00; '>.</span>database <span style='color:#808030; '>=</span> <span style='color:#808030; '>[</span><span style='color:#808030; '>[</span>YapDatabase alloc<span style='color:#808030; '>]</span> initWithPath:databasePath options:options<span style='color:#808030; '>]</span>;\n</pre>\n\n<p>\n    The cipherKeyBlock helps prevent storing the credentials in memory any longer than necessary. This block will be executed on database setup, and when new connections are made to the database.\n</p>\n",
    	"types": [2],
    	"successMessage": "this application doesn't store sensitive information in YapDB"
    }, {
    	"description": "NSURLConnection is the most common API used for establishing network connections with the server. However, it has been replaced by NSURLSession & deprecated by Apple starting ios 9.0 ",
    	"question": "Does this application uses NSURLConnection?",
    	"nonCompliant": "",
    	"relatedTo": "",
    	"intro": "<p>\n    NSURLConnection is the most common API used for establishing network connections with the server. However, it has been replaced by NSURLSession &amp; deprecated by Apple starting iOS 9.0. NSURLSession provides support for configuring per-session cache, protocol, cookie, and credential policies, rather than sharing them across the app which handles authentication challenge in a more appropriate way.\n</p>\n",
    	"heading": "Deprecated NSURLConnection is used to connect over Internet",
    	"businessImplication": "<p>\n    Using deprecated routines may potentially result in:\n    <ol>\n        <li>Programming errors due to fatal flaws in deprecated methods.</li>\n        <li>Data corruption due to unsafe deprecated methods.</li>\n    </ol>\n</p>\n",
    	"uuid": "29759dc9-8684-4a35-b233-9f97fa7c501e",
    	"id": 28,
    	"type": "vulnerabilitie",
    	"name": "Deprecated API NSURLConnection is used to connect over Internet",
    	"compliant": "<p>\n    It is advisable to use NSURLSession for all types of network connections instead of NSURLConnection because Apple can stop supporting NSURLConnection anytime in near future.\n</p>\n\n<p>NSURLSession is the key object responsible for sending and receiving HTTP requests. It can be created via <i>NSURLSessionConfiguration</i>, which comes in three flavors:</p>\n<ul>\n<li><i>defaultSessionConfiguration</i>: Creates a default configuration object that uses the disk-persisted global cache, credential and cookie storage objects.</li>\n<li><i>ephemeralSessionConfiguration</i>: Similar to the default configuration, except that all session-related data is stored in memory. Think of this as a \"private\" session.</li>\n<li><i>backgroundSessionConfiguration</i>: Lets the session perform upload or download tasks in the background. Transfers continue even when the app itself is suspended or terminated.</li>\n<p>NSURLSessionConfiguration also lets you configure session properties such as timeout values, caching policies and additional HTTP headers. Refer to the documentation for a full list of configuration options.</p>\n\n<h2> Example Implementation</h2>\n<pre style='color:#000000;background:#ffffff;'><span style='color:#696969; '>/* Sent when a download task that has completed a download.  The delegate should </span>\n<span style='color:#696969; '>&#xa0;* copy or move the file at the given location to a new location as it will be </span>\n<span style='color:#696969; '>&#xa0;* removed when the delegate message returns. URLSession:task:didCompleteWithError: will</span>\n<span style='color:#696969; '>&#xa0;* still be called.</span>\n<span style='color:#696969; '>&#xa0;*/</span>\n<span style='color:#808030; '>-</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>void</span><span style='color:#808030; '>)</span>URLSession<span style='color:#800080; '>:</span><span style='color:#808030; '>(</span>NSURLSession <span style='color:#808030; '>*</span><span style='color:#808030; '>)</span>session downloadTask<span style='color:#800080; '>:</span><span style='color:#808030; '>(</span>NSURLSessionDownloadTask <span style='color:#808030; '>*</span><span style='color:#808030; '>)</span>downloadTask\n<span style='color:#e34adc; '>&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;didFinishDownloadingToURL:</span><span style='color:#808030; '>(</span>NSURL <span style='color:#808030; '>*</span><span style='color:#808030; '>)</span>location<span style='color:#800080; '>;</span>\n\n<span style='color:#696969; '>/* Sent periodically to notify the delegate of download progress. */</span>\n<span style='color:#808030; '>-</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>void</span><span style='color:#808030; '>)</span>URLSession<span style='color:#800080; '>:</span><span style='color:#808030; '>(</span>NSURLSession <span style='color:#808030; '>*</span><span style='color:#808030; '>)</span>session downloadTask<span style='color:#800080; '>:</span><span style='color:#808030; '>(</span>NSURLSessionDownloadTask <span style='color:#808030; '>*</span><span style='color:#808030; '>)</span>downloadTask\n<span style='color:#e34adc; '>&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;didWriteData:</span><span style='color:#808030; '>(</span>int64_t<span style='color:#808030; '>)</span>bytesWritten\n<span style='color:#e34adc; '>&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;totalBytesWritten:</span><span style='color:#808030; '>(</span>int64_t<span style='color:#808030; '>)</span>totalBytesWritten\n<span style='color:#e34adc; '>&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;totalBytesExpectedToWrite:</span><span style='color:#808030; '>(</span>int64_t<span style='color:#808030; '>)</span>totalBytesExpectedToWrite<span style='color:#800080; '>;</span>\n\n<span style='color:#696969; '>/* Sent when a download has been resumed. If a download failed with an</span>\n<span style='color:#696969; '>&#xa0;* error, the -userInfo dictionary of the error will contain an</span>\n<span style='color:#696969; '>&#xa0;* NSURLSessionDownloadTaskResumeData key, whose value is the resume</span>\n<span style='color:#696969; '>&#xa0;* data. </span>\n<span style='color:#696969; '>&#xa0;*/</span>\n<span style='color:#808030; '>-</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>void</span><span style='color:#808030; '>)</span>URLSession<span style='color:#800080; '>:</span><span style='color:#808030; '>(</span>NSURLSession <span style='color:#808030; '>*</span><span style='color:#808030; '>)</span>session downloadTask<span style='color:#800080; '>:</span><span style='color:#808030; '>(</span>NSURLSessionDownloadTask <span style='color:#808030; '>*</span><span style='color:#808030; '>)</span>downloadTask\n<span style='color:#e34adc; '>&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;didResumeAtOffset:</span><span style='color:#808030; '>(</span>int64_t<span style='color:#808030; '>)</span>fileOffset\n<span style='color:#e34adc; '>&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;expectedTotalBytes:</span><span style='color:#808030; '>(</span>int64_t<span style='color:#808030; '>)</span>expectedTotalBytes<span style='color:#800080; '>;</span>\n</pre>\n",
    	"types": [2],
    	"successMessage": "this application doesn't uses NSURLConnection to connect over Internet"
    }, {
    	"description": "Data retrieved from a mobile app's server contains malformed data that results in a SQL injetion within the mobile device's local databases. Local SQL injections may result in local malware injection, information theft, and much more",
    	"question": "Am I Vulnerable To SQL Injection through WEB API?",
    	"nonCompliant": "<p>\n    This non-compliant code example shows JDBC code that is vulnerable to SQL injection. The SQL statement SQL accepts unsanitized input arguments.\n</p>\n\n<pre><span style=' color: Blue;'>class</span> Login {\n\n<span style=' color: Blue;'>public</span> <span style=' color: Blue;'>void</span> doPrivilegedAction(String username, String password) <span style=' color: Blue;'>throws</span> SQLException {\n\n    DriverManager.registerDriver(<span style=' color: Blue;'>new</span> com.microsoft.jdbc.sqlserver.SQLServerDriver());\n    Connection connection = DriverManager.getConnection(\n        <span style=' color: Maroon;'>\"jdbc:microsoft:sqlserver://&lt;HOST&gt;:1433\"</span>, <span style=' color: Maroon;'>\"&lt;UID&gt;\"</span>, <span style=' color: Maroon;'>\"&lt;PWD&gt;\"</span>);\n\n    <span style=' color: Blue;'>if</span> (connection != <span style=' color: Blue;'>null</span>) {\n        String sql = <span style=' color: Maroon;'>\"select * from db_user where username = '\"</span> + username +\n            <span style=' color: Maroon;'>\"' and password = '\"</span> + password + <span style=' color: Maroon;'>\"'\"</span>;\n\n        Statement stmt = connection.createStatement();\n        ResultSet rs = stmt.executeQuery(sql);\n        <span style=' color: Blue;'>if</span> (!rs.next()) {\n            <span style=' color: Blue;'>throw</span> <span style=' color: Blue;'>new</span> SecurityException(<span style=' color: Maroon;'>\"User name or Password incorrect\"</span>);\n        }\n        <span style=' color: Green;'>// Authenticated; proceed</span>\n    }\n}\n\n</pre>\n\n<p>\n    If the attacker enters a valid user name securecoding and enters 'OR username = 'securecoding for the password argument, the SQL statement evaluates to select * from db_user where username = '' OR username = 'securecoding' and password='', consequently bypassing the login password check. Similarly, an input ofsomeuser' OR '1' = '1 would bypass both the user name and password checks, granting the attacker unrestricted access.\n</p>\n",
    	"relatedTo": "",
    	"intro": "<p>\n    An SQL injection vulnerability arises when the original SQL query can be altered to form an altogether different query. Execution of this altered query may result in information leaks or data modification. The primary means of preventing SQL injection are validating and sanitizing user input, and parameterizing the query.\n</p>",
    	"heading": "Prevent SQL Injection",
    	"businessImplication": "<p>\n    SQL injection allows the intruder to view and modify data contained in the database. The attacker could also gain much higher privileges over the database over time thus compromising the confidentiality and integrity of the data stored.\n</p>\n",
    	"uuid": "c2254717-7f7b-48f7-89e8-149e1c71cf7c",
    	"id": 13,
    	"type": "vulnerabilitie",
    	"name": "SQL Injection",
    	"compliant": "<p>\n    Input validation is a prerequisite for proper query construction. This compliant solution validates the length of the username and password arguments. It also uses a java.sql.PreparedStatement instead of java.sql.Statement.\n</p>\n\n<pre>\nclass Login {\n    public void doPrivilegedAction(String username, String password) throws SQLException {\n\n        // Ensure that the length of username and password is legitimate \n        if ((username.length() >= 8) || (password.length() >= 20)) {\n            // Handle error\n        }\n\n        DriverManager.registerDriver(new com.microsoft.jdbc.sqlserver.SQLServerDriver());\n        Connection connection = DriverManager.getConnection(\n            \"jdbc:microsoft:sqlserver://<HOST>:1433\", \"<UID>\", \"<PWD>\");\n        if (connection != null) {\n            String sql = \"select * from db_user where username=? and password=?\";\n\n            // Use PreparedStatement for type enforcement\n            PreparedStatement stmt = connection.prepareStatement(sql);\n            stmt.setString(1, username);\n            stmt.setString(2, password);\n            ResultSet rs = stmt.executeQuery();\n\n            if (!rs.next()) {\n                throw new SecurityException(\"User name or Password incorrect\");\n            }\n            // Authenticated; proceed\n        }\n    }\n}\n</pre>\n",
    	"types": [1, 2],
    	"successMessage": "Application is not vulnerable to SQL Injection through Web API"
    }, {
    	"description": "Insecured informations were found in shared preference. One shouldn't use un-encrypted information in SharedPreference.",
    	"question": "Is any sensitive information is leaking through SharedPreference?",
    	"nonCompliant": "<p>This non-compliant code example shows an application that creates a file that is world readable, and hence not secure.</p>\n\n<pre>openFileOutput(<span style=' color: Maroon;'>\"someFile\"</span>, MODE_WORLD_READABLE);</pre>\n\n<p>Any application could read the file and access any data stored in it.</p>\n",
    	"relatedTo": "",
    	"intro": "<p>\n    In Android apps, data can be communicated via intents, or data can be written to files, distributed using shared references, or stored in databases. In all these cases, if the data is sensitive, it is important to keep the data secure. That is, it should not be possible for other apps (or, more strictly, apps with different userids) to be able to access this data, or for the data to be accessible to other programs or people, if the data owner does not intend that.\n</p>\n\n<p>\n    Data security (for non-intent communication channels) can be supported by creating the file, shared preference or database with MODE_PRIVATE on internal storage or with MODE_PRIVATE and encrypted (using secure encryption techniques, and using an encryption key only secure parties/apps have) on external storage. MODE_PRIVATE is a constant defined by the class android.content.Context. It may be used as the mode parameter in the methods openFileOutput(), getSharedPreferences(),\n    andopenOrCreateDatabase() (which are all also defined in the class android.content.Context).\n</p>\n\n<p>\n    Static taint flow analysis can be done for a set of apps, to trace data from each source (an input of data which cannot be fully predicted by static analysis, e.g., text input by a user) to reachable sinks (data output to a location that other applications or methods can access, e.g., sending the data over a Bluetooth connection). Taint flow analysis helps users understand many possible source to sink flows, including flows that include intents and/or static fields.\n</p>",
    	"heading": "Ensure That Sensitive Data is Kept Secure",
    	"businessImplication": "Typically, malicious code steals sensitive information (passwords, session cookies, personally identifiable information, etc). Hence, the associated business impacts include:\n<ul>\n    <li>Fraud</li>\n    <li>Privacy Violations</li>\n</ul>\n",
    	"uuid": "7be0433b-22ff-48a0-89fd-c061d027947f",
    	"id": 14,
    	"type": "vulnerabilitie",
    	"name": "Information in Shared Preference",
    	"compliant": "<p>\n    In this compliant solution the file is created using MODE_PRIVATE, so it can be accessed only by the app that created the file.\n</p>\n\n<pre>\nopenFileOutput(\"someFile\", MODE_PRIVATE);\n</pre>\n",
    	"types": [2],
    	"successMessage": "No lekage of data were found in SharedPreference"
    }, {
    	"description": "Application seems to be using the correct cryptographic encryption method or is not using it at all",
    	"question": "Does the Application use insecure encryption algorithims or configurations?",
    	"nonCompliant": "",
    	"relatedTo": "",
    	"intro": "<p>\n    Using the CCCryptor, one can use common sounding functions such as CCCryptorCreate, CCCryptorUpdate, CCCryptorFinal (or simply CCCrypt() one-shot function) to perform symmetric encryption using different algorithms like AES, 3DES and hardcore security ciphers like RC4, DES, etc.\n</p><p>\nApple supports ECB and CBC mode for their ciphers, and fortunately a developer really needs to explicitly prove stupidity by using ECB since APIs default to CBC, the Cipher Block Chaining mode. What could possibly go wrong? Right, there is some minor thing that is called the \"IV\". Apple supposedly translated the acronym IV to \"Ignorance Vector\" when writing their Common Crypto API man-pages, but we should read \"Initialization Vector\" - used to initialize the very first block of cipher text.\n</p>\n",
    	"heading": "Insecure Cryptographic Keys",
    	"businessImplication": "<p>\n    Using an insecure initialization vector allows the attacker to perform frequency analysis on the ciphertext. An all-zero IV would mean that the initial portion of ciphertext is effectively just substition.\n</p>\n",
    	"uuid": "89d90ba2-69a4-41ac-92cb-027e77562fff",
    	"id": 47,
    	"type": "vulnerabilitie",
    	"name": "Insecure Cryptographic Keys",
    	"compliant": "<!-- First and foremost: the key. This is almost always done wrong in the examples you see floating around the Internet. A human-typed password is not an AES key. It has far too little entropy. Using it directly as an AES key opens you up to all kinds of attacks. In particular, lines like this are wrong:\n\n// DO NOT DO THIS\nNSString *password = @\"P4ssW0rd!\";\nchar keyPtr[kCCKeySizeAES128];\n[password getCString:keyPtr maxLength:sizeof( keyPtr ) encoding:NSUTF8StringEncoding];\n// DO NOT DO THIS\nThis key is susceptible to a variety of attacks. It is neither salted nor stretched. If password is longer than the key size, then the password will be truncated. This is not how you build a key. -->\n\n\n<p>The mystical initialization vector (IV) is confusing. In CBC-mode, each 16-byte encryption influences the next 16-byte encryption. It's also the default. The problem is  about block 0. It is a random block -1 which is the IV. </p>\n\n<p>This is listed as \"optional\" in CCCrypt() which is confusing because it isn't really optional in CBC mode. If it is not provided, then it'll automatically generate an all-0 IV. That throws away significant protection on the first block. IV is just 16 random bytes.</p>\n\n<p>The method returns the encrypted data (nil for error), and returns the IV, salt and error by reference.</p>\n\n<pre style='color:#000000;background:#ffffff;'>NSData <span style='color:#808030; '>*</span>iv<span style='color:#808030; '>;</span>\nNSData <span style='color:#808030; '>*</span>salt<span style='color:#808030; '>;</span>\nNSError <span style='color:#808030; '>*</span><span style='color:#800000; font-weight:bold; '>error</span><span style='color:#808030; '>;</span>\nNSData <span style='color:#808030; '>*</span>encryptedData <span style='color:#808030; '>=</span> <span style='color:#808030; '>[</span>RNCryptManager encryptedDataForData<span style='color:#808030; '>:</span>plaintextData\n                                                    password<span style='color:#808030; '>:</span>password\n                                                          iv<span style='color:#808030; '>:</span><span style='color:#808030; '>&amp;</span>iv\n                                                        salt<span style='color:#808030; '>:</span><span style='color:#808030; '>&amp;</span>salt\n                                                       <span style='color:#800000; font-weight:bold; '>error</span><span style='color:#808030; '>:</span><span style='color:#808030; '>&amp;</span><span style='color:#800000; font-weight:bold; '>error</span><span style='color:#808030; '>]</span><span style='color:#808030; '>;</span>\n</pre>\n\n\n<h3> Example Implementation</p>\n\n<pre style='color:#000000;background:#ffffff;'><span style='color:#004a43; '>#</span><span style='color:#004a43; '>import </span><span style='color:#808030; '>&lt;</span><span style='color:#004a43; '>CommonCrypto</span><span style='color:#808030; '>/</span><span style='color:#004a43; '>CommonCryptor</span><span style='color:#808030; '>.</span><span style='color:#004a43; '>h</span><span style='color:#808030; '>></span>\n<span style='color:#004a43; '>#</span><span style='color:#004a43; '>import </span><span style='color:#808030; '>&lt;</span><span style='color:#004a43; '>CommonCrypto</span><span style='color:#808030; '>/</span><span style='color:#004a43; '>CommonKeyDerivation</span><span style='color:#808030; '>.</span><span style='color:#004a43; '>h</span><span style='color:#808030; '>></span>\n\nNSString <span style='color:#808030; '>*</span> <span style='color:#800000; font-weight:bold; '>const</span>\nkRNCryptManagerErrorDomain <span style='color:#808030; '>=</span> <span style='color:#808030; '>@</span><span style='color:#800000; '>\"</span><span style='color:#0000e6; '>net.robnapier.RNCryptManager</span><span style='color:#800000; '>\"</span><span style='color:#800080; '>;</span>\n\n<span style='color:#800000; font-weight:bold; '>const</span> CCAlgorithm kAlgorithm <span style='color:#808030; '>=</span> kCCAlgorithmAES128<span style='color:#800080; '>;</span>\n<span style='color:#800000; font-weight:bold; '>const</span> NSUInteger kAlgorithmKeySize <span style='color:#808030; '>=</span> kCCKeySizeAES128<span style='color:#800080; '>;</span>\n<span style='color:#800000; font-weight:bold; '>const</span> NSUInteger kAlgorithmBlockSize <span style='color:#808030; '>=</span> kCCBlockSizeAES128<span style='color:#800080; '>;</span>\n<span style='color:#800000; font-weight:bold; '>const</span> NSUInteger kAlgorithmIVSize <span style='color:#808030; '>=</span> kCCBlockSizeAES128<span style='color:#800080; '>;</span>\n<span style='color:#800000; font-weight:bold; '>const</span> NSUInteger kPBKDFSaltSize <span style='color:#808030; '>=</span> <span style='color:#008c00; '>8</span><span style='color:#800080; '>;</span>\n<span style='color:#800000; font-weight:bold; '>const</span> NSUInteger kPBKDFRounds <span style='color:#808030; '>=</span> <span style='color:#008c00; '>10000</span><span style='color:#800080; '>;</span>  <span style='color:#696969; '>// ~80ms on an iPhone 4</span>\n\n<span style='color:#696969; '>// ===================</span>\n\n<span style='color:#808030; '>+</span> <span style='color:#808030; '>(</span>NSData <span style='color:#808030; '>*</span><span style='color:#808030; '>)</span>encryptedDataForData<span style='color:#800080; '>:</span><span style='color:#808030; '>(</span>NSData <span style='color:#808030; '>*</span><span style='color:#808030; '>)</span>data\n<span style='color:#e34adc; '>&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;password:</span><span style='color:#808030; '>(</span>NSString <span style='color:#808030; '>*</span><span style='color:#808030; '>)</span>password\n<span style='color:#e34adc; '>&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;iv:</span><span style='color:#808030; '>(</span>NSData <span style='color:#808030; '>*</span><span style='color:#808030; '>*</span><span style='color:#808030; '>)</span>iv\n<span style='color:#e34adc; '>&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;salt:</span><span style='color:#808030; '>(</span>NSData <span style='color:#808030; '>*</span><span style='color:#808030; '>*</span><span style='color:#808030; '>)</span>salt\n<span style='color:#e34adc; '>&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;error:</span><span style='color:#808030; '>(</span>NSError <span style='color:#808030; '>*</span><span style='color:#808030; '>*</span><span style='color:#808030; '>)</span>error <span style='color:#800080; '>{</span>\n  NSAssert<span style='color:#808030; '>(</span>iv<span style='color:#808030; '>,</span> <span style='color:#808030; '>@</span><span style='color:#800000; '>\"</span><span style='color:#0000e6; '>IV must not be NULL</span><span style='color:#800000; '>\"</span><span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>\n  NSAssert<span style='color:#808030; '>(</span>salt<span style='color:#808030; '>,</span> <span style='color:#808030; '>@</span><span style='color:#800000; '>\"</span><span style='color:#0000e6; '>salt must not be NULL</span><span style='color:#800000; '>\"</span><span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>\n\n  <span style='color:#808030; '>*</span>iv <span style='color:#808030; '>=</span> <span style='color:#808030; '>[</span>self randomDataOfLength<span style='color:#800080; '>:</span>kAlgorithmIVSize<span style='color:#808030; '>]</span><span style='color:#800080; '>;</span>\n  <span style='color:#808030; '>*</span>salt <span style='color:#808030; '>=</span> <span style='color:#808030; '>[</span>self randomDataOfLength<span style='color:#800080; '>:</span>kPBKDFSaltSize<span style='color:#808030; '>]</span><span style='color:#800080; '>;</span>\n\n  NSData <span style='color:#808030; '>*</span>key <span style='color:#808030; '>=</span> <span style='color:#808030; '>[</span>self AESKeyForPassword<span style='color:#800080; '>:</span>password salt<span style='color:#800080; '>:</span><span style='color:#808030; '>*</span>salt<span style='color:#808030; '>]</span><span style='color:#800080; '>;</span>\n\n  <span style='color:#603000; '>size_t</span> outLength<span style='color:#800080; '>;</span>\n  NSMutableData <span style='color:#808030; '>*</span>\n  cipherData <span style='color:#808030; '>=</span> <span style='color:#808030; '>[</span>NSMutableData dataWithLength<span style='color:#800080; '>:</span>data<span style='color:#808030; '>.</span>length <span style='color:#808030; '>+</span>\n                kAlgorithmBlockSize<span style='color:#808030; '>]</span><span style='color:#800080; '>;</span>\n\n  CCCryptorStatus\n  result <span style='color:#808030; '>=</span> CCCrypt<span style='color:#808030; '>(</span>kCCEncrypt<span style='color:#808030; '>,</span> <span style='color:#696969; '>// operation</span>\n                   kAlgorithm<span style='color:#808030; '>,</span> <span style='color:#696969; '>// Algorithm</span>\n                   kCCOptionPKCS7Padding<span style='color:#808030; '>,</span> <span style='color:#696969; '>// options</span>\n                   key<span style='color:#808030; '>.</span>bytes<span style='color:#808030; '>,</span> <span style='color:#696969; '>// key</span>\n                   key<span style='color:#808030; '>.</span>length<span style='color:#808030; '>,</span> <span style='color:#696969; '>// keylength</span>\n                   <span style='color:#808030; '>(</span><span style='color:#808030; '>*</span>iv<span style='color:#808030; '>)</span><span style='color:#808030; '>.</span>bytes<span style='color:#808030; '>,</span><span style='color:#696969; '>// iv</span>\n                   data<span style='color:#808030; '>.</span>bytes<span style='color:#808030; '>,</span> <span style='color:#696969; '>// dataIn</span>\n                   data<span style='color:#808030; '>.</span>length<span style='color:#808030; '>,</span> <span style='color:#696969; '>// dataInLength,</span>\n                   cipherData<span style='color:#808030; '>.</span>mutableBytes<span style='color:#808030; '>,</span> <span style='color:#696969; '>// dataOut</span>\n                   cipherData<span style='color:#808030; '>.</span>length<span style='color:#808030; '>,</span> <span style='color:#696969; '>// dataOutAvailable</span>\n                   <span style='color:#808030; '>&amp;</span>outLength<span style='color:#808030; '>)</span><span style='color:#800080; '>;</span> <span style='color:#696969; '>// dataOutMoved</span>\n\n  <span style='color:#800000; font-weight:bold; '>if</span> <span style='color:#808030; '>(</span>result <span style='color:#808030; '>=</span><span style='color:#808030; '>=</span> kCCSuccess<span style='color:#808030; '>)</span> <span style='color:#800080; '>{</span>\n    cipherData<span style='color:#808030; '>.</span>length <span style='color:#808030; '>=</span> outLength<span style='color:#800080; '>;</span>\n  <span style='color:#800080; '>}</span>\n  <span style='color:#800000; font-weight:bold; '>else</span> <span style='color:#800080; '>{</span>\n    <span style='color:#800000; font-weight:bold; '>if</span> <span style='color:#808030; '>(</span>error<span style='color:#808030; '>)</span> <span style='color:#800080; '>{</span>\n      <span style='color:#808030; '>*</span>error <span style='color:#808030; '>=</span> <span style='color:#808030; '>[</span>NSError errorWithDomain<span style='color:#800080; '>:</span>kRNCryptManagerErrorDomain\n                                   code<span style='color:#800080; '>:</span>result\n                               userInfo<span style='color:#800080; '>:</span>nil<span style='color:#808030; '>]</span><span style='color:#800080; '>;</span>\n    <span style='color:#800080; '>}</span>\n    <span style='color:#800000; font-weight:bold; '>return</span> nil<span style='color:#800080; '>;</span>\n  <span style='color:#800080; '>}</span>\n\n  <span style='color:#800000; font-weight:bold; '>return</span> cipherData<span style='color:#800080; '>;</span>\n<span style='color:#800080; '>}</span>\n\n<span style='color:#696969; '>// ===================</span>\n\n<span style='color:#808030; '>+</span> <span style='color:#808030; '>(</span>NSData <span style='color:#808030; '>*</span><span style='color:#808030; '>)</span>randomDataOfLength<span style='color:#800080; '>:</span><span style='color:#808030; '>(</span><span style='color:#603000; '>size_t</span><span style='color:#808030; '>)</span>length <span style='color:#800080; '>{</span>\n  NSMutableData <span style='color:#808030; '>*</span>data <span style='color:#808030; '>=</span> <span style='color:#808030; '>[</span>NSMutableData dataWithLength<span style='color:#800080; '>:</span>length<span style='color:#808030; '>]</span><span style='color:#800080; '>;</span>\n\n  <span style='color:#800000; font-weight:bold; '>int</span> result <span style='color:#808030; '>=</span> SecRandomCopyBytes<span style='color:#808030; '>(</span>kSecRandomDefault<span style='color:#808030; '>,</span>\n                                  length<span style='color:#808030; '>,</span>\n                                  data<span style='color:#808030; '>.</span>mutableBytes<span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>\n  NSAssert<span style='color:#808030; '>(</span>result <span style='color:#808030; '>=</span><span style='color:#808030; '>=</span> <span style='color:#008c00; '>0</span><span style='color:#808030; '>,</span> <span style='color:#808030; '>@</span><span style='color:#800000; '>\"</span><span style='color:#0000e6; '>Unable to generate random bytes: </span><span style='color:#007997; '>%d</span><span style='color:#800000; '>\"</span><span style='color:#808030; '>,</span>\n           errno<span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>\n\n  <span style='color:#800000; font-weight:bold; '>return</span> data<span style='color:#800080; '>;</span>\n<span style='color:#800080; '>}</span>\n\n<span style='color:#696969; '>// ===================</span>\n\n<span style='color:#696969; '>// Replace this with a 10,000 hash calls if you don't have CCKeyDerivationPBKDF</span>\n<span style='color:#808030; '>+</span> <span style='color:#808030; '>(</span>NSData <span style='color:#808030; '>*</span><span style='color:#808030; '>)</span>AESKeyForPassword<span style='color:#800080; '>:</span><span style='color:#808030; '>(</span>NSString <span style='color:#808030; '>*</span><span style='color:#808030; '>)</span>password\n<span style='color:#e34adc; '>&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;salt:</span><span style='color:#808030; '>(</span>NSData <span style='color:#808030; '>*</span><span style='color:#808030; '>)</span>salt <span style='color:#800080; '>{</span>\n  NSMutableData <span style='color:#808030; '>*</span>\n  derivedKey <span style='color:#808030; '>=</span> <span style='color:#808030; '>[</span>NSMutableData dataWithLength<span style='color:#800080; '>:</span>kAlgorithmKeySize<span style='color:#808030; '>]</span><span style='color:#800080; '>;</span>\n\n  <span style='color:#800000; font-weight:bold; '>int</span>\n  result <span style='color:#808030; '>=</span> CCKeyDerivationPBKDF<span style='color:#808030; '>(</span>kCCPBKDF2<span style='color:#808030; '>,</span>            <span style='color:#696969; '>// algorithm</span>\n                                password<span style='color:#808030; '>.</span>UTF8String<span style='color:#808030; '>,</span>  <span style='color:#696969; '>// password</span>\n                                <span style='color:#808030; '>[</span>password lengthOfBytesUsingEncoding<span style='color:#800080; '>:</span>NSUTF8StringEncoding<span style='color:#808030; '>]</span><span style='color:#808030; '>,</span>  <span style='color:#696969; '>// passwordLength</span>\n                                salt<span style='color:#808030; '>.</span>bytes<span style='color:#808030; '>,</span>           <span style='color:#696969; '>// salt</span>\n                                salt<span style='color:#808030; '>.</span>length<span style='color:#808030; '>,</span>          <span style='color:#696969; '>// saltLen</span>\n                                kCCPRFHmacAlgSHA1<span style='color:#808030; '>,</span>    <span style='color:#696969; '>// PRF</span>\n                                kPBKDFRounds<span style='color:#808030; '>,</span>         <span style='color:#696969; '>// rounds</span>\n                                derivedKey<span style='color:#808030; '>.</span>mutableBytes<span style='color:#808030; '>,</span> <span style='color:#696969; '>// derivedKey</span>\n                                derivedKey<span style='color:#808030; '>.</span>length<span style='color:#808030; '>)</span><span style='color:#800080; '>;</span> <span style='color:#696969; '>// derivedKeyLen</span>\n\n  <span style='color:#696969; '>// Do not log password here</span>\n  NSAssert<span style='color:#808030; '>(</span>result <span style='color:#808030; '>=</span><span style='color:#808030; '>=</span> kCCSuccess<span style='color:#808030; '>,</span>\n           <span style='color:#808030; '>@</span><span style='color:#800000; '>\"</span><span style='color:#0000e6; '>Unable to create AES key for password: </span><span style='color:#007997; '>%d</span><span style='color:#800000; '>\"</span><span style='color:#808030; '>,</span> result<span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>\n\n  <span style='color:#800000; font-weight:bold; '>return</span> derivedKey<span style='color:#800080; '>;</span>\n<span style='color:#800080; '>}</span>\n</pre>\n",
    	"types": [2],
    	"successMessage": "The application seems to be using proper encryption mechanism or doesn't implements encryption"
    }, {
    	"description": "Logical Flaws through API which can bypass Authorization and get information about other Users and Reset Passwords. Authorization and Authenticated sessions were not properly validated on both Client or Server Side",
    	"question": "Was Logical Flaws found in the API?",
    	"nonCompliant": "",
    	"relatedTo": "",
    	"intro": "<p> Most security problems are weaknesses in an application that result from a broken or missing security control (authentication, access control, input validation, etc.). By contrast, business logic vulnerabilities are ways of using the legitimate processing flow of an application in a way that results in a negative consequence to the organization.\n</p>\n<p>Too often, the business logic category is used for vulnerabilities that can't be scanned for automatically. This makes it very difficult to apply any kind of categorization scheme. Business logic problems are different from authentication problems and every other category. There are many signficant business logic vulnerabilities, but they are far less common than the type of items.</p>\n",
    	"heading": "Business Logic Vulnerability.",
    	"businessImplication": "",
    	"uuid": "0fb89032-2b94-4dcd-94e1-21c2e49d14f9",
    	"id": 19,
    	"type": "vulnerabilitie",
    	"name": "Business Logic",
    	"compliant": "",
    	"types": [3],
    	"successMessage": "No logical flaws were found"
    }, {
    	"description": "Debug Logs are usually left enabled during application development. These application logs are easily accessible via XCode or by root access to the device.",
    	"question": "Does this application logging in the system logs?",
    	"nonCompliant": "",
    	"relatedTo": "",
    	"intro": "<p>\n    Applications tend to add some data in logs for debugging purpose. If sensitive data is shown in the application logs then it may lead to leakage of data.\n</p>\n",
    	"heading": "Carefully Manage DEBUG Logs in NSLog",
    	"businessImplication": "<p>Sensitive data can inadvertently leak into the logs and may aid in further attacks</p>\n",
    	"uuid": "56f3f48c-24e1-43c1-b4f3-d1af10ff6608",
    	"id": 20,
    	"type": "vulnerabilitie",
    	"name": "Carefully Manage DEBUG Logs in NSLog",
    	"compliant": "<p>\n    Wipe off the application log at particular intervals or when the user signs out of the application. Do not log any sensitive information.\n</p>\n",
    	"types": [2],
    	"successMessage": "There was no logging done by NSLog in the application"
    }, {
    	"description": "Plist files contain data in plaintext format",
    	"question": "Does this application store sensitive information in Plist Files?",
    	"nonCompliant": "",
    	"relatedTo": "",
    	"intro": "<p>\n    Information Property List Files are the files that contain configuration information about the application executable.  These files are stored in unencrypted form on the device &amp; hence, can be read by anyone by accessing the application sandbox via any third-party tools (up to iOS v8.2), by gaining root access to the device (after v8.2) or by taking an iOS backup.\n</p>\n",
    	"heading": "Dont store sensitive information in Plist Files",
    	"businessImplication": "<p>An attacker can steal sensitive data if they have access to the device or device backup</p>\n",
    	"uuid": "41e1b8e5-6463-48f9-be82-a0b0031da141",
    	"id": 21,
    	"type": "vulnerabilitie",
    	"name": "Dont store sensitive information in Plist Files",
    	"compliant": "<p>\n    It's recommended not to store any sensitive data such as usernames, authentication tokens, passwords, personal information in any of the plist files of the application.\n</p>\n",
    	"types": [2],
    	"successMessage": "this application doesn't store sensitive information in Plist Files"
    }, {
    	"description": "The Android application exports Service for use by other applications, but does not properly restrict which applications can launch the component or access the data it contains.",
    	"question": "Is the Application Service Exported?",
    	"nonCompliant": "",
    	"relatedTo": "",
    	"intro": "<p>\nServices run in the background and do not interact\nwith the user. Downloading a file or decompressing\nan archive are examples of operations that may take\nplace in a Service. Other components can bind to a\nService, which lets the binder invoke methods that are\ndeclared in the target Service's interface. Intents are\nused to start and bind to Services\n</p>\n<p> Exported Services can be called by any other application installed in the phone\n    to bind into the service leading to XAS (Cross Application Scripting)\n</p>\n",
    	"heading": "Android Unprotected Exported Service",
    	"businessImplication": "<p>\n    Attackers may use non-privileged services to intercept and track the user's activity. Furthermore, it may be possible to insert data that may maliciously modify the behaviour of the application.\n</p>\n",
    	"uuid": "a376def0-9e51-4cc0-831d-cfbe24a3c3c4",
    	"id": 40,
    	"type": "vulnerabilitie",
    	"name": "Android Unprotected Exported Service",
    	"compliant": "<p>\n\tIf you are using a Service for sharing data between only your own apps, it is preferable to use the android:protectionLevel attribute set to \"signature\" protection. Signature permissions do not require user confirmation, so they provide a better user experience and more controlled access to the Service when the apps accessing the data are signed with the same key\n</p>\n<p>\n    If the Service is called within itself, then don't export it or use Intent-Filter for custom permissions\n</p>\n",
    	"types": [1],
    	"successMessage": "The Service component in this App seems not to be exported or not implemented"
    }, {
    	"description": "Implements naive certificate check. This TrustManager breaks certificate validation.",
    	"question": "Is the Trust Manager for SSL not implemented properly?",
    	"nonCompliant": "<p>The following code implements a custom MySSLSocketFactory class that inherits javax.net.ssl.SSLContext:</p>\n<pre><span style=' color: Blue;'>public</span> <span style=' color: Blue;'>void</span> emptyTrustManager() <span style=' color: Blue;'>throws</span> IOException, KeyManagementException, NoSuchAlgorithmException {\n    TrustManager tm = <span style=' color: Blue;'>new</span> X509TrustManager() {\n\n        @Override\n        <span style=' color: Blue;'>public</span> <span style=' color: Blue;'>void</span> checkClientTrusted(X509Certificate[] chain,\n                String authType) <span style=' color: Blue;'>throws</span> CertificateException {\n            <span style=' color: Green;'>// Do nothing -&gt; accept any certificates</span>\n        }\n\n        @Override\n        <span style=' color: Blue;'>public</span> <span style=' color: Blue;'>void</span> checkServerTrusted(X509Certificate[] chain,\n                String authType) <span style=' color: Blue;'>throws</span> CertificateException {\n            <span style=' color: Green;'>// Do nothing -&gt; accept any certificates</span>\n        }\n\n        @Override\n        <span style=' color: Blue;'>public</span> X509Certificate[] getAcceptedIssuers() {\n            <span style=' color: Blue;'>return</span> <span style=' color: Blue;'>null</span>;\n        }\n    };\n}\n</pre>\n<p>\nIn the example above, checkClientTrusted()and checkServerTrusted() are overridden to make a blank implementation so that SSLSocketFactory does not verify the SSL certificate. The MySSLSocketFactory class is used to create an instance of HttpClient in another part of the application.\n</p>\n",
    	"relatedTo": "<ul>\n    <li><a href=\"http://jvn.jp/en/jp/JVN39218538/\">JVN#39218538</a> Pizza Hut Japan Official Order App for Android has a problem whereby it fails to verify SSL server certificates.</li>\n    <li><a href=\"http://jvn.jp/en/jp/JVN75084836/\">JVN#75084836</a> Yome Collection for Android has a problem with management of IMEI.</li>\n    <li><a href=\"http://jvn.jp/en/jp/JVN68156832/\">JVN#68156832</a> Yafuoku! contains an issue where it fails to verify SSL server certificates</li>\n</ul>",
    	"intro": "<p>Android apps that use SSL/TLS protocols for secure communication should properly verify server certificates. The basic verification includes:\n</p>\n\n<ul>\n    <li>verify that the subject (CN) of X.509 certificate and the URL matches</li>\n    <li>verify that the certificate is signed by the trusted CA</li>\n    <li>verify that the signature is correct</li>\n    <li>verify that the certificate is not expired</li>\n</ul>\n\n<p>\n    A developer has the freedom to customize their SSL implementation. The developer should properly use SSL as appropriate to the intent of the app and the environment the apps are used in. If the SSL is not correctly used, a user's sensitive data may leak via the vulnerable SSL communication channel.\n</p>\n\n<p>Fahl et al [<a href=\"https://www.securecoding.cert.org/confluence/display/java/AA.+References#AA.References-Fahl2012\">Fahl 2012</a>] describes the following patterns of the insecure use of SSL:</p>\n\n<ul>\n    <li><b>Trusting All Certificates</b>: The developer implements the TrustManager interface so that it will trust all the server\n        certificate (regardless of who signed it, what is the CN etc.)\n    </li>\n    <li><b>Mixed-Mode/No SSL</b>: A developer mixes secure and insecure connections in the same app or does not use SSL at all.</li>\n</ul>\n\n<p>On Android, using HttpURLConnection is recommended for HTTP client implementation.</p>\n",
    	"heading": "Trust Manager for SSL/TLS is not properly configured",
    	"businessImplication": "In the event that a user (anonymous or verified) is able to execute over-privileged functionality, the business may experience:\n\n<ul>\n    <li>Reputational Damage</li>\n    <li>Fraud</li>\n    <li>Information Theft</li>\n</ul>\n",
    	"uuid": "4687fb88-2a9f-438e-8109-3eda0292bfb2",
    	"id": 5,
    	"type": "vulnerabilitie",
    	"name": "Broken Trust Manager for SSL",
    	"compliant": "<p>\n    The compliant solution is given below which shows how to solve the issue with the non compliant code:\n</p>\n<pre><span style=' color: Blue;'>public</span> <span style=' color: Blue;'>void</span> checkCertTrusted(X509Certificate[] chain, String authType, <span style=' color: Blue;'>boolean</span> isServer)\n    <span style=' color: Blue;'>throws</span> CertificateException\n{\n    <span style=' color: Blue;'>try</span> {\n        <span style=' color: Blue;'>if</span> (isServer)\n            appTrustManager.checkServerTrusted(chain, authType);\n        <span style=' color: Blue;'>else</span>\n            appTrustManager.checkClientTrusted(chain, authType);\n    } <span style=' color: Blue;'>catch</span> (CertificateException ae) {\n        <span style=' color: Green;'>// if the cert is stored in our appTrustManager, we ignore expiredness</span>\n        <span style=' color: Blue;'>if</span> (isExpiredException(ae)) {\n            Log.i(<span style=' color: Maroon;'>\"log\"</span>, <span style=' color: Maroon;'>\"accepting expired certificate from keystore\"</span>);\n            <span style=' color: Blue;'>return</span>;\n        }\n        <span style=' color: Blue;'>if</span> (isCertKnown(chain[<span style=' color: Maroon;'>0</span>])) {\n            Log.i(<span style=' color: Maroon;'>\"log\"</span>, <span style=' color: Maroon;'>\"accepting cert already stored in keystore\"</span>);\n            <span style=' color: Blue;'>return</span>;\n        }\n        <span style=' color: Blue;'>try</span> {\n            <span style=' color: Blue;'>if</span> (defaultTrustManager == <span style=' color: Blue;'>null</span>)\n                <span style=' color: Blue;'>throw</span> ae;\n            Log.d(<span style=' color: Maroon;'>\"log\"</span>, <span style=' color: Maroon;'>\"trying defaultTrustManager\"</span>);\n            <span style=' color: Blue;'>if</span> (isServer)\n                defaultTrustManager.checkServerTrusted(chain, authType);\n            <span style=' color: Blue;'>else</span>\n                defaultTrustManager.checkClientTrusted(chain, authType);\n        } <span style=' color: Blue;'>catch</span> (CertificateException e) {\n            Log.d(<span style=' color: Maroon;'>\"log\"</span>, <span style=' color: Maroon;'>\"defaultTrustManager failed: \"</span> + e);\n            interactCert(chain, authType, e);\n        }\n    }\n}\n\n<span style=' color: Blue;'>public</span> <span style=' color: Blue;'>void</span> checkTrustManager() <span style=' color: Blue;'>throws</span> IOException, KeyManagementException, NoSuchAlgorithmException {\n    TrustManager tm = <span style=' color: Blue;'>new</span> X509TrustManager() {\n\n        @Override\n        <span style=' color: Blue;'>public</span> <span style=' color: Blue;'>void</span> checkClientTrusted(X509Certificate[] chain,\n                String authType) <span style=' color: Blue;'>throws</span> CertificateException {\n            checkCertTrusted(chain, authType, <span style=' color: Maroon;'>false</span>);\n        }\n\n        @Override\n        <span style=' color: Blue;'>public</span> <span style=' color: Blue;'>void</span> checkServerTrusted(X509Certificate[] chain,\n                String authType) <span style=' color: Blue;'>throws</span> CertificateException {\n            checkCertTrusted(chain, authType, <span style=' color: Maroon;'>false</span>);\n        }\n\n        @Override\n        <span style=' color: Blue;'>public</span> X509Certificate[] getAcceptedIssuers() {\n            <span style=' color: Blue;'>return</span> defaultTrustManager.getAcceptedIssuers();\n        }\n    };\n}</pre>\n<p>\n    The method checkCertTrusted() gives an idea about how to solve this issue. If a custom keystore is being used to load certificates then we need to define and do a failsafe load of those certificates. </p>\n",
    	"types": [1],
    	"successMessage": "Trust Manager for SSL Seems to be perfect, or SSL were not implemented and used in your application."
    }, {
    	"description": "Realm databases are used by the applications to store data which can be further used by the application at later stages. However, these databases do not have any built-in support for encryption and hence, all the information is stored in plaintext format in these files. If an application stores user credentials or some sensitive user specific data in this database then it can be accessed by any third party.",
    	"question": "Does this application stores data in RealmDB?",
    	"nonCompliant": "",
    	"relatedTo": "",
    	"intro": "<p>\n    Realm databases are used by the applications to store data which can be further used by the application at later stages. However, these databases don't have any built-in support for encryption and hence, all the information is stored in plain-text format in these files. If an application stores user credentials or some sensitive user specific data in this database then it can be accessed by any third party.\n</p>\n",
    	"heading": "Insecured data stored in RealmDB",
    	"businessImplication": "<p>\nFailure to use encryption routines may result in the database and its associated data including user credentials getting compromised.\n</p>\n",
    	"uuid": "b04ba5cd-810e-4b9f-88ea-325c84a7c850",
    	"id": 26,
    	"type": "vulnerabilitie",
    	"name": "Insecured data stored in RealmDB",
    	"compliant": "<p>\n    It is suggested to use custom encryption while storing data in Realm databases.\n</p>\n<p>\n    An encrypted copy of the unencrypted Realm file, which can be done by\n    using </p>\n<pre style='color:#000000;background:#ffffff;'>Realm<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span><span style='color:#800000; font-weight:bold; '>.write</span>CopyToPath<span style='color:#808030; '>(</span>_:encryptionKey:<span style='color:#808030; '>)</span>\n</pre> \n    <p>and then can use the encrypted file at the new location.</p>\n",
    	"types": [2],
    	"successMessage": "this application doesn't store sensitive information in RealmDB"
    }, {
    	"description": "While using phonegap to develop application, always try to Whitelist the URL via which it connects",
    	"question": "Does the application whitelist the URL incase it uses Phonegap",
    	"nonCompliant": "",
    	"relatedTo": "",
    	"intro": "<p>\n    Domain whitelisting is a security model that controls access to external domains over which your application has no control. Cordova provides a configurable security policy to define which external sites may be accessed. By default, new apps are configured to allow access to any site. Before moving your application to production, you should formulate a whitelist and allow access to specific network domains and subdomains.\n</p>\n",
    	"heading": "Android Phonegap no Whitelist URL Present",
    	"businessImplication": "<p>\n    Without Domain Whitelisting, an attacker can load any domain in an iframe and any script on that page within the iframe can directly access Cordova JavaScript objects and the corresponding native Java objects. \n</p>\n",
    	"uuid": "10582c96-f70f-4844-a73a-a8785dc20d8c",
    	"id": 36,
    	"type": "vulnerabilitie",
    	"name": "Android Phonegap no Whitelist URL",
    	"compliant": "<p>Cordova adheres to the W3C Widget Access specification, which relies on the &lt;access&gt; element within the app's config.xml file to enable network access to specific domains. For projects that rely on the CLI workflow described in The Command-Line Interface, this file is located in the project's top-level directory. Otherwise for platform-specific development paths, locations are listed in the sections below:</p>\n\n</p>The following examples demonstrate whitelist syntax:</p>\n\n<p><b>Access to google.com:</b></p>\n\n<pre style='color:#000000;background:#ffffff;'><span style='color:#a65700; '>&lt;</span><span style='color:#5f5035; '>access</span><span style='color:#274796; '> origin</span><span style='color:#808030; '>=</span><span style='color:#0000e6; '>\"http://google.com\"</span><span style='color:#274796; '> </span><span style='color:#a65700; '>/></span>\n</pre>\n<br />\n-------------\nAccess to the secure google.com (https://):\n<pre style='color:#000000;background:#ffffff;'><span style='color:#a65700; '>&lt;</span><span style='color:#5f5035; '>access</span><span style='color:#274796; '> origin</span><span style='color:#808030; '>=</span><span style='color:#0000e6; '>\"https://google.com\"</span><span style='color:#274796; '> </span><span style='color:#a65700; '>/></span>\n</pre>\n--------------\n<br />\nAccess to the subdomain maps.google.com:\n<pre style='color:#000000;background:#ffffff;'><span style='color:#a65700; '>&lt;</span><span style='color:#5f5035; '>access</span><span style='color:#274796; '> origin</span><span style='color:#808030; '>=</span><span style='color:#0000e6; '>\"http://maps.google.com\"</span><span style='color:#274796; '> </span><span style='color:#a65700; '>/></span>\n</pre>\n--------------\n<br />\nAccess to all the subdomains on google.com, for example mail.google.com and docs.google.com:\n<pre style='color:#000000;background:#ffffff;'><span style='color:#a65700; '>&lt;</span><span style='color:#5f5035; '>access</span><span style='color:#274796; '> origin</span><span style='color:#808030; '>=</span><span style='color:#0000e6; '>\"http://*.google.com\"</span><span style='color:#274796; '> </span><span style='color:#a65700; '>/></span>\n</pre>\n--------------------------\n<br />\n\nAccess to all domains, for example, google.com and developer.mozilla.org:\n<pre style='color:#000000;background:#ffffff;'><span style='color:#a65700; '>&lt;</span><span style='color:#5f5035; '>access</span><span style='color:#274796; '> origin</span><span style='color:#808030; '>=</span><span style='color:#0000e6; '>\"*\"</span><span style='color:#274796; '> </span><span style='color:#a65700; '>/></span>\n</pre>\n<br />\n<b>This is the default value for newly created CLI projects which not secured.</b>\n",
    	"types": [1],
    	"successMessage": "Application have proper Whitelisted URL or doesn't uses Phonegap"
    }, {
    	"description": "Insufficient transport layer protection issues happen when the data is sent from the mobile app to the server over unsecure channels. Whether the data is transmitted through the carrier network or through WiFi, it will end up through the Internet either way before it could reach the remote server. There are several ways where unprotected data transmitted over the network could be sniffed; things like routers, proxies, cell towers, are some of the few ways data could be sniffed while in transit.",
    	"question": "Is your Application using proper Transport Layer protection? Is HTTPS enabled in your application?",
    	"nonCompliant": "<p> Using HTTP with SSL or TLS to connect to internet, or without a proper certificate the connection can be easily eavesdropped by attacker without the knowledge of the user. </p>\n\n<pre>String link = <span style=' color: Maroon;'>\"http://www.google.com\"</span>;\nURL url = <span style=' color: Blue;'>new</span> URL(link);\n\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.connect();\n\nInputStream is = conn.getInputStream();\nBufferedReader reader =<span style=' color: Blue;'>new</span> BufferedReader(<span style=' color: Blue;'>new</span> InputStreamReader(is, <span style=' color: Maroon;'>\"UTF-8\"</span>));\nString webPage = <span style=' color: Maroon;'>\"\"</span>,data=<span style=' color: Maroon;'>\"\"</span>;\nwhile ((data = reader.readLine()) != <span style=' color: Blue;'>null</span>){\n   webPage += data + <span style=' color: Maroon;'>\"\\n\"</span>;\n}</pre>\n\n<p>An attacker can perform a MITM attack and the user wouldn't even know that someone is eavesdropping the connection. </p>\n",
    	"relatedTo": "",
    	"intro": "<p>\n    Insufficient transport layer protection issues happen when the data is sent from the mobile app to the server over unsecured channels. Whether the data is transmitted through the carrier network or through WiFi, it will end up through the Internet either way before it could reach the remote server. There are several ways where unprotected data transmitted over the network could be sniffed; things like routers, proxies, cell towers, are some of the few ways data could be sniffed while in transit.\n</p>",
    	"heading": "Insufficient Transport Layer Protection",
    	"businessImplication": "The violation of a user's confidentiality may result in:\n<ul>\n    <li>Identity theft</li>\n    <li>Fraud</li>\n    <li>Reputational Damage</li>\n</ul>\n",
    	"uuid": "acdfd838-050e-4b2d-af88-5516cdf327c5",
    	"id": 15,
    	"type": "vulnerabilitie",
    	"name": "Insufficient Transport Layer Protection",
    	"compliant": "<p>\n    Never use HTTP URL to download data. Instead, create a valid HTTPS request through which only sensitive data can be downloaded.\n</p>\n",
    	"types": [1, 2],
    	"successMessage": "Application seems to have SSL enabled and sufficient protection is being used to prevent Information lekage."
    }, {
    	"description": "Android application which uses older version of phonegap is vulnerable to URL redirection to arbitary website as defined by CVE-3500",
    	"question": "Does the application uses older version of Phonegap which can allow remote attackers to URL redirection?",
    	"nonCompliant": "",
    	"relatedTo": "",
    	"intro": "<p>\n    Android applications built with the Cordova framework can be launched through a special intent URL. A specially-crafted URL could cause the Cordova-based application to start up with a different start page than the developer intended, including other HTML content stored on the Android device. This has been the case in all released versions of Cordova up to 3.5.0, and has been fixed in the latest release (3.5.1). We recommend affected projects to update their applications to the latest release.\n</p>\n",
    	"heading": "Android Remote URL redirection vulnerability",
    	"businessImplication": "<p>\n    With Cordova 3.5.0 or prior, attackers may:\n    <ul>\n        <li>Open and send data to arbitrary applications.</li>\n        <li>Bypass the HTTP whitelist and connect to arbitrary servers.</li>\n        <li>Change the start page via a crafted intent URL.</li>\n    </ul>\n</p>\n\n",
    	"uuid": "a08e5fa2-8552-40ad-8043-69904da005f3",
    	"id": 30,
    	"type": "vulnerabilitie",
    	"name": "Android Remote URL redirection vulnerability",
    	"compliant": "<p>\n    Upgrade your Phonegap or Apache Cordova application to the latest Version\n</p>\n",
    	"types": [1],
    	"successMessage": "The application doesn't seems to be vulnerable to URL Redirection vulnerability or not using phonegap at all"
    }, {
    	"description": "Android application which uses older version of phonegap is vulnerable to Error URL redirection to arbitary website as defined by CVE-3500",
    	"question": "Does the application uses older version of Phonegap which can allow remote attackers to Error URL redirection?",
    	"nonCompliant": "",
    	"relatedTo": "",
    	"intro": "<p>\n    Cordova-based applications make use of a WebView in order to interact with the user. This vulnerability uses the errorurl parameter which can be passed via Intent extras (in CordovaActivity) by a malicious caller, but it is not automatically loaded into a WebView on application load. The errorurl will only be rendered by the WebView when a network request fails. This presents a vulnerability which can be exploited whereby a malicious caller could launch the Activity.\n</p>\n",
    	"heading": "Android Error URL redirection Vulnerability",
    	"businessImplication": "<p>\n    With Cordova 3.5.0 or prior, attackers may:\n    <ul>\n        <li>Open and send data to arbitrary applications.</li>\n        <li>Bypass the HTTP whitelist and connect to arbitrary servers.</li>\n        <li>Change the start page via a crafted intent URL.</li>\n    </ul>\n</p>\n\n",
    	"uuid": "6cdcb498-1861-42a3-aa6b-95afc74f2f3d",
    	"id": 31,
    	"type": "vulnerabilitie",
    	"name": "Android Error URL redirection Vulnerability",
    	"compliant": "<p>\n    Upgrade Phonegap or Apache Cordova to the latest version.\n</p>\n",
    	"types": [1],
    	"successMessage": "The application doesn't seems to be vulnerable to Error URL Redirection vulnerability or not using phonegap at all"
    }, {
    	"description": "Depricated Android phonegap application is affected with CVE-3501 via which attackers can downgrade HTTPS connection to HTTP",
    	"question": "Does the application uses depricated version of Phongap?",
    	"nonCompliant": "",
    	"relatedTo": "",
    	"intro": "<p>\n    Android applications built with the Cordova framework use a WebView component to display content. Cordova applications can specify a whitelist of URLs which the application will be allowed to display, or to communicate with via XMLHttpRequest. This whitelist, however, is not used by the WebView component when it is directed via JavaScript to communicate over non-http channels.\n</p>\n<p>\n    Specifically, it can be possible to open a WebSocket connection from the application JavaScript which will connect to any reachable server on the Internet. If an attacker is able to execute arbitrary JavaScript within the application, then that attacker can cause a connection to be opened to any server, bypassing the HTTP whitelist.\n</p>\n<p>\n    This is a limitation of the hybrid app architecture on Android in general, and not specific to Apache Cordova.\n</p>\n",
    	"heading": "Android bypass HTTPS due to depricated API",
    	"businessImplication": "<p>\n    The attacker can open a WebSocket connection from the application JavaScript which will connect to any remote server bypassing the HTTP whitelist.\n</p>\n",
    	"uuid": "426cc854-21e3-4edd-8c86-bea2662b271b",
    	"id": 32,
    	"type": "vulnerabilitie",
    	"name": "Android bypass HTTPS due to depricated API",
    	"compliant": "<p>\n    Upgrade Phonegap or Apache Cordova to the latest version.\n</p>\n",
    	"types": [1],
    	"successMessage": "The application doesn't seems to be using older version of phonegap or not using phonegap at all"
    }, {
    	"description": "According to CVE-3500 Apache cordova had a vulnerability to change the start page",
    	"question": "Does the application affected by CVE-3500 for Remote Attackers to change the start page ?",
    	"nonCompliant": "",
    	"relatedTo": "",
    	"intro": "<p>\n\tApache Cordova for Android version 3.5.0 and prior are vulnerable. Attackers can exploit these issues to bypass security restrictions to perform unauthorized actions. This may aid in further attacks.\n</p>\n",
    	"heading": "Android Apache Cordova Android before 3.5.1 allows remote attackers to change the start page",
    	"businessImplication": "<p>\n    With Cordova 3.5.0 or prior, attackers may:\n    <ul>\n        <li>Open and send data to arbitrary applications.</li>\n        <li>Bypass the HTTP whitelist and connect to arbitrary servers.</li>\n        <li>Change the start page via a crafted intent URL.</li>\n    </ul>\n</p>\n\n",
    	"uuid": "df1f7ae6-085a-4fb7-bb55-f1c4b76f3f1f",
    	"id": 34,
    	"type": "vulnerabilitie",
    	"name": "Android Apache Cordova Android before 3.5.1 allows remote attackers to change the start page",
    	"compliant": "<p>\n    Upgrade Phonegap or Apache Cordova to the latest version.\n</p>\n",
    	"types": [1],
    	"successMessage": "Application is not affected by CVE-3500 or might not be using Apache Cordova"
    }, {
    	"description": "While using phonegap to develop application, always stop debugging logs via phonegap",
    	"question": "Is application debug logs for phone gap log is enabled ?",
    	"nonCompliant": "",
    	"relatedTo": "",
    	"intro": "<p>\n    Once a PhoneGap app gets shipped with debug mode switched \"on\" then anyone can attach a debugger and change the logical flow of the application.\n    Also, sensitive logs get leaked which can be used to determine the URL endpoints of the application.\n</p>\n",
    	"heading": "Android Phonegap debug logging",
    	"businessImplication": "<p>\n    An attacker can attach a debugger and change the logical flow of the application. Additionally, sensitive logs can get leaked which can be used to determine the URL endpoints of the application.\n</p>\n",
    	"uuid": "5b908646-125c-4b25-b548-22f047275683",
    	"id": 35,
    	"type": "vulnerabilitie",
    	"name": "Android Phonegap debug logging",
    	"compliant": "<p>\n    If using Cordova, please publish the plugin using\n</p>\n\n<pre style='color:#000000;background:#ffffff;'>cordova build android <span style='color:#808030; '>-</span><span style='color:#808030; '>-</span>release\n</pre>\n\n<p> If using PhoneGap, please turn of all console.logs() and other logging codes before publishing </p>\n",
    	"types": [1],
    	"successMessage": "Application seems not to be using phonegap related logs or doesn\t uses phonegap"
    }, {
    	"description": "Android Applications which uses Redis to communicate has vulnerability",
    	"question": "Does the application uses Redis to communicate?",
    	"nonCompliant": "",
    	"relatedTo": "",
    	"intro": "<p>\n    Redis framework should be used strictly in server to server communication.\n    Using Redis in the client side compromises security because the credentials \n    can be read in plain text.\n</p>\n",
    	"heading": "Android insecured Transport Layer via Redis",
    	"businessImplication": "<p>\n    The database and associated data including user credentials may get compromised.\n</p>\n",
    	"uuid": "2b2c9a74-cd96-4986-8f82-e4967c8ebd1b",
    	"id": 37,
    	"type": "vulnerabilitie",
    	"name": "Android insecured Transport Layer via Redis",
    	"compliant": "<p>\n    Remove Redis client completely. If any SDK uses this component, then please remove the SDK itself\n</p>\n",
    	"types": [1],
    	"successMessage": "The application seems not to be using Redis"
    }, {
    	"description": "Insecured data kept in iOS Keychain",
    	"question": "Does the Application stores data insecurely in Keychain",
    	"nonCompliant": "Not in compliance with OWASP Mobile Top 10 for M8 - Side Channel Data Leakage\n\nExample keychain implementation where the pincode is stored insecurely:\n\n\n<pre style='color:#000000;background:#ffffff;'>NSLog<span style='color:#808030; '>(</span><span style='color:#808030; '>@</span><span style='color:#800000; '>\"</span><span style='color:#0000e6; '>User entered PIN</span><span style='color:#800000; '>\"</span><span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>\n<span style='color:#800000; font-weight:bold; '>if</span> <span style='color:#808030; '>(</span><span style='color:#808030; '>[</span>textField<span style='color:#808030; '>.</span>text length<span style='color:#808030; '>]</span> <span style='color:#808030; '>></span> <span style='color:#008c00; '>0</span><span style='color:#808030; '>)</span> <span style='color:#800080; '>{</span>\n    NSUInteger fieldHash <span style='color:#808030; '>=</span> <span style='color:#808030; '>[</span>textField<span style='color:#808030; '>.</span>text hash<span style='color:#808030; '>]</span><span style='color:#800080; '>;</span>\n\n    NSLog<span style='color:#808030; '>(</span><span style='color:#808030; '>@</span><span style='color:#800000; '>\"</span><span style='color:#0000e6; '>** Password Is - %@</span><span style='color:#800000; '>\"</span><span style='color:#808030; '>,</span> fieldString<span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>\n\n    <span style='color:#696969; '>// Save PIN  to the keychain (NEVER store the direct PIN)</span>\n    <span style='color:#800000; font-weight:bold; '>if</span> <span style='color:#808030; '>(</span><span style='color:#808030; '>[</span>KeychainWrapper createKeychainValue<span style='color:#800080; '>:</span>fieldString forIdentifier<span style='color:#800080; '>:</span>PIN_SAVED<span style='color:#808030; '>]</span><span style='color:#808030; '>)</span> <span style='color:#800080; '>{</span>\n        <span style='color:#808030; '>[</span><span style='color:#808030; '>[</span>NSUserDefaults standardUserDefaults<span style='color:#808030; '>]</span> setBool<span style='color:#800080; '>:</span>YES forKey<span style='color:#800080; '>:</span>PIN_SAVED<span style='color:#808030; '>]</span><span style='color:#800080; '>;</span>\n        <span style='color:#808030; '>[</span><span style='color:#808030; '>[</span>NSUserDefaults standardUserDefaults<span style='color:#808030; '>]</span> synchronize<span style='color:#808030; '>]</span><span style='color:#800080; '>;</span>\n        NSLog<span style='color:#808030; '>(</span><span style='color:#808030; '>@</span><span style='color:#800000; '>\"</span><span style='color:#0000e6; '>** Key saved successfully to Keychain!!</span><span style='color:#800000; '>\"</span><span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>\n    <span style='color:#800080; '>}</span>\n<span style='color:#800080; '>}</span>\n</pre>\n",
    	"relatedTo": "<ul><li><a href=\"https://developer.apple.com/library/ios/documentation/security/Conceptual/keychainServConcepts/01introduction/introduction.html#//apple_ref/doc/uid/TP30000897\">Keychain Services Programming Guide</a></li>\n<li><a href=\"https://www.owasp.org/index.php/Mobile_Top_10_2014-M2\">M2 - Insecure Data Storage</a></li>\n<li><a href=\"https://www.owasp.org/index.php/Mobile_Top_10_2014-M5\">M5 - Poor Authorization and Authentication</a></li>\n</ul>\n",
    	"intro": "<p>iOS provides the Keychain for secure data storage. However, in several scenarios, the Keychain can be compromised and subsequently decrypted.\n</p><p>\nIn all versions of iOS up to and including iOS 7, Keychain can be partially compromised if attacker has access to the encrypted iTunes backup. Due to the way iOS re-encrypts Keychain entries when creating iTunes backups, it is possible to partially decrypt Keychain when iTunes backup is available and password for backup encryption is known (note that iTunes backups that are not encrypted do not allow decryption of Keychain items).\n</p><p>\nKeychain access controls are rendered ineffective if a \"jailbreak\" has been applied to the device. In this case any application running on the device can potentially read every other application's Keychain items.\n</p><p>\nLastly, for older devices, such as the iPhone 4, for which so-called \"bootrom exploits\" exist, the Keychain can be compromised by an attacker with physical access to the device.\n</p>\n",
    	"heading": "Insecured Keychain Data",
    	"businessImplication": "<p>\n    Failing to take proper precautions may result in loss of login credentials, passwords and other highly sensitive data stored in the keychain.\n</p>\n",
    	"uuid": "77419fac-3e47-4cc4-bf22-3f0f96875c85",
    	"id": 50,
    	"type": "vulnerabilitie",
    	"name": "Keychain Data",
    	"compliant": "<p>\nStore the sensitive data such as passwords in an encrypted form on the device keychain so that even if the device is compromised no one can infer correct passwords.\n</p>\n<p>\nWhen storing data in the Keychain, use the most restrictive protection class (as defined by kSecAttrAccessible attribute) that still allows your application to function properly. For example, if your application is not designed to be running in the background, use kSecAttrAccessibleWhenUnlocked or kSecAttrAccessibleWhenUnlockedThisDeviceOnly.\n</p>\n<p>\nTo prevent Keychain item exposure via iTunes backup, use one of ...ThisDeviceOnly protection classes if practical.\n</p>\n<p>\nFinally, for highly sensitive data, consider augmenting protections offered by the Keychain with application-level encryption. For example, rely upon the user to enter a passphrase to authenticate within the application and use that passphrase to encrypt data before storing it into the Keychain.\n</p>\n\nExample Implementation:\n\n<pre style='color:#000000;background:#ffffff;'><span style='color:#004a43; '>#</span><span style='color:#004a43; '>define</span><span style='color:#004a43; '> SALT_HASH </span><span style='color:#808030; '>@</span><span style='color:#800000; '>\"</span><span style='color:#0000e6; '>FvTivqTqZXsgLLx1v3P8TGRyVHaSOB1pvfm02wvGadj7RLHV8GrfxaZ84oGA8RsKdNRpxdAojXYg9iAj</span><span style='color:#800000; '>\"</span>\n\n<span style='color:#808030; '>+</span> <span style='color:#808030; '>(</span>NSString <span style='color:#808030; '>*</span><span style='color:#808030; '>)</span>securedSHA256DigestHashForPIN<span style='color:#800080; '>:</span><span style='color:#808030; '>(</span>NSUInteger<span style='color:#808030; '>)</span>pinHash\n<span style='color:#800080; '>{</span>\n    <span style='color:#696969; '>// 1</span>\n    NSString <span style='color:#808030; '>*</span>name <span style='color:#808030; '>=</span> <span style='color:#808030; '>[</span><span style='color:#808030; '>[</span>NSUserDefaults standardUserDefaults<span style='color:#808030; '>]</span> stringForKey<span style='color:#800080; '>:</span>USERNAME<span style='color:#808030; '>]</span><span style='color:#800080; '>;</span>\n    name <span style='color:#808030; '>=</span> <span style='color:#808030; '>[</span>name stringByAddingPercentEscapesUsingEncoding<span style='color:#800080; '>:</span>NSUTF8StringEncoding<span style='color:#808030; '>]</span><span style='color:#800080; '>;</span>\n    <span style='color:#696969; '>// 2</span>\n    NSString <span style='color:#808030; '>*</span>computedHashString <span style='color:#808030; '>=</span> <span style='color:#808030; '>[</span>NSString stringWithFormat<span style='color:#800080; '>:</span><span style='color:#808030; '>@</span><span style='color:#800000; '>\"</span><span style='color:#0000e6; '>%@</span><span style='color:#007997; '>%i</span><span style='color:#0000e6; '>%@</span><span style='color:#800000; '>\"</span><span style='color:#808030; '>,</span> name<span style='color:#808030; '>,</span> pinHash<span style='color:#808030; '>,</span> SALT_HASH<span style='color:#808030; '>]</span><span style='color:#800080; '>;</span>\n    <span style='color:#696969; '>// 3</span>\n    NSString <span style='color:#808030; '>*</span>finalHash <span style='color:#808030; '>=</span> <span style='color:#808030; '>[</span>self computeSHA256DigestForString<span style='color:#800080; '>:</span>computedHashString<span style='color:#808030; '>]</span><span style='color:#800080; '>;</span>\n    NSLog<span style='color:#808030; '>(</span><span style='color:#808030; '>@</span><span style='color:#800000; '>\"</span><span style='color:#0000e6; '>** Computed hash: %@ for SHA256 Digest: %@</span><span style='color:#800000; '>\"</span><span style='color:#808030; '>,</span> computedHashString<span style='color:#808030; '>,</span> finalHash<span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>\n    <span style='color:#800000; font-weight:bold; '>return</span> finalHash<span style='color:#800080; '>;</span>\n<span style='color:#800080; '>}</span>\nNSLog<span style='color:#808030; '>(</span><span style='color:#808030; '>@</span><span style='color:#800000; '>\"</span><span style='color:#0000e6; '>User entered PIN</span><span style='color:#800000; '>\"</span><span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>\n<span style='color:#800000; font-weight:bold; '>if</span> <span style='color:#808030; '>(</span><span style='color:#808030; '>[</span>textField<span style='color:#808030; '>.</span>text length<span style='color:#808030; '>]</span> <span style='color:#808030; '>></span> <span style='color:#008c00; '>0</span><span style='color:#808030; '>)</span> <span style='color:#800080; '>{</span>\n    NSUInteger fieldHash <span style='color:#808030; '>=</span> <span style='color:#808030; '>[</span>textField<span style='color:#808030; '>.</span>text hash<span style='color:#808030; '>]</span><span style='color:#800080; '>;</span>\n    <span style='color:#696969; '>// 4</span>\n    NSString <span style='color:#808030; '>*</span>fieldString <span style='color:#808030; '>=</span> <span style='color:#808030; '>[</span>KeychainWrapper securedSHA256DigestHashForPIN<span style='color:#800080; '>:</span>fieldHash<span style='color:#808030; '>]</span><span style='color:#800080; '>;</span>\n    NSLog<span style='color:#808030; '>(</span><span style='color:#808030; '>@</span><span style='color:#800000; '>\"</span><span style='color:#0000e6; '>** Password Hash - %@</span><span style='color:#800000; '>\"</span><span style='color:#808030; '>,</span> fieldString<span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>\n    <span style='color:#696969; '>// Save PIN hash to the keychain (NEVER store the direct PIN)</span>\n    <span style='color:#800000; font-weight:bold; '>if</span> <span style='color:#808030; '>(</span><span style='color:#808030; '>[</span>KeychainWrapper createKeychainValue<span style='color:#800080; '>:</span>fieldString forIdentifier<span style='color:#800080; '>:</span>PIN_SAVED<span style='color:#808030; '>]</span><span style='color:#808030; '>)</span> <span style='color:#800080; '>{</span>\n        <span style='color:#808030; '>[</span><span style='color:#808030; '>[</span>NSUserDefaults standardUserDefaults<span style='color:#808030; '>]</span> setBool<span style='color:#800080; '>:</span>YES forKey<span style='color:#800080; '>:</span>PIN_SAVED<span style='color:#808030; '>]</span><span style='color:#800080; '>;</span>\n        <span style='color:#808030; '>[</span><span style='color:#808030; '>[</span>NSUserDefaults standardUserDefaults<span style='color:#808030; '>]</span> synchronize<span style='color:#808030; '>]</span><span style='color:#800080; '>;</span>\n        NSLog<span style='color:#808030; '>(</span><span style='color:#808030; '>@</span><span style='color:#800000; '>\"</span><span style='color:#0000e6; '>** Key saved successfully to Keychain!!</span><span style='color:#800000; '>\"</span><span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>\n    <span style='color:#800080; '>}</span>\n<span style='color:#800080; '>}</span>\n</pre>\n",
    	"types": [2, 3],
    	"successMessage": "The Application doesn't stores any sensitive information Keychain"
    }, {
    	"description": "CouchDB is an alternative to SQLite3 database, used by applications to store data",
    	"question": "Does this application stores data in CouchDB?",
    	"nonCompliant": "",
    	"relatedTo": "",
    	"intro": "<p>\n    Couch databases are used by the applications to store data which can be further used by the application at later stages. However, these databases don't have any built-in support for encryption and hence, all the information is stored in plain-text format in these files. If an application stores user credentials or some sensitive user specific data in this database then it can be accessed by any third party.\n</p>\n",
    	"heading": "Insecured data stored in CouchDB",
    	"businessImplication": "<p>\nFailure to use encryption routines may result in the database and its associated data including user credentials getting compromised.\n</p>\n",
    	"uuid": "08582a19-13d5-46ed-8c0d-d2bd6f204099",
    	"id": 25,
    	"type": "vulnerabilitie",
    	"name": "Insecured data stored in CouchDB",
    	"compliant": "<p>\n    It is suggested to use custom encryption while storing data in Couch Database.\n</p>\n<p>\nDatabase encryption is available for both ForestDB and SQLite storage types. It is automatically hooked into ForestDB's filesystem abstraction layer and for SQLite storage, Couchbase Lite uses SQLCipher; an open source extension to SQLite that provides transparent encryption of database files. In both cases, the encryption specification is 256-bit AES.\n</p>\n<p>\nSQLCipher is an optional dependency. The section below describes how to add it to platform.\n</p>\n<ul>\n    <li>Download the iOS SDK from <a href=\"http://www.couchbase.com/nosql-databases/downloads#couchbase-mobile\">http://www.couchbase.com/nosql-databases/downloads#couchbase-mobile</a>.</li>\n    <li>Add the libsqlcipher.a library to your XCode project.</li>\n    <li>Go to the Link Binary With Libraries build phase of your app target.</li>\n    <li>Remove libsqlite.dylib</li>\n</ul>\n",
    	"types": [2],
    	"successMessage": "this application doesn't store sensitive information in CouchDB"
    }, {
    	"description": "The Android application exports Activity for use by other applications, but does not properly restrict which applications can launch the component or access the data it contains via custom signature defined by android:protectionLevel.",
    	"question": "Is the Application Activity Exported without Protection Level?",
    	"nonCompliant": "",
    	"relatedTo": "",
    	"intro": "<p>\nActivities provide user interfaces. Activities are started\nwith Intents, and they can return data to their invoking\ncomponents upon completion. All visible portions\nof applications are Activities.\n</p>\n<p> Exported Unprotected Activities can be called by any other application installed in the phone\n    leading to XAS (Cross Application Scripting)\n</p>\n",
    	"heading": "Android non-signature exported Activity",
    	"businessImplication": "<p>\n    Attackers may use non-privileged services to intercept and track the user's activity. Furthermore, it may be possible to insert data that may maliciously modify the behaviour of the application.\n</p>\n",
    	"uuid": "eb4333db-4da5-4d99-806c-3ad4297b77f9",
    	"id": 42,
    	"type": "vulnerabilitie",
    	"name": "Android non-signature exported Activity",
    	"compliant": "<p>\n\tIf you are using a Activity for sharing between only your own apps, it is preferable to use the android:protectionLevel attribute set to \"signature\" protection. Signature permissions do not require user confirmation, so they provide a better user experience and more controlled access to the application when the apps accessing the Activity are signed with the same key\n</p>\n",
    	"types": [1],
    	"successMessage": "The Activity in this App seems not to be exported with ProtectionLevel or not implemented"
    }, {
    	"description": "Multipeer Connectivity Framework is used for establisihing connection with the devices in close proximity",
    	"question": "Does the Application communicates with other devices over MultiPeer Framework securely?",
    	"nonCompliant": "",
    	"relatedTo": "",
    	"intro": "<p>\n\tMulti-peer Connectivity Framework makes the task of exchanging data or other resources with the nearby devices easy. The framework provides a provision where the connection with the peers can be created in an encrypted manner. Applications should enable the encryption feature while exchanging data with the peers which ensures the confidentiality of data.\n</p>\n",
    	"heading": "Insecure Peer Connections",
    	"businessImplication": "<p>\n    Failing to use encrypted channels may undermine the confidentiality of the transmitted data.\n</p>\n\n",
    	"uuid": "c0c6476e-18a6-4ae9-8ad3-ea34a7fce2eb",
    	"id": 49,
    	"type": "vulnerabilitie",
    	"name": "Insecure Peer Connections",
    	"compliant": "<p>\n\tWhile establishing a connection with the peer always initialize the session with encryption preference set as 'MCEncryptionRequired' to ensure that complete data is shared on an encrypted channel.\n</p>\n",
    	"types": [2],
    	"successMessage": "The Application doesn't uses MultiPeer Framework or the MultipeerFramework seems to be configured properly"
    }, {
    	"description": "A service was found to be shared with other apps on the device without an intent filter or a permission requirement therefore leaving it accessible to any other application on the device.",
    	"question": "Is Services in the Application Protected?",
    	"nonCompliant": "",
    	"relatedTo": "",
    	"intro": "<p>\n    <span>Chin, et al., [<a href=\"https://www.securecoding.cert.org/confluence/display/java/AA.+References#AA.References-Chin11\">Chin 2011</a>] says:</span>\n    <span class=\"italics\">\n        &quot;If a Service is exported and not protected with strong permissions, then any application can start and bind to the Service. Depending on the duties of a particular Service, it may leak information or perform unauthorized tasks. Services sometimes maintain singleton application state, which could be corrupted.&quot;\n    </span>\n</p>\n\n<p>\n    To guard against such eventualities, an exported service should always be protected with strong permissions.\n</p>",
    	"heading": "Protect exported services with strong permissions",
    	"businessImplication": "<p>\n    Data can be shared through other services resulting in loss of sensitive \n    information.\n</p>\n",
    	"uuid": "3b5fb48a-2113-4f25-896f-74e9344dcb32",
    	"id": 1,
    	"type": "vulnerabilitie",
    	"name": "Unprotected Services",
    	"compliant": "<p>\n    Always protect the Activity with <i>export=false</i>\n</p>\n\n<pre style='color:#000000;background:#ffffff;'><span style='color:#808030; '>&lt;</span>activity exported<span style='color:#808030; '>=</span><span style='color:#800000; '>\"</span><span style='color:#0000e6; '>false</span><span style='color:#800000; '>\"</span> <span style='color:#808030; '>/</span><span style='color:#808030; '>></span>\n</pre>\n",
    	"types": [1],
    	"successMessage": "It seems the services are protected"
    }, {
    	"description": "The Android application exports Service for use by other applications, but does not properly restrict which applications can launch the component or access the data it containscustom signature defined by android:protectionLevel.",
    	"question": "Is the Application Service Exported without Protection Level?",
    	"nonCompliant": "",
    	"relatedTo": "",
    	"intro": "<p>\nServices run in the background and do not interact\nwith the user. Downloading a file or decompressing\nan archive are examples of operations that may take\nplace in a Service. Other components can bind to a\nService, which lets the binder invoke methods that are\ndeclared in the target Service's interface. Intents are\nused to start and bind to Services\n</p>\n<p> Exported Unprotected Services can be called by any other application installed in the phone\n    to bind into the service leading to XAS (Cross Application Scripting)\n</p>\n",
    	"heading": "Android non-signature exported Service",
    	"businessImplication": "<p>\n    Attackers may use non-privileged services to intercept and track the user's activity. Furthermore, it may be possible to insert data that may maliciously modify the behaviour of the application.\n</p>\n",
    	"uuid": "e9f25dd9-3380-4bf3-bc03-20a41cc36a5e",
    	"id": 44,
    	"type": "vulnerabilitie",
    	"name": "Android non-signature exported Service",
    	"compliant": "<p>\n\tIf you are using a Service for sharing data between only your own apps, it is preferable to use the android:protectionLevel attribute set to \"signature\" protection. Signature permissions do not require user confirmation, so they provide a better user experience and more controlled access to the Service when the apps accessing the data are signed with the same key\n</p>\n",
    	"types": [1],
    	"successMessage": "The Service component in this App seems not to be exported with ProtectionLevel or not implemented"
    }, {
    	"description": "The Android application exports Content Provider for use by other applications, but does not properly restrict which applications can launch the component or access the data it containscustom signature defined by android:protectionLevel.",
    	"question": "Is the Application Content Provider Exported without Protection Level?",
    	"nonCompliant": "",
    	"relatedTo": "",
    	"intro": "<p>\n    Content Providers are databases addressable by their\napplication-defined URIs. They are used for both persistent\ninternal data storage and as a mechanism for\nsharing information between applications.\n</p>\n<p> Exported and Unprotected Content Provider can be called by any other malicious application installed in the phone\n    to get the data via Content Provider leading to XAS (Cross Application Scripting)\n</p>\n",
    	"heading": "Android non-signature exported Provider",
    	"businessImplication": "<p>\n    Attackers may use non-privileged services to intercept and track the user's activity. Furthermore, it may be possible to insert data that may maliciously modify the behaviour of the application.\n</p>\n",
    	"uuid": "f4d3afa9-6609-45e5-80b0-744ef659c2f8",
    	"id": 45,
    	"type": "vulnerabilitie",
    	"name": "Android non-signature exported Provider",
    	"compliant": "<p>\n\tIf you are using a Content Provider for sharing data between only your own apps, it is preferable to use the android:protectionLevel attribute set to \"signature\" protection. Signature permissions do not require user confirmation, so they provide a better user experience and more controlled access to the content provider data when the apps accessing the data are signed with the same key\n</p>\n",
    	"types": [1],
    	"successMessage": "The Content Provider in this App seems not to be exported with ProtectionLevel or not implemented"
    }, {
    	"description": "Depending on the implementation of ContentProvider, use of the method can lead to a directory traversal vulnerability.",
    	"question": "Does your application protected from directory traversal attack ?",
    	"nonCompliant": "<h4>Noncompliant Code Example 1<h4>\n\nThis non-compliant code example tries to retrieve the last segment from the path paramUri, which is supposed to denote a file name, by calling android.net.Uri.getLastPathSegment(). The file is accessed in the pre-configured parent directory IMAGE_DIRECTORY.\n\n<pre style='color:#000000;background:#ffffff;'><span style='color:#800000; font-weight:bold; '>private</span> <span style='color:#800000; font-weight:bold; '>static</span> String IMAGE_DIRECTORY = localFile.getAbsolutePath()<span style='color:#808030; '>;</span>\n<span style='color:#800000; font-weight:bold; '>public</span> ParcelFileDescriptor openFile(Uri paramUri, String paramString)\n\t<span style='color:#800000; font-weight:bold; '>throws</span> FileNotFoundException <span style='color:#800080; '>{</span>\n  <span style='color:#bb7977; font-weight:bold; '>File</span> file <span style='color:#808030; '>=</span> <span style='color:#800000; font-weight:bold; '>new</span> <span style='color:#bb7977; font-weight:bold; '>File</span><span style='color:#808030; '>(</span>IMAGE_DIRECTORY<span style='color:#808030; '>,</span> paramUri<span style='color:#808030; '>.</span>getLastPathSegment<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>\n  <span style='color:#800000; font-weight:bold; '>return</span> ParcelFileDescriptor<span style='color:#808030; '>.</span>open<span style='color:#808030; '>(</span>file<span style='color:#808030; '>,</span> ParcelFileDescriptor<span style='color:#808030; '>.</span>MODE_READ_ONLY<span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>\n<span style='color:#800080; '>}</span>\n</pre>\n\n\n<h4>Noncompliant Code Example 2</h4>\n\nThis non-compliant code example attempts to fix the first non-compliant code example by calling Uri.getLastPathSegment() twice. The first call is intended for URL decoding and the second call is to obtain the string the developer wanted.\n<pre style='color:#000000;background:#ffffff;'><span style='color:#800000; font-weight:bold; '>private</span> <span style='color:#800000; font-weight:bold; '>static</span> String IMAGE_DIRECTORY = localFile.getAbsolutePath()<span style='color:#808030; '>;</span>\n<span style='color:#800000; font-weight:bold; '>public</span> ParcelFileDescriptor openFile(Uri paramUri, String paramString)\n<span style='color:#800000; font-weight:bold; '>throws</span> FileNotFoundException <span style='color:#800080; '>{</span>\n\t<span style='color:#bb7977; font-weight:bold; '>File</span> file <span style='color:#808030; '>=</span> <span style='color:#800000; font-weight:bold; '>new</span> <span style='color:#bb7977; font-weight:bold; '>File</span><span style='color:#808030; '>(</span>IMAGE_DIRECTORY<span style='color:#808030; '>,</span> Uri<span style='color:#808030; '>.</span>parse<span style='color:#808030; '>(</span>paramUri<span style='color:#808030; '>.</span>getLastPathSegment<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span><span style='color:#808030; '>.</span>getLastPathSegment<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>\n\t<span style='color:#800000; font-weight:bold; '>return</span> ParcelFileDescriptor<span style='color:#808030; '>.</span>open<span style='color:#808030; '>(</span>file<span style='color:#808030; '>,</span> ParcelFileDescriptor<span style='color:#808030; '>.</span>MODE_READ_ONLY<span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>\n<span style='color:#800080; '>}</span>\n</pre>\n",
    	"relatedTo": "<ul>\n\t<li>\n\t\tJVN#78601526  GREE for Android vulnerable to directory traversal: <a href=\"https://www.securecoding.cert.org/confluence/display/android/DRD08-J.+Always+canonicalize+a+URL+received+by+a+content+provider\">https://www.securecoding.cert.org/confluence/display/android/DRD08-J.+Always+canonicalize+a+URL+received+by+a+content+provider</a>\n\t</li>\n</ul>\n\n",
    	"intro": "<p>\n    Content Providers are databases addressable by their\napplication-defined URIs. They are used for both persistent\ninternal data storage and as a mechanism for\nsharing information between applications.\n</p>\n<p>\n\tBy using the ContentProvider.openFile() method, you can provide a facility for another application to access your application data (file). Depending on the implementation of ContentProvider, use of the method can lead to a directory traversal vulnerability. Hence, when exchanging a file through a content provider, the path should be canonicalized before it is used.\n</p>\n",
    	"heading": "Android File Traversal Vulnerability via Content Provider",
    	"businessImplication": "<p>\n    Directory Traversal exploits allow attackers to escape the context of the sandboxed application and read/write local files compromising the application/device.\n</p>\n",
    	"uuid": "53e692ce-d3bb-40eb-bb7d-ae368413fb83",
    	"id": 46,
    	"type": "vulnerabilitie",
    	"name": "Android File Traversal Vulnerability via Content Provider",
    	"compliant": "By using the canonicalized path, directory traversal will be mitigated even when a doubly-encoded path is supplied.\n<pre style='color:#000000;background:#ffffff;'><span style='color:#800000; font-weight:bold; '>private</span> <span style='color:#800000; font-weight:bold; '>static</span> String IMAGE_DIRECTORY = localFile.getAbsolutePath()<span style='color:#808030; '>;</span>\n  <span style='color:#800000; font-weight:bold; '>public</span> ParcelFileDescriptor openFile(Uri paramUri, String paramString)\n\t  <span style='color:#800000; font-weight:bold; '>throws</span> FileNotFoundException <span style='color:#800080; '>{</span>\n\t<span style='color:#bb7977; font-weight:bold; '>String</span> decodedUriString <span style='color:#808030; '>=</span> Uri<span style='color:#808030; '>.</span>decode<span style='color:#808030; '>(</span>paramUri<span style='color:#808030; '>.</span>toString<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>\n\t<span style='color:#bb7977; font-weight:bold; '>File</span> file <span style='color:#808030; '>=</span> <span style='color:#800000; font-weight:bold; '>new</span> <span style='color:#bb7977; font-weight:bold; '>File</span><span style='color:#808030; '>(</span>IMAGE_DIRECTORY<span style='color:#808030; '>,</span> Uri<span style='color:#808030; '>.</span>parse<span style='color:#808030; '>(</span>decodedUriString<span style='color:#808030; '>)</span><span style='color:#808030; '>.</span>getLastPathSegment<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>\n\t<span style='color:#800000; font-weight:bold; '>if</span> <span style='color:#808030; '>(</span>file<span style='color:#808030; '>.</span>getCanonicalPath<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span><span style='color:#808030; '>.</span>indexOf<span style='color:#808030; '>(</span>localFile<span style='color:#808030; '>.</span>getCanonicalPath<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span> <span style='color:#808030; '>!</span><span style='color:#808030; '>=</span> <span style='color:#008c00; '>0</span><span style='color:#808030; '>)</span> <span style='color:#800080; '>{</span>\n\t  <span style='color:#800000; font-weight:bold; '>throw</span> <span style='color:#800000; font-weight:bold; '>new</span> <span style='color:#bb7977; font-weight:bold; '>IllegalArgumentException</span><span style='color:#808030; '>(</span><span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>\n\t<span style='color:#800080; '>}</span>\n\t<span style='color:#800000; font-weight:bold; '>return</span> ParcelFileDescriptor<span style='color:#808030; '>.</span>open<span style='color:#808030; '>(</span>file<span style='color:#808030; '>,</span> ParcelFileDescriptor<span style='color:#808030; '>.</span>MODE_READ_ONLY<span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>\n  <span style='color:#800080; '>}</span>\n</pre>\n\n<br>For example, the following double encoded string will circumvent the fix.\n<br>\n<br><code>&nbsp;&nbsp;&nbsp; %252E%252E%252F%252E%252E%252F%252E%252E%252Fdata%252Fdata%252Fcom.example.android.app%252Fshared_prefs%252FExample.xml</code>\n<br>\n<br>The first call of <code>Uri.getLastPathSegment()</code> will decode \"%25\" to \"%\" and return the string:\n<br>\n<br>&nbsp;<code>&nbsp;&nbsp; %2E%2E%2F%2E%2E%2F%2E%2E%2Fdata%2Fdata%2Fcom.example.android.app%2Fshared_prefs%2FExample.xml</code>\n<br>\n<br>When this string is passed to the second Uri.getLastPathSegment(), \"%2E\" and \"%2F\" will be decoded and the result will be:\n<br>\n<br>&nbsp;<code>&nbsp;&nbsp; ../../../data/data/com.example.android.app/shared_prefs/Example.xml</code>\n</p>\n",
    	"types": [1],
    	"successMessage": "Application seems not to be affected by directory traversal attacks via content provider"
    }, {
    	"description": "A content provider permission was set to allows access from any other app on the device. Content providers may contain sensitive information about an app and therefore should not be shared.",
    	"question": "Does the Content Provider in the App Protected?",
    	"nonCompliant": "<p>\n    MovatwiTouch, a Twitter client application, used a content provider to manage Twitter's consumer key, consumer secret, and access token. However, the content provider was made public, which enabled applications installed on users' devices to access this sensitive information.\n</p>\n\n<p>\n    The following entry in the AndroidManifest.xml does not have the android:exported attribute, which means, before API Level 16, the content provider is made public:\n</p>\n\n<h4>\n    AndroidManifest.xml\n</h4>\n\n<pre>\n&lt;provider android:name=&quot;.content.AccountProvider&quot;\nandroid:authorities=&quot;jp.co.vulnerable.accountprovider&quot; /&gt;\n</pre>\n",
    	"relatedTo": "<ul>\n    <li>\n        <a href=\"https://jvn.jp/en/jp/JVN90289505/\">JVN#90289505</a> Content provider in MovatwiTouch fails to restrict access permissions\n    </li>\n</ul>\n",
    	"intro": "<p>\n    The ContentProvider class provides a mechanism for managing and sharing data with other applications. When sharing a provider's data with other apps, access control should be carefully implemented to prohibit unauthorized access to sensitive data.\n</p>\n\n<p>\n    There are three ways to limit access to the content provider:\n</p>\n\n<ul>\n    <li>Public</li>\n    <li>Private</li>\n    <li>Restricted access</li>\n</ul>\n",
    	"heading": "Limit the accessibility of an app's sensitive contentprovider",
    	"businessImplication": "If security controls are not properly implemented, content providers can lead to client side attacks like SQL injection. This works similarly to traditional SQL injection attacks.\n",
    	"uuid": "1ef9985c-8ed0-4599-82a9-d33bf7cb7c64",
    	"id": 2,
    	"type": "vulnerabilitie",
    	"name": "Improper Content Provider Permissions",
    	"compliant": "<p>\n    The following entry in the AndroidManifest.xml file makes the content provider private so that other apps cannot access the data:\n</p>\n\n<pre>\n&lt;provider android:name=&quot;.content.AccountProvider&quot; android:exported=&quot;\nfalse&quot; android:authorities=&quot;jp.co.vulnerable.accountprovider&quot; /&gt;\n</pre>",
    	"types": [1],
    	"successMessage": "Application seems to properly implement SSL or HTTPS is not implemented"
    }, {
    	"description": "Debugging was enabled on the app which makes it easier for reverse engineers to hook a debugger to it. This allows dumping a stack trace and accessing debugging helper classes.",
    	"question": "Does the application has Debug Enabled?",
    	"nonCompliant": "<p>\n    This non-compliant code example shows an app that has the android:debuggable attribute set to true being accessed to reveal sensitive data.\n</p>\n\n<pre>\n$ adb shell\nshell@android:/ $ run-as com.example.someapp sh\nshell@android:/data/data/com.example.someapp $ id\nuid=10060(app_60) gid=10060(app_60)\nshell@android:/data/data/com.example.someapp $ ls files/\nsecret_data.txt\nshell@android:/data/data/com.example.some $ cat files/secret_data.txt\npassword=GoogolPlex\naccount_number=31974286\n</pre>\n\n<p>\n    Clearly, with the android:debuggable attribute set to true, sensitive date related to the app can be revealed to any user.\n</p>",
    	"relatedTo": "",
    	"intro": "<p>\n    Android allows the attribute android:debuggable to be set to true so that the app can be debugged.  By default this attribute is disabled, i.e., it is set to false, but it may be set to true to help with debugging during development of the app.  However, an app should never be released with this attribute set to true as it enables users to gain access to details of the app that should be kept secure.  With the attribute set to true, users can debug the app even without access to its source code.\n</p>",
    	"heading": "Do not release apps that are debuggable",
    	"businessImplication": "Applications can write sensitive data in debugging logs. Setting the logging level to FINE results in log messages being written for all of the data transmitted between the user's device and the server.\n",
    	"uuid": "5cad533f-8134-49af-ba93-44d091e7d2fc",
    	"id": 3,
    	"type": "vulnerabilitie",
    	"name": "Application Debug Enabled",
    	"compliant": "<p>\n    Ensure that the android:debuggable attribute is set to false before the app is released:\n</p>\n\n<pre>\nandroid:debuggable=\"false\"\n</pre>\n\n<p>\n    Note that some development environments (including Eclipse/ADT and Ant) automatically set android:debuggable to true for incremental or debugging builds but set it to false for release builds.\n</p>",
    	"types": [1],
    	"successMessage": "Debugging was disabled"
    }, {
    	"description": "SecKeyEncrypt determines how to encrypt data from a PUBLIC KEY in iOS",
    	"question": "Does the Application uses proper SecKeyEncrypt implementation?",
    	"nonCompliant": "",
    	"relatedTo": "",
    	"intro": "<p>\n    Most of the time iOS handles all the encryption. It automatically encrypts\n    and decrypts HTTPS for network traffic and manages encrypted files using file protection.\n</p>\n<p>    But in case of custom implementation SecKeyEncrypt and SecKeyDecrypt is called</p>\n",
    	"heading": "iOS SecKeyEncrypt implementation",
    	"businessImplication": "",
    	"uuid": "1872b33f-7c07-423a-b622-09590b3f6d4a",
    	"id": 48,
    	"type": "vulnerabilitie",
    	"name": "iOS SecKeyEncrypt implementation",
    	"compliant": "",
    	"types": [2],
    	"successMessage": "The application seems to be using proper SecKeyEncrypt or might not have any implementation of SecKeyEncrypt"
    }, {
    	"description": "Application using older version of Phonegap has Javascript Injection Vulnerability",
    	"question": "Does the application have Javascript Injection vulnerability via PhoneGap",
    	"nonCompliant": "",
    	"relatedTo": "",
    	"intro": "<p>\nPhoneGap uses web technology to help bridge the gap between mobile and web.\n</p><p>\nApplications built for PhoneGap are hybrid apps, and are neither fully native or truly web-based, living somewhere in between. Because mobile OSes don't natively support HTML5 and JavaScript, PhoneGap apps use WebView, a web container that allows mobile devices to execute JavaScript and HTML5. WebView (called various terms for differing platforms) helps bridge the gap between web and mobile, and various plugins help make an application more robust and native-feeling.\n</p><p>\nCommunicating with each OS, PhoneGap uses different APIs (built by PhoneGap) and plugins (both native and custom), which act as the bridge between each platform's native language and the PhoneGap script. Out of the box, PhoneGap comes with APIs for Camera, Contacts, Compass, Media, FileSystem and more. Plugins extend those functionalities not accessible with the available APIs.\n</p>\n",
    	"heading": "PhoneGap JavaScript Injection",
    	"businessImplication": "<p>\n    With Cordova 3.5.0 or prior, attackers may:\n    <ul>\n        <li>Open and send data to arbitrary applications.</li>\n        <li>Bypass the HTTP whitelist and connect to arbitrary servers.</li>\n        <li>Change the start page via a crafted intent URL.</li>\n    </ul>\n</p>\n\n",
    	"uuid": "c7a0f21f-935d-4272-ae44-f5421dd197a3",
    	"id": 29,
    	"type": "vulnerabilitie",
    	"name": "PhoneGap JavaScript Injection",
    	"compliant": "<p>\n    Upgrade Phonegap or Apache Cordova to the latest version.\n</p>\n",
    	"types": [1],
    	"successMessage": "The application seems not to be affected by JS Injection via Phonegap"
    }, {
    	"description": "In phonegap if regex is used to whitelist, this checks if https can be bypassed from that regex",
    	"question": "Does the application use wrong regex for whitelisting in phonegap ?",
    	"nonCompliant": "",
    	"relatedTo": "",
    	"intro": "<p>\n    In order to ensure that a Cordova WebView only allows requests to URLs in the configured whitelist, the framework overrides Android's shouldInterceptRequest()\n</p>\n<p>\n    The use of shouldInterceptRequest() to provide the whitelisting mechanism is problematic in that it is used to intercept only certain requests (such as those serviced over HTTP/S or through the file URI). There may be protocols for which this function is not called by the Android framework. As of Android 4.4 KitKat, the WebView is rendered by Chromium and supports Web Sockets which one such protocol. An attacker can therefore make use of a WebSocket connection to bypass the Cordova's white-listing mechanism.\n</p>\n",
    	"heading": "Android bypass HTTPS whitelist in Phonegap App",
    	"businessImplication": "<p>\n    An attacker can bypass the Cordova's white-listing mechanism and initiate connections to unauthorized remote servers. This may aid in further attacks.\n</p>\n\n",
    	"uuid": "dc9f6401-b3e7-4659-b0c7-7c78a9edd985",
    	"id": 33,
    	"type": "vulnerabilitie",
    	"name": "Android bypass HTTPS whitelist in Phonegap App",
    	"compliant": "<p>\n    Domain whitelisting is a security model that controls access to external domains over which you application has no control. Cordova's default security policy allows access to any site. Before moving your application to production, you should formulate a whitelist and allow access to specific network domains and subdomains.\n</p>\n\n<p>\n    Cordova adheres to the W3C Widget Access specification, which relies on the &lt;access&gt; element within the app's config.xml file to enable network access to specific domains. For projects that rely on the CLI workflow described in The Command-Line Interface, this file is located in the project's top-level directory. Otherwise for platform-specific development paths, locations are listed in the sections below:\n</p>\n\n</p>The following examples demonstrate whitelist syntax:</p>\n\n<p><b>Access to google.com:</b></p>\n\n<pre style='color:#000000;background:#ffffff;'><span style='color:#a65700; '>&lt;</span><span style='color:#5f5035; '>access</span><span style='color:#274796; '> origin</span><span style='color:#808030; '>=</span><span style='color:#0000e6; '>\"http://google.com\"</span><span style='color:#274796; '> </span><span style='color:#a65700; '>/></span>\n</pre>\n\n<p><b>Access to the secure google.com (https://):</b></p>\n<pre style='color:#000000;background:#ffffff;'><span style='color:#a65700; '>&lt;</span><span style='color:#5f5035; '>access</span><span style='color:#274796; '> origin</span><span style='color:#808030; '>=</span><span style='color:#0000e6; '>\"https://google.com\"</span><span style='color:#274796; '> </span><span style='color:#a65700; '>/></span>\n</pre>\n\n<p><b>Access to the subdomain maps.google.com:</b></p>\n<pre style='color:#000000;background:#ffffff;'><span style='color:#a65700; '>&lt;</span><span style='color:#5f5035; '>access</span><span style='color:#274796; '> origin</span><span style='color:#808030; '>=</span><span style='color:#0000e6; '>\"http://maps.google.com\"</span><span style='color:#274796; '> </span><span style='color:#a65700; '>/></span>\n</pre>\n\n<p><b>Access to all the subdomains on google.com, for example mail.google.com and docs.google.com:</b></p>\n<pre style='color:#000000;background:#ffffff;'><span style='color:#a65700; '>&lt;</span><span style='color:#5f5035; '>access</span><span style='color:#274796; '> origin</span><span style='color:#808030; '>=</span><span style='color:#0000e6; '>\"http://*.google.com\"</span><span style='color:#274796; '> </span><span style='color:#a65700; '>/></span>\n</pre>\n\n<p><b>Access to all domains, for example, google.com and developer.mozilla.org:</b></p>\n<pre style='color:#000000;background:#ffffff;'><span style='color:#a65700; '>&lt;</span><span style='color:#5f5035; '>access</span><span style='color:#274796; '> origin</span><span style='color:#808030; '>=</span><span style='color:#0000e6; '>\"*\"</span><span style='color:#274796; '> </span><span style='color:#a65700; '>/></span>\n</pre>\n\n<b>This is the default value for newly created CLI projects which not secured.</b>\n<p>\n    Also Please Upgrade your Phonegap or Apache Cordova application to the latest Version\n</p>\n",
    	"types": [1],
    	"successMessage": "The phonegap application seems to be using proper regex check or probably doesn't uses phonegap"
    }, {
    	"description": "Buffer overflows, both on the stack and on the heap, are a major source of security vulnerabilities in C, Objective-C, and C++ code.",
    	"question": "Does the Application have Buffer Overflow or Underflow related vulnerabilities?",
    	"nonCompliant": "",
    	"relatedTo": "<ul>\n    <li><a href=\"https://developer.apple.com/library/ios/documentation/Security/Conceptual/SecureCodingGuide/Articles/BufferOverflows.html\"> Avoiding Buffer Overflows and Underflows by Apple</a></li>\n    <li><a href=\"http://books.google.de/books?id=huy8AwAAQBAJ&amp;printsec=frontcover#v=onepage&amp;q&amp;f=false\">Hacking and Securing iOS Applications</a></li>\n</ul>\n",
    	"intro": "<p>iOS has several mechanisms which prevent the application from being compromised at runtime. In order to understand the security issues that affect iOS applications, it is important to understand and to known the security features of the platform. The\n    main security features of iOS (<a href=\"http://www.apple.com/ipad/business/docs/iOS_Security_Feb14.pdf\">http://www.apple.com/ipad/business/docs/iOS_Security_Feb14.pdf</a>) are:</p>\n<ul>\n    <li>\n        <p><strong>Code signing</strong></p>\n        <ul>\n            <li>Ensures that all applications come from a approved source (using Apple-issued certificates)</li>\n        </ul>\n    </li>\n    <li>\n        <p><strong>Generic exploit mitigations</strong></p>\n        <ul>\n            <li>Address Space Layout Randomization (<a href=\"\" http://en.wikipedia.org/wiki/Address_space_layout_randomization \"\">ASLR</a>)\n                <ul>\n                    <li>Usually compiled using <code>-fPIE -pie</code></li>\n                </ul>\n            </li>\n            <li>Non Executable Memory (<a href=\"\" http://en.wikipedia.org/wiki/Address_space_layout_randomization \"\">ARM's Execute Never</a> feature)</li>\n            <li>Stack Smashing Protections (<a href=\"\" http://wiki.osdev.org/Stack_Smashing_Protector \"\">SSP</a>)\n                <ul>\n                    <li>Usually compiled with <code>-fstack-protector-all</code> flag</li>\n                </ul>\n            </li>\n        </ul>\n    </li>\n    <li>\n        <p><strong>Sandboxing</strong></p>\n        <ul>\n            <li>run applications as non-privileged user</li>\n            <li>3rd-party apps are restricted in accessing files stored by other apps</li>\n        </ul>\n    </li>\n    <li>\n        <p><strong>Memory Management</strong></p>\n        <ul>\n            <li>Automatic Reference Counting (<a href=\"\" https://developer.apple.com/library/ios/releasenotes/objectivec/rn-transitioningtoarc/Introduction/Introduction.html \"\">ARC</a>) protects applications from memory coruption issues by letting the compiler\n                do the memory management stuff</li>\n        </ul>\n    </li>\n</ul>\n",
    	"heading": "Buffer Overflows and Underflows",
    	"businessImplication": "",
    	"uuid": "cf2f7ca0-10a9-4987-a2c1-441d41850c05",
    	"id": 52,
    	"type": "vulnerabilitie",
    	"name": "Buffer Overflows and Underflows",
    	"compliant": "<p>Usually the <code>ipa</code> file will be decrypted at runtime by the kernel's mach loader. If the binary is encrypted or not is easily found using otool</p>\n<p>An example where the binary is encrypted:</p>\n<pre># otool -l OTHER_BINARY | grep -A 4 LC_ENCRYPTION_INFO\n       cmd LC_ENCRYPTION_INFO\n   cmdsize 20\n  cryptoff 16384\n cryptsize 10502144\n cryptid   1\n</pre>\n\n<ul>\n    <li><strong>ASLR</strong>\n        <ul>\n            <li>Usually the binary is compiled using the <code>PIE</code> flag</li>\n        </ul>\n    </li>\n</ul>\n\n<ul>\n    <li><strong>Stack Smashing Protection</strong>\n        <ul>\n            <li>iOS applications usually use <a href=\"\" http://en.wikipedia.org/wiki/Stack_buffer_overflow#Stack_canaries \"\"><strong>stack canaries</strong></a></li>\n            <li>therefore you should find certain symbols inside the binary (like <code>_stack_chk_guard</code> and <code>_stack_chk_fail</code>)</li>\n        </ul>\n    </li>\n</ul>\n\n<ul>\n    <li><strong>Automatic Reference Couting</strong>\n        <ul>\n            <li>this option can be enabled by activating the compiler option \"\"Objective-C Automatic Reference Counting\"\"</li>\n            <li>binaries built with this option should include symbols called <code>_objc_release</code>, <code>_obj_autorelease</code>, <code>_obj_storeStrong</code>, <code>_obj_retain</code></li>\n        </ul>\n    </li>\n</ul>\n",
    	"types": [3],
    	"successMessage": "The Application seems to be compiled properly without any Buffer overflow or underflow"
    }, {
    	"description": "The Android application exports Receiver for use by other applications, but does not properly restrict which applications can launch the component or access the data it contains.",
    	"question": "Is the Application Broadcast Receiver Exported?",
    	"nonCompliant": "",
    	"relatedTo": "",
    	"intro": "<p>\nBroadcast Receivers receive Intents sent to multiple\napplications. Receivers are triggered by the receipt\nof an appropriate Intent and then run in the background\nto handle the event. Receivers are typically\nshort-lived; they often relay messages to Activities or\nServices. There are three types of broadcast Intents:\nnormal, sticky, and ordered. Normal broadcasts are\nsent to all registered Receivers at once, and then they\ndisappear. Ordered broadcasts are delivered to one\nReceiver at a time; also, any Receiver in the delivery\nchain of an ordered broadcast can stop its propagation.\nBroadcast Receivers have the ability to set their\npriority level for receiving ordered broadcasts. Sticky\nbroadcasts remain accessible after they have been delivered\nand are re-broadcast to future Receivers.\n</p>\n<p> Exported Broadcast Receiver can be called by any other malicious application installed in the phone\n    to invoke the Broadcast Receiver leading to XAS (Cross Application Scripting)\n</p>\n",
    	"heading": "Android Unprotected Exported Receiver",
    	"businessImplication": "<p>\n    Attackers may use non-privileged services to intercept and track the user's activity. Furthermore, it may be possible to insert data that may maliciously modify the behaviour of the application.\n</p>\n",
    	"uuid": "35b5395f-3681-461b-b1bd-f786a4c0c7bc",
    	"id": 39,
    	"type": "vulnerabilitie",
    	"name": "Android Unprotected Exported Receiver",
    	"compliant": "<p>\n\tIf you are using a Broadcast Receiver for sharing data between only your own apps, it is preferable to use the android:protectionLevel attribute set to \"signature\" protection. Signature permissions do not require user confirmation, so they provide a better user experience and more controlled access to the Broadcast Receiver when the apps accessing the data are signed with the same key\n</p>\n<p>\n    If the Broadcast Receiver is called within itself, then don't export it or use Intent-Filter for custom permissions\n</p>\n",
    	"types": [1],
    	"successMessage": "The Broadcast Receiver in this App seems not to be exported or not implemented"
    }, {
    	"description": "The Android application exports a content providert for use by other applications, but does not properly restrict which applications can launch the component or access the data it contains.",
    	"question": "Is the Application Content Provider Exported?",
    	"nonCompliant": "",
    	"relatedTo": "",
    	"intro": "<p>\n    Content Providers are databases addressable by their\napplication-defined URIs. They are used for both persistent\ninternal data storage and as a mechanism for\nsharing information between applications.\n</p>\n<p> Exported Content Provider can be called by any other malicious application installed in the phone\n    to get the data via Content Provider leading to XAS (Cross Application Scripting)\n</p>\n",
    	"heading": "Android Unprotected Exported Provider",
    	"businessImplication": "<p>\n    Attackers may use non-privileged services to intercept and track the user's activity. Furthermore, it may be possible to insert data that may maliciously modify the behaviour of the application.\n</p>\n",
    	"uuid": "e4cf1b2a-ba79-4b92-b3bb-2a5a8ffc74a9",
    	"id": 41,
    	"type": "vulnerabilitie",
    	"name": "Android Unprotected Exported Provider",
    	"compliant": "<p>\n\tIf you are using a Content Provider for sharing data between only your own apps, it is preferable to use the android:protectionLevel attribute set to \"signature\" protection. Signature permissions do not require user confirmation, so they provide a better user experience and more controlled access to the content provider data when the apps accessing the data are signed with the same key\n</p>\n<p>\n    If the Content Provider is called within itself, then don't export it or use Intent-Filter for custom permissions\n</p>\n",
    	"types": [1],
    	"successMessage": "The Content Provider in this App seems not to be exported or not implemented"
    }, {
    	"description": "Traces of Crypto Keys which might be intermediate keys used when loading the different libraries.",
    	"question": "Is your Application using insecure AES encryption method?",
    	"nonCompliant": "",
    	"relatedTo": "",
    	"intro": "<p>\n    The predominant Android cryptographic security provider API defaults to using an insecure AES encryption method: ECB block cipher mode for AES encryption. Android's default cryptographic security provider (since version 2.1) is BouncyCastle. \n</p>\n\n<p>\n    NOTE: Java also chose ECB as a default value when only the AES encryption method is chosen. So, this rule also applies to Java, but for Java's different default cryptographic security provider. Oracle Java's default cryptographic security provider is SunJCE.\n</p>\n\n<p>\n    Default behaviors of cryptographic libraries used in Android systems often do not use recommended practices. For example, the predominant Android Java security provider API defaults to using an insecure AES encryption method: ECB block cipher mode for AES encryption. Extensive app testing by [Egele 2013] has shown that the following 6 rules are often not followed, resulting in 88% of apps with cryptographic APIs on Google Play making at least one mistake. \n</p>\n\n<p>\n    Six common cryptography rules they tested:\n</p>\n\n<ol>\n    <li>Do not use ECB mode for encryption.</li>\n    <li>Do not use a non-random IV for CBC encryption.</li>\n    <li>Do not use constant encryption keys.</li>\n    <li>Do not use constant salts for PBE.</li>\n    <li>Do not use fewer than 1,000 iterations for PBE.</li>\n    <li>Do not use static seeds to seed SecureRandom(\u00b7).</li>\n</ol>",
    	"heading": "Do not use default Android cryptographic security provider encryption and follow the recommended practices",
    	"businessImplication": "Broken cryptography will result in the following:\n<ul>\n    <li>Privacy Violations</li>\n    <li>Information Theft</li>\n    <li>Code Theft</li>\n    <li>Intellectual Property Theft</li>\n    <li>Reputational Damage</li>\n</ul>\n",
    	"uuid": "40a59e96-fec6-46a4-9aa5-205002776b00",
    	"id": 16,
    	"type": "vulnerabilitie",
    	"name": "Derived Crypto Keys",
    	"compliant": "<p>\n    The following are the rules which should be followed while using encryption\n</p>\n<ul>\n    <li>\n        If AES encryption is used, always pair it with ECB (Electronic Codebook)\n    </li>\n    <li>\n        Never use just \"AES\" as encryption because it defaults to AES/CBC\n    </li>\n    <li>\n        Always use a padding along with the encryption, for Example \"RSA/ECB\" is insecured but \"RSA/ECB/PKCS7\" is better\n    </li>\n    <li>\n        Never use older algorithim like DES (Data Encryption Standard)\n    </li>\n</ul>\n",
    	"types": [1, 2],
    	"successMessage": "Application seems to be using the correct cryptographic encryption method or is not using it at all"
    }, {
    	"description": "The Android application exports Broadcast Receiver for use by other applications, but does not properly restrict which applications can launch the component or access the data it containscustom signature defined by android:protectionLevel.",
    	"question": "Is the Application Broadcast Receiver Exported without Protection Level?",
    	"nonCompliant": "",
    	"relatedTo": "",
    	"intro": "<p>\nBroadcast Receivers receive Intents sent to multiple\napplications. Receivers are triggered by the receipt\nof an appropriate Intent and then run in the background\nto handle the event. Receivers are typically\nshort-lived; they often relay messages to Activities or\nServices. There are three types of broadcast Intents:\nnormal, sticky, and ordered. Normal broadcasts are\nsent to all registered Receivers at once, and then they\ndisappear. Ordered broadcasts are delivered to one\nReceiver at a time; also, any Receiver in the delivery\nchain of an ordered broadcast can stop its propagation.\nBroadcast Receivers have the ability to set their\npriority level for receiving ordered broadcasts. Sticky\nbroadcasts remain accessible after they have been delivered\nand are re-broadcast to future Receivers.\n</p>\n<p> Exported Unprotected Broadcast Receiver can be called by any other malicious application installed in the phone\n    to invoke the Broadcast Receiver leading to XAS (Cross Application Scripting)\n</p>\n",
    	"heading": "Android non-signature exported Receiver",
    	"businessImplication": "<p>\n    Attackers may use non-privileged services to intercept and track the user's activity. Furthermore, it may be possible to insert data that may maliciously modify the behaviour of the application.\n</p>\n",
    	"uuid": "9bfab886-10fd-484f-b14e-bba4e5d14372",
    	"id": 43,
    	"type": "vulnerabilitie",
    	"name": "Android non-signature exported Receiver",
    	"compliant": "<p>\n\tIf you are using a Broadcast Receiver for sharing data between only your own apps, it is preferable to use the android:protectionLevel attribute set to \"signature\" protection. Signature permissions do not require user confirmation, so they provide a better user experience and more controlled access to the Broadcast Receiver when the apps accessing the data are signed with the same key\n</p>\n",
    	"types": [1],
    	"successMessage": "The Broadcast Receiver in this App seems not to be exported with ProtectionLevel or not implemented"
    }, {
    	"description": "Logical Flaws through API which can bypass Authorization and get information about other Users and Reset Passwords. Authorization and Authenticated sessions were not properly validated on both Client or Server Side",
    	"question": "Was Logical Flaws found in the API?",
    	"nonCompliant": "",
    	"relatedTo": "<p>Automated tools find it hard to understand context, hence it's up to a person to perform these kinds of tests. The following two examples will illustrate how understanding the functionality of the application, the developer's intentions, and some creative \"out-of-the-box\" thinking can break the application's logic. The first example starts with a simplistic parameter manipulation, whereas the second is a real world example of a multi-step process leading to completely subvert the application.\n</p>\n<p><br>\n<b>Example 1</b>:\n</p>\n<p>Suppose an e-commerce site allows users to select items to purchase, view a summary page and then tender the sale. What if an attacker was able to go back to the summary page, maintaining their same valid session and inject a lower cost for an item and complete the transaction, and then check out?\n</p>\n<p><br>\n<b>Example 2</b>:\n</p>\n<p>Holding/locking resources and keeping others from purchases these items online may result in attackers purchasing items at a lower price. The countermeasure to this problem is to implement timeouts and mechanisms to ensure that only the correct price can be charged.\n</p>\n<p><br>\n<b>Example 3</b>:\n</p>\n<p>What if a user was able to start a transaction linked to their club/loyalty account and then after points have been added to their account cancel out of the transaction?  Will the points/credits still be applied to their account?\n</p>\n",
    	"intro": "<p> Most security problems are weaknesses in an application that result from a broken or missing security control (authentication, access control, input validation, etc...). By contrast, business logic vulnerabilities are ways of using the legitimate processing flow of an application in a way that results in a negative consequence to the organization.\n</p>\n<p>Too often, the business logic category is used for vulnerabilities that can't be scanned for automatically. This makes it very difficult to apply any kind of categorization scheme. Business logic problems are different from authentication problems and every other category. There are many significant business logic vulnerabilities, but they are far less common than the type of items.</p>\n",
    	"heading": "Business Logic Vulnerability.",
    	"businessImplication": "",
    	"uuid": "f9620afb-63a9-4aca-936e-667b1faeec46",
    	"id": 18,
    	"type": "vulnerabilitie",
    	"name": "Business Logic",
    	"compliant": "<p>\nThe following should be checked and properly fixed\n</p>\n<ul>\n<li>Check for OTP in server side rather than in Client Side</li>\n<li>Use proper Authentication not same authorization token like <b>Authorization: Basic aW50ZXJhY3Rpb25vbmU6bW9iaTEyMw==</b> which translates to: <b>interactionone:mobi123</b></li>\n<li>never use passwords like mobi123</li>\n</ul>\n",
    	"types": [3],
    	"successMessage": "No logical flaws were found"
    }, {
    	"description": "Core Data is often used by applications to store data to improve application performance",
    	"question": "Does this application store sensitive information in CoreData?",
    	"nonCompliant": "",
    	"relatedTo": "",
    	"intro": "<p>\n    Core Data is used by the applications to store data which can be further used by the application at later stages. However, these databases don't have any built-in support for encryption and hence, all the information is stored in plain-text format in these files. If an application stores user credentials or some sensitive user specific data in this database then it can be accessed by any third party.\n</p>\n",
    	"heading": "Carefully Manage DEBUG Logs in NSLog",
    	"businessImplication": "<p>\nFailure to use encryption routines may result in the database and its associated data including user credentials getting compromised.\n</p>\n",
    	"uuid": "032b1f71-0cb0-4738-8183-7c8238e4d805",
    	"id": 24,
    	"type": "vulnerabilitie",
    	"name": "Avoid storing sensitive data in CoreData",
    	"compliant": "<p>\n    It is suggested to use custom encryption while storing data in Core Data.\n</p>\n<p>\n    EncryptedStore is known to work successfully on iOS versions 6.0 through 9.3.4 to store CoreData in encrypted format\n</p>\n\n<p>If you wish to set a custom cache size and/or custom database URL: create an NSDictionary to set the options for your EncryptedStore, replacing customPasscode, customCacheSize, and/or customDatabaseURL:</p>\n\n<pre style='color:#000000;background:#ffffff;'>NSDictionary <span style='color:#808030; '>*</span>options <span style='color:#808030; '>=</span> <span style='color:#808030; '>@</span><span style='color:#800080; '>{</span> EncryptedStorePassphraseKey<span style='color:#800080; '>:</span> <span style='color:#808030; '>(</span>NSString <span style='color:#808030; '>*</span><span style='color:#808030; '>)</span> customPasscode<span style='color:#808030; '>,</span>\n<span style='color:#e34adc; '>&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;EncryptedStoreCacheSize:</span> <span style='color:#808030; '>(</span>NSNumber <span style='color:#808030; '>*</span><span style='color:#808030; '>)</span> customCacheSize<span style='color:#808030; '>,</span>\n<span style='color:#e34adc; '>&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;EncryptedStoreDatabaseLocation:</span> <span style='color:#808030; '>(</span>NSURL <span style='color:#808030; '>*</span><span style='color:#808030; '>)</span> customDatabaseURL\n                           <span style='color:#800080; '>}</span><span style='color:#800080; '>;</span>\n</pre>\nIn your application delegate source file (i.e. AppDelegate.m) you should see\n\n<pre style='color:#000000;background:#ffffff;'>NSPersistentStoreCoordinator <span style='color:#44aadd; '>*</span>coordinator <span style='color:#808030; '>=</span> <span style='color:#808030; '>[</span>self persistentStoreCoordinator<span style='color:#808030; '>]</span><span style='color:#808030; '>;</span>\n</pre>\nIf you created an NSDictionary with custom options, replace that line with\n\n<pre style='color:#000000;background:#ffffff;'>NSPersistentStoreCoordinator <span style='color:#44aadd; '>*</span>coordinator <span style='color:#808030; '>=</span> <span style='color:#808030; '>[</span>EncryptedStore makeStoreWithOptions<span style='color:#808030; '>:</span>options managedObjectModel<span style='color:#808030; '>:</span><span style='color:#808030; '>[</span>self managedObjectModel<span style='color:#808030; '>]</span><span style='color:#808030; '>]</span><span style='color:#808030; '>;</span>\n</pre>\n\nThe Project is available at <a href=\"https://github.com/project-imas/encrypted-core-data\">https://github.com/project-imas/encrypted-core-data</a>\n",
    	"types": [2],
    	"successMessage": "this application doesn't store sensitive information in CoreData"
    }, {
    	"description": "Exposing sensitive data like passwords in pasteboard/clipboard which can be used by other applications",
    	"question": "Does the Application allows copy/paste functionalities in sensitive fields?",
    	"nonCompliant": "Not in compliance with OWASP Mobile Top 10 for M8 - Side Channel Data Leakage\n\nA general Pasteboard implementation looks like the following\n\n<pre style='color:#000000;background:#ffffff;'><span style='color:#696969; '>// Setup, let's put some stuff in the UIPasteboard</span>\n\nlet pasteboard <span style='color:#808030; '>=</span> UIPasteboard<span style='color:#808030; '>.</span>general<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span>\npasteboard<span style='color:#808030; '>.</span>string <span style='color:#808030; '>=</span> <span style='color:#800000; '>\"</span><span style='color:#0000e6; '>andy</span><span style='color:#800000; '>\"</span>\npasteboard<span style='color:#808030; '>.</span>url <span style='color:#808030; '>=</span> URL<span style='color:#808030; '>(</span>string<span style='color:#800080; '>:</span> <span style='color:#800000; '>\"</span><span style='color:#0000e6; '>http://cleanswifter.com</span><span style='color:#800000; '>\"</span><span style='color:#808030; '>)</span>\npasteboard<span style='color:#808030; '>.</span>image <span style='color:#808030; '>=</span> UIImage<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span>\npasteboard<span style='color:#808030; '>.</span>color <span style='color:#808030; '>=</span> UIColor<span style='color:#808030; '>.</span>red<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span>\n\n<span style='color:#696969; '>// Understanding the UIPasteboard contents</span>\n\n<span style='color:#800000; font-weight:bold; '>if</span> pasteboard<span style='color:#808030; '>.</span>hasStrings <span style='color:#800080; '>{</span>\n    print<span style='color:#808030; '>(</span><span style='color:#800000; '>\"</span><span style='color:#0000e6; '>The pasteboard has Strings!</span><span style='color:#800000; '>\"</span><span style='color:#808030; '>)</span>\n<span style='color:#800080; '>}</span>\n<span style='color:#800000; font-weight:bold; '>if</span> pasteboard<span style='color:#808030; '>.</span>hasURLs <span style='color:#800080; '>{</span>\n    print<span style='color:#808030; '>(</span><span style='color:#800000; '>\"</span><span style='color:#0000e6; '>The pasteboard has URLs!</span><span style='color:#800000; '>\"</span><span style='color:#808030; '>)</span>\n<span style='color:#800080; '>}</span>\n<span style='color:#800000; font-weight:bold; '>if</span> pasteboard<span style='color:#808030; '>.</span>hasImages <span style='color:#800080; '>{</span>\n    print<span style='color:#808030; '>(</span><span style='color:#800000; '>\"</span><span style='color:#0000e6; '>The pasteboard has images!</span><span style='color:#800000; '>\"</span><span style='color:#808030; '>)</span>\n<span style='color:#800080; '>}</span>\n<span style='color:#800000; font-weight:bold; '>if</span> pasteboard<span style='color:#808030; '>.</span>hasColors <span style='color:#800080; '>{</span>\n    print<span style='color:#808030; '>(</span><span style='color:#800000; '>\"</span><span style='color:#0000e6; '>The pasteboard has colors!</span><span style='color:#800000; '>\"</span><span style='color:#808030; '>)</span>\n<span style='color:#800080; '>}</span>\n</pre>\n",
    	"relatedTo": "<ul>\n    <li><a href=\"https://jvn.jp/en/jp/JVN76662040/\">JVN#76662040</a> - Clipboard contents alteration vulnerability in Grani</li>\n    <li><a href=\"http://jvn.jp/en/jp/JVN64764004/index.html\">JVN#64764004</a>Clipboard contents alteration vulnerability in Sleipnir</li>\n</ul>\n",
    	"intro": "<p>\nBoth iOS and Android support copy/paste. Sensitive data may be stored, recoverable, or could be modified from the clipboard in clear text, regardless of whether the source of the data was initially encrypted. If it is in plaintext at the moment the user copies it, it will be in plaintext when other applications access the clipboard.\n</p>\n",
    	"heading": "Exposed Pasteboard Data",
    	"businessImplication": "<p>\n    Failing to take proper precautions may result in loss of login credentials, passwords and other sensitive data stored in the clipboard.\n</p>\n",
    	"uuid": "f9bb138f-4e4e-4bb9-b4db-6b33c22b5659",
    	"id": 51,
    	"type": "vulnerabilitie",
    	"name": "Exposed Pasteboard Data",
    	"compliant": "<p>Use application specific pasteboard. Also mark fields like passwords as secure so that their data can never be copied\n</p>\n<p>Pasteboards may be public or private. Public pasteboards are called system pasteboards; private pasteboards are created by apps, and hence are called app pasteboards. Pasteboards must have unique names. UIPasteboard defines two system pasteboards, each with its own name and purpose:\n</p>\n<ul>\n<li>UIPasteboardNameGeneral is for cut, copy, and paste operations involving a wide range of data types. You can obtain a singleton object representing the General pasteboard by invoking the generalPasteboard class method.</li>\n<li>UIPasteboardNameFind is for search operations. The string currently typed by the user in the search bar (UISearchBar) is written to this pasteboard, and thus can be shared between apps. You can obtain an object representing the Find pasteboard by calling the pasteboardWithName:create: class method, passing in UIPasteboardNameFind for the name.</li>\n</ul>\n<p>Typically you use one of the system-defined pasteboards, but if necessary you can create your own app pasteboard using pasteboardWithName:create: If you invoke pasteboardWithUniqueName, UIPasteboard gives you a uniquely-named app pasteboard. You can discover the name of a pasteboard through its name property</p>\n\n<p>Clear the Pasteboard once the application enters background. You can do this by adding the following line in the method - (void)applicationDidEnterBackground:(UIApplication *)application in AppDelegate. If you are using a custom Pasteboard, replace [UIPasteboard generalPasteboard] with your custom pasteboard.</p>\n<pre style='color:#000000;background:#ffffff;'>- <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>void</span><span style='color:#808030; '>)</span>applicationDidEnterBackground<span style='color:#800080; '>:</span><span style='color:#808030; '>(</span>UIApplication <span style='color:#808030; '>*</span><span style='color:#808030; '>)</span>application\n<span style='color:#800080; '>{</span>\n<span style='color:#696969; '>// Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.</span>\n<span style='color:#696969; '>// If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.</span>\n<span style='color:#808030; '>[</span>UIPasteboard generalPasteboard<span style='color:#808030; '>]</span><span style='color:#808030; '>.</span>items <span style='color:#808030; '>=</span> nil<span style='color:#800080; '>;</span>\n<span style='color:#800080; '>}</span>\n</pre>\n",
    	"types": [3],
    	"successMessage": "The Application doesn't requires or has proper protection from general pasteboard"
    }, {
    	"description": "A custom permission  controls whether or not other applications can access the affected apps features. The use of the dangerous label places no restrictions on which apps can access the application declaring the permission but the user will be warned that the dangerous permission is required during installation.",
    	"question": "Protection level set in custom permission are safe?",
    	"nonCompliant": "",
    	"relatedTo": "",
    	"intro": "<p>\n    If an app is using a granted permission to respond to a calling app then it must check that the calling app as that permission as well. Otherwise, the responding app may be granting privileges to the calling app that it should not have.  (This is sometimes called the \"confused deputy\" problem.)\n</p>\n\n<p>\n    The methods Context.checkCallingPermission() and Context.enforceCallingPermission() can be used to ensure that the calling app has the correct permissions.\n</p>",
    	"heading": "Check that a calling app has appropriate permissions before responding",
    	"businessImplication": "",
    	"uuid": "adf35813-5c0d-4851-aa69-cfadf63d5a64",
    	"id": 4,
    	"type": "vulnerabilitie",
    	"name": "Improper Custom Permission",
    	"compliant": "<p>Remove custom permissions which are not required from the custom-permission sets defined in the <i>AndroidManifest.xml</i></p>\n",
    	"types": [1],
    	"successMessage": "No custom Permission were found or the protection level seems to be sufficient"
    }, {
    	"description": "The default handling of WebViewClient should handle the onreceivedsslerror properly, which might break certificate validation",
    	"question": "Is this application using WebViewClient correctly handling the onreceivedsslerror method?",
    	"nonCompliant": "<p>The following code shows how onReceivedSslError was used to bypass the check in WebViewClient:</p>\n\n<pre><span style=' color: Blue;'>public</span> <span style=' color: Blue;'>class</span> SSLAcceptingWebViewClient <span style=' color: Blue;'>extends</span> CordovaWebViewClient {\n    <span style=' color: Blue;'>public</span> SSLAcceptingWebViewClient(DroidGap ctx) {\n        <span style=' color: Blue;'>super</span>(ctx);\n    }\n    @Override\n    <span style=' color: Blue;'>public</span> <span style=' color: Blue;'>void</span> onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {\n        <span style=' color: Green;'>//proceed or pass</span>\n        handler.proceed(); <span style=' color: Green;'>// Ignore SSL certificate errors</span>\n    }\n\n}\n</pre>\n",
    	"relatedTo": "<ul>\n    <li><a href=\"http://jvn.jp/en/jp/JVN39218538/\">JVN#39218538</a> Pizza Hut Japan Official Order App for Android has a problem whereby it fails to verify SSL server certificates.</li>\n    <li><a href=\"http://jvn.jp/en/jp/JVN75084836/\">JVN#75084836</a> Yome Collection for Android has a problem with management of IMEI.</li>\n    <li><a href=\"http://jvn.jp/en/jp/JVN68156832/\">JVN#68156832</a> Yafuoku! contains an issue where it fails to verify SSL server certificates</li>\n</ul>",
    	"intro": "<p>WebViews can introduce a number of security concerns and should be implemented carefully. In particular, many vulnerabilities have been discovered that exploit the use of the addJavscriptInterface API and bypassing onReceivedSslError check.\n</p>\n<p>\nWebView does support SSL/TLS, however, the blank screen is an indication that the WebView does not believe that the certificate is valid. This may happen with a certificate that is self-signed or a from a root auth that is not set up in android. However if that check is bypassed, then it removes all security from SSL.\n</p>\n",
    	"heading": "Webview Client doesn't handles secured connection properly",
    	"businessImplication": "<p>\nIf proper implementation of SSL is not used, sensitive data may leak from the vulnerable SSL communication channel.\n</p>\n\n",
    	"uuid": "f6233c52-d6dd-435a-9990-6267049807c6",
    	"id": 9,
    	"type": "vulnerabilitie",
    	"name": "App extends WebViewClient",
    	"compliant": "<p>\n    This can be fixed by using the onReceivedSslError to stop or notify the user and the application.\n</p>\n<pre><span style=' color: Blue;'>public</span> <span style=' color: Blue;'>void</span> onReceivedSslError(WebView view, SslErrorHandler handler, SslError error)  {\n    <span style=' color: Green;'>//STOP OR ALERT THE USER</span>\n}</pre>\n",
    	"types": [1],
    	"successMessage": "Application seems to be handling WebViewClient correctly or the Application has no implemetation of WebViewClient"
    }, {
    	"description": "An activity was found to be shared with other apps on the device without an intent filter or a permission requirement therefore leaving it accessible to any other application on the device.",
    	"question": "Is Activity in the Application Protected?",
    	"nonCompliant": "<p>\n    This non-compliant code example shows an AndroidManifest.xml file for an application that exports the activity to other apps, but does not restrict access to its sensitive activity:\n</p>\n\n<pre>\n&lt;activity android:configChanges=&quot;keyboard|keyboardHidden|orientation&quot; android:name=&quot;.media.yfrog.YfrogUploadDialog&quot; android:theme=&quot;@style/Vulnerable.Dialog&quot; android:windowSoftInputMode=&quot;stateAlwaysHidden&quot;&gt;           \n&lt;intent-filter android:icon=&quot;@drawable/yfrog_icon&quot; android:label=&quot;@string/YFROG&quot;&gt;\n    &lt;action android:name=&quot;jp.co.vulnerable.ACTION_UPLOAD&quot; /&gt;                \n    &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;                \n    &lt;data android:mimeType=&quot;image/*&quot; /&gt;                \n    &lt;data android:mimeType=&quot;video/*&quot; /&gt;            \n&lt;/intent-filter&gt;        \n&lt;/activity&gt;\n</pre>\n\n<p>\n    android:name refers to the name of the class that implements this activity. The name of the package is \"jp.co.vulnerable\" so the fully qualified name of the class implementing this activity is jp.co.vulnerable.media.yfrog.YfrogUploadDialog. Since the intent filter is defined, this activity is exported to other apps.\n</p>",
    	"relatedTo": "<ul>\n    <li><a href=\"https://jvn.jp/en/jp/JVN31860555/\">JVN#31860555</a>  Twicca fails to restrict access permissions  </li>\n</ul>",
    	"intro": "<p>\n    On Android, declaring an intent filter for an activity in the AndroidManifest.xml file means that the activity may be exported to other apps. If the activity is intended solely for the internal use of the app and an intent filter is declared, then any other apps, including malware, can activate the activity for unintended use.\n</p>\n\n<p>\n    In the case of the vulnerability in the Twicca app (in versions 0.7.0 through 0.9.30), by launching Twicca's activity, another app that does not have permission to access the SD card or network could upload images or movies stored on the SD card to a social networking service with the Twicca user's Twitter account.\n</p>\n",
    	"heading": "Restrict access to sensitive activities",
    	"businessImplication": "<p>\nUnauthorized apps may use vulnerable activities to perform malicious actions.\n</p>\n",
    	"uuid": "8b28975a-c5ad-45d4-b8bb-21574398fdbd",
    	"id": 12,
    	"type": "vulnerabilitie",
    	"name": "Unprotected Activities",
    	"compliant": "<ol>\n<li>\n\n    <p>\n        In this compliant solution the activity is not exported:\n    </p>\n\n    <pre>\n&lt;activity android:configChanges=&quot;keyboard|keyboardHidden|orientation&quot; android:name=&quot;.media.yfrog.YfrogUploadDialog&quot; android:theme=&quot;@style/ VulnerableTheme.Dialog&quot; android:windowSoftInputMode=&quot;stateAlwaysHidden&quot; android:exported=&quot;false&quot;&gt; \n&lt;/activity&gt;\n    </pre>\n\n    <p>\n        By declaring android:exported=\"false\" for an activity tag in the AndroidManifest.xml file, the activity is restricted to only accept intents from within the same app or from an app with the same user ID.\n    </p>\n</li>\n<li>\n\n    <p>\n        This vulnerability was fixed in Twicca v0.9.31. Instead of declaring the activity exported=\"false\" in AndroidManifest.xml, Twicca fixed this vulnerability by validating the caller of this activity. In the onCreate() method of the activity class, code was added to check if the package name of the caller is the same as the package name of itself. If the package names are different, the activity exits:\n    </p>\n\n    <pre>\npublic void onCreate(Bundle arg5) {\n    super.onCreate(arg5);...\n    ComponentName v0 = this.getCallingActivity();\n    if (v0 == null) {\n        this.finish();\n    } else if (!jp.r246.twicca.equals(v0.getPackageName())) {\n        this.finish();\n    } else {\n        this.a = this.getIntent().getData();\n        if (this.a == null) {\n            this.finish();\n        }...\n    }\n}\n    </pre>\n\n    <p>\n        An Android developer can arbitrarily choose a package name, so different app developers could choose the same package name. Therefore, it is generally not recommended to use the package name for validating the caller of the activity. The recommended alternative is to check the developer's certificate, instead of the package name.\n    </p>\n\n    <p>\n        However, considering the following facts, Twicca's solution may be logical and safe against the exploit:\n    </p>\n\n    <ul>\n        <li>Only one app with a particular package name can exist on Google Play.   </li>\n        <li>If a user tries to install an app whose package name already exists on the device, the installation either will fail or will overwrite the previously installed app.</li>\n    </ul>\n</li>\n</ol>\n",
    	"types": [1],
    	"successMessage": "Activities seems to be protected"
    }, {
    	"description": "Current Application was found to be writing logs to the system logs",
    	"question": "Is this Application giving out data through its App Log?",
    	"nonCompliant": "<ol>\n<li>\n\n<p>Facebook SDK for Android contained the following code which sends Facebook access tokens to log output in plain text format.</p>\n\n<pre>Log.d(<span style=' color: Maroon;'>\"Facebook-authorize\"</span>, <span style=' color: Maroon;'>\"Login Success! access_token=\"</span> +\n         getAccessToken() + <span style=' color: Maroon;'>\" expires=\"</span> + getAccessExpires());</pre>\n</li>\n\n<li>\n<p>Here is another example. A weather report for Android sent a user's location data to the log output as follows:</p>\n\n<pre>\nI/MyWeatherReport( 6483): Re-use MyWeatherReport data\nI/ ( 6483): GET JSON:\nhttp://example.com/smart/repo_piece.cgi?arc=0&lat=26.209026&lon=127.650803&rad=50&dir=-999&lim=52&category=1000\n</pre>\n\n<p>\nIf a user is using Android OS 4.0 or before, other applications with READ_LOGS permission can obtain the user's location\ninformation without declaring ACCESS_FINE_LOCATION permission in the manifest file.\n</p>\n</li>\n</ol>\n",
    	"relatedTo": "<ul>\n    <li>\n        Facebook SDK for Android: <a href=\"http://readwrite.com/2012/04/10/what-developers-and-users-can#awesm=~o9iqZAMlUPshPu\">http://readwrite.com/2012/04/10/what-developers-and-users-can#awesm=~o9iqZAMlUPshPu</a>\n    </li>\n    <li><a href=\"https://jvn.jp/en/jp/JVN23328321/\">JVN#23328321</a> Puella Magi Madoka Magica iP for Android vulnerable to information disclosure</li>\n    <li><a href=\"https://jvn.jp/en/jp/JVN86040029/\">JVN#86040029</a> Weathernews Touch for Android stores location information in the system log file</li>\n    <li><a href=\"https://jvn.jp/en/jp/JVN33159152/\">JVN#33159152</a> Loctouch for Android information management vulnerability</li>\n    <li><a href=\"https://jvn.jp/en/jp/JVN56923652/\">JVN#56923652</a> Monaca Debugger for Android information management vulnerability</li>\n</ul>",
    	"intro": "<p>\n    Android provides capabilities for an app to output logging information and obtain log output. Applications can send information to log output using the android.util.Log class. To obtain log output, applications can execute the logcat command.\n</p>",
    	"heading": "Do not log sensitive information",
    	"businessImplication": "<p>Sensitive data can inadvertently leak into the logs and may aid in further attacks</p>\n",
    	"uuid": "616869c7-7523-41e8-bfde-d98cfea920e3",
    	"id": 17,
    	"type": "vulnerabilitie",
    	"name": "Application Logs",
    	"compliant": "<p>Never use logs in production</p>\n<p>Find all </p>\n<pre style='color:#000000;background:#ffffff;'>Log.d() </pre> \nand comment/remove them \n<pre style='color:#000000;background:#ffffff;'><span style='color:#696969; '>//Log.d()</span></pre>\n</p>\n<p>Use exception parsers and crash-based-analytics tool capture crashes in production so that it can be debugged</p>\n",
    	"types": [1, 2],
    	"successMessage": "No Application logs were found"
    }, {
    	"description": "SSL Implementations are not proper in this application",
    	"question": "Does this application has probable SSL Error in implementation?",
    	"nonCompliant": "<p>The following code implements a custom MySSLSocketFactory class that inherits javax.net.ssl.SSLContext:</p>\n<pre><span style=' color: Blue;'>public</span> <span style=' color: Blue;'>class</span> InsecureSocketFactory <span style=' color: Blue;'>extends</span> SSLSocketFactory {\n    <span style=' color: Blue;'>protected</span> SSLSocketFactory _factory;\n    <span style=' color: Blue;'>public</span> InsecureSocketFactory() {\n        <span style=' color: Blue;'>try</span> {\n            SSLContext ctx = SSLContext.getInstance(<span style=' color: Maroon;'>\"SSL\"</span>);\n            ctx.init(<span style=' color: Blue;'>null</span>, <span style=' color: Blue;'>new</span> TrustManager[] { <span style=' color: Blue;'>new</span> InsecureTrustManager() }, <span style=' color: Blue;'>null</span>);\n            _factory = ctx.getSocketFactory();\n        } <span style=' color: Blue;'>catch</span> (Exception e) {\n            <span style=' color: Blue;'>throw</span> <span style=' color: Blue;'>new</span> RuntimeException(e);\n        }\n    }\n}\n</pre>\n<p>\n    In the example above, the InsecureSocketFactory accepts all certificates silently, which even bypasses the check for trustmanagers\n</p>\n",
    	"relatedTo": "<ul>\n    <li><a href=\"http://jvn.jp/en/jp/JVN39218538/\">JVN#39218538</a> Pizza Hut Japan Official Order App for Android has a problem whereby it fails to verify SSL server certificates.</li>\n    <li><a href=\"http://jvn.jp/en/jp/JVN75084836/\">JVN#75084836</a> Yome Collection for Android has a problem with management of IMEI.</li>\n    <li><a href=\"http://jvn.jp/en/jp/JVN68156832/\">JVN#68156832</a> Yafuoku! contains an issue where it fails to verify SSL server certificates</li>\n</ul>",
    	"intro": "<p>\n    Android SDK 4.0 and later offers packages to implement capabilities to establish network connections. For example, by using java.net, javax.net, android.net org.apache.http, a developer can create server sockets or HTTP connection. org.webkit offers functions necessary to implement web browsing capabilities.\n</p>\n\n<p>\n    A developer has the freedom to customize their SSL implementation. The developer should properly use SSL as appropriate to the intent of the app and the environment the apps are used in.\n</p>\n\n<p>On Android, using HttpURLConnection is recommended for HTTP client implementation.</p>\n",
    	"heading": "SSL SocketFactory is not implemeted properly",
    	"businessImplication": "<p>\nIf proper implementation of SSL is not used, sensitive data may leak from the vulnerable SSL communication channel.\n</p>\n\n",
    	"uuid": "dace2b8c-287e-4c0c-8bf0-e4a88d1ef00f",
    	"id": 7,
    	"type": "vulnerabilitie",
    	"name": "Insecure SSLSocketFactory Implemented",
    	"compliant": "<p>\n    The compliant solution may vary, depending on the actual implementation. For examples of secure implementation such as using a self-signed server certificate, please refer to \"<a href=\"http://www.jssec.org/dl/android_securecoding.pdf\">Android Application Secure Design/Secure Coding Guidebook</a>\", Section 5.4 Communicate by HTTPS.\n</p>\n",
    	"types": [1],
    	"successMessage": "No SSL Errors were found"
    }, {
    	"description": "SQLite3 databases are stored in unencrypted form on the device. Storing sensitive information in such databases may lead to leakage of data. ",
    	"question": "Does this application store sensitive information in SQLite3 databases?",
    	"nonCompliant": "",
    	"relatedTo": "",
    	"intro": "<p>\n    SQLite databases are often used by the applications to store persistent or temporary data which can be further used by the application at later stages. For example, in order to provide seamless experience to the user, an application may store user credentials in SQLite database so that the user doesn't need to enter them again later on. However, these databases don't have any built-in support for encryption and hence, all the information is stored in plain-text format in these files.\n</p>\n",
    	"heading": "Dont use SQLite3 databases to store sensitive information",
    	"businessImplication": "<p>\nFailure to use encryption routines may result in the database and its associated data including user credentials getting compromised.\n</p>\n",
    	"uuid": "89267770-bcb8-486b-a320-3b590fc81ea8",
    	"id": 23,
    	"type": "vulnerabilitie",
    	"name": "Dont use SQLite3 databases to store sensitive information",
    	"compliant": "<p>\n    It is suggested to use custom encryption while storing data in SQLite databases.\n\n</p>\n\n<p>\n    SQLite engine writes the data into Write Ahead Log (WAL) before storing it in the actual database file. Using WAL, there is a possibility to recover the deleted data from the database file. Hence, before deleting any SQLite record, always overwrite it with some junk data so that it can't be read even if someone tries to recover it.\n</p>\n",
    	"types": [2],
    	"successMessage": "this application doesn't store sensitive information in SQLite3 databases"
    }, {
    	"description": "The Android application exports Activity for use by other applications, but does not properly restrict which applications can launch the component or access the data it contains.",
    	"question": "Is the Application Activity Exported?",
    	"nonCompliant": "",
    	"relatedTo": "",
    	"intro": "<p>\nActivities provide user interfaces. Activities are started\nwith Intents, and they can return data to their invoking\ncomponents upon completion. All visible portions\nof applications are Activities.\n</p>\n<p> Exported Activities can be called by any other application installed in the phone\n    leading to XAS (Cross Application Scripting)\n</p>\n",
    	"heading": "The Android application exports Activity for use by other",
    	"businessImplication": "<p>\n    Attackers may use non-privileged services to intercept and track the user's activity. Furthermore, it may be possible to insert data that may maliciously modify the behaviour of the application.\n</p>\n",
    	"uuid": "aba76327-aaf1-448c-ab33-3f847c65948f",
    	"id": 38,
    	"type": "vulnerabilitie",
    	"name": "Android Unprotected Exported Activity",
    	"compliant": "<p>\n\tIf you are using a Activity for sharing between only your own apps, it is preferable to use the android:protectionLevel attribute set to \"signature\" protection. Signature permissions do not require user confirmation, so they provide a better user experience and more controlled access to the application when the apps accessing the Activity are signed with the same key\n</p>\n<p>\n    If the activity is called within itself, then don't export it or use Intent-Filter for custom permissions\n</p>\n",
    	"types": [1],
    	"successMessage": "The Activity in this App seems not to be exported"
	   }]
    }
  });
  this.namespace = 'api';

  this.post('/login', (schema, request) => {
    return {user: '1', token: 'secret'};
  });

  this.get('/check', (schema, request) => {
    return {user: '1', token: 'secret'};
  });

  this.post('/logout', (schema, request) => {
    return {};
  });


}
